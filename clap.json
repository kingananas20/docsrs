{"root":81,"crate_version":"4.5.40","includes_private":false,"index":{"0":{"id":0,"crate_id":0,"name":"cargo_example","span":{"filename":"src/_cookbook/cargo_example.rs","begin":[1,1],"end":[7,58]},"visibility":"public","docs":"# Example: cargo subcommand (Builder API)\n\n```rust\nfn main() {\n    let cmd = clap::Command::new(\"cargo\")\n        .bin_name(\"cargo\")\n        .styles(CLAP_STYLING)\n        .subcommand_required(true)\n        .subcommand(\n            clap::command!(\"example\").arg(\n                clap::arg!(--\"manifest-path\" <PATH>)\n                    .value_parser(clap::value_parser!(std::path::PathBuf)),\n            ),\n        );\n    let matches = cmd.get_matches();\n    let matches = match matches.subcommand() {\n        Some((\"example\", matches)) => matches,\n        _ => unreachable!(\"clap should ensure we don't get here\"),\n    };\n    let manifest_path = matches.get_one::<std::path::PathBuf>(\"manifest-path\");\n    println!(\"{manifest_path:?}\");\n}\n\n// See also `clap_cargo::style::CLAP_STYLING`\npub const CLAP_STYLING: clap::builder::styling::Styles = clap::builder::styling::Styles::styled()\n    .header(clap_cargo::style::HEADER)\n    .usage(clap_cargo::style::USAGE)\n    .literal(clap_cargo::style::LITERAL)\n    .placeholder(clap_cargo::style::PLACEHOLDER)\n    .error(clap_cargo::style::ERROR)\n    .valid(clap_cargo::style::VALID)\n    .invalid(clap_cargo::style::INVALID);\n```\n\nFor more on creating a custom subcommand, see [the cargo\nbook](https://doc.rust-lang.org/cargo/reference/external-tools.html#custom-subcommands).\nThe crate [`clap-cargo`](https://github.com/crate-ci/clap-cargo) can help in\nmimicking cargo's interface.\n\nThe help looks like:\n```console\n$ cargo-example --help\nUsage: cargo <COMMAND>\n\nCommands:\n  example  A simple to use, efficient, and full-featured Command Line Argument Parser\n  help     Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n\n$ cargo-example example --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: cargo example [OPTIONS]\n\nOptions:\n      --manifest-path <PATH>  \n  -h, --help                  Print help\n  -V, --version               Print version\n\n```\n\nThen to directly invoke the command, run:\n```console\n$ cargo-example example\nNone\n\n$ cargo-example example --manifest-path Cargo.toml\nSome(\"Cargo.toml\")\n\n```","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"11":{"id":11,"crate_id":0,"name":"pacman","span":{"filename":"src/_cookbook/pacman.rs","begin":[1,1],"end":[7,51]},"visibility":"public","docs":"# Example: pacman-like CLI (Builder API)\n\n```rust\nuse clap::{Arg, ArgAction, Command};\n\nfn main() {\n    let matches = Command::new(\"pacman\")\n        .about(\"package manager utility\")\n        .version(\"5.2.1\")\n        .subcommand_required(true)\n        .arg_required_else_help(true)\n        // Query subcommand\n        //\n        // Only a few of its arguments are implemented below.\n        .subcommand(\n            Command::new(\"query\")\n                .short_flag('Q')\n                .long_flag(\"query\")\n                .about(\"Query the package database.\")\n                .arg(\n                    Arg::new(\"search\")\n                        .short('s')\n                        .long(\"search\")\n                        .help(\"search locally installed packages for matching strings\")\n                        .conflicts_with(\"info\")\n                        .action(ArgAction::Set)\n                        .num_args(1..),\n                )\n                .arg(\n                    Arg::new(\"info\")\n                        .long(\"info\")\n                        .short('i')\n                        .conflicts_with(\"search\")\n                        .help(\"view package information\")\n                        .action(ArgAction::Set)\n                        .num_args(1..),\n                ),\n        )\n        // Sync subcommand\n        //\n        // Only a few of its arguments are implemented below.\n        .subcommand(\n            Command::new(\"sync\")\n                .short_flag('S')\n                .long_flag(\"sync\")\n                .about(\"Synchronize packages.\")\n                .arg(\n                    Arg::new(\"search\")\n                        .short('s')\n                        .long(\"search\")\n                        .conflicts_with(\"info\")\n                        .action(ArgAction::Set)\n                        .num_args(1..)\n                        .help(\"search remote repositories for matching strings\"),\n                )\n                .arg(\n                    Arg::new(\"info\")\n                        .long(\"info\")\n                        .conflicts_with(\"search\")\n                        .short('i')\n                        .action(ArgAction::SetTrue)\n                        .help(\"view package information\"),\n                )\n                .arg(\n                    Arg::new(\"package\")\n                        .help(\"packages\")\n                        .required_unless_present(\"search\")\n                        .action(ArgAction::Set)\n                        .num_args(1..),\n                ),\n        )\n        .get_matches();\n\n    match matches.subcommand() {\n        Some((\"sync\", sync_matches)) => {\n            if sync_matches.contains_id(\"search\") {\n                let packages: Vec<_> = sync_matches\n                    .get_many::<String>(\"search\")\n                    .expect(\"contains_id\")\n                    .map(|s| s.as_str())\n                    .collect();\n                let values = packages.join(\", \");\n                println!(\"Searching for {values}...\");\n                return;\n            }\n\n            let packages: Vec<_> = sync_matches\n                .get_many::<String>(\"package\")\n                .expect(\"is present\")\n                .map(|s| s.as_str())\n                .collect();\n            let values = packages.join(\", \");\n\n            if sync_matches.get_flag(\"info\") {\n                println!(\"Retrieving info for {values}...\");\n            } else {\n                println!(\"Installing {values}...\");\n            }\n        }\n        Some((\"query\", query_matches)) => {\n            if let Some(packages) = query_matches.get_many::<String>(\"info\") {\n                let comma_sep = packages.map(|s| s.as_str()).collect::<Vec<_>>().join(\", \");\n                println!(\"Retrieving info for {comma_sep}...\");\n            } else if let Some(queries) = query_matches.get_many::<String>(\"search\") {\n                let comma_sep = queries.map(|s| s.as_str()).collect::<Vec<_>>().join(\", \");\n                println!(\"Searching Locally for {comma_sep}...\");\n            } else {\n                println!(\"Displaying all locally installed packages...\");\n            }\n        }\n        _ => unreachable!(), // If all subcommands are defined above, anything else is unreachable\n    }\n}\n```\n\n[`pacman`](https://wiki.archlinux.org/index.php/pacman) defines subcommands via flags.\n\nHere, `-S` is a short flag subcommand:\n```console\n$ pacman -S package\nInstalling package...\n\n```\n\nHere `--sync` is a long flag subcommand:\n```console\n$ pacman --sync package\nInstalling package...\n\n```\n\nNow the short flag subcommand (`-S`) with a long flag:\n```console\n$ pacman -S --search name\nSearching for name...\n\n```\n\nAnd the various forms of short flags that work:\n```console\n$ pacman -S -s name\nSearching for name...\n\n$ pacman -Ss name\nSearching for name...\n\n```\n*(users can \"stack\" short subcommands with short flags or with other short flag subcommands)*\n\nIn the help, this looks like:\n```console\n$ pacman -h\npackage manager utility\n\nUsage: pacman[EXE] <COMMAND>\n\nCommands:\n  query, -Q, --query  Query the package database.\n  sync, -S, --sync    Synchronize packages.\n  help                Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ pacman -S -h\nSynchronize packages.\n\nUsage: pacman[EXE] {sync|--sync|-S} [OPTIONS] [package]...\n\nArguments:\n  [package]...  packages\n\nOptions:\n  -s, --search <search>...  search remote repositories for matching strings\n  -i, --info                view package information\n  -h, --help                Print help\n\n```\n\nAnd errors:\n```console\n$ pacman -S -s foo -i bar\n? failed\nerror: the argument '--search <search>...' cannot be used with '--info'\n\nUsage: pacman[EXE] {sync|--sync|-S} --search <search>... <package>...\n\nFor more information, try '--help'.\n\n```\n\n<div class=\"warning\">\n\n**NOTE:** Keep in mind that subcommands, flags, and long flags are *case sensitive*: `-Q` and `-q` are different flags/subcommands. For example, you can have both `-Q` subcommand and `-q` flag, and they will be properly disambiguated.\nLet's make a quick program to illustrate.\n\n</div>","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"3":{"id":3,"crate_id":0,"name":"escaped_positional","span":{"filename":"src/_cookbook/escaped_positional.rs","begin":[1,1],"end":[7,63]},"visibility":"public","docs":"# Example (Builder API)\n\n```rust\nuse clap::{arg, command, value_parser, ArgAction};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(arg!(eff: -f).action(ArgAction::SetTrue))\n        .arg(arg!(pea: -p <PEAR>).value_parser(value_parser!(String)))\n        .arg(\n            // Indicates that `slop` is only accessible after `--`.\n            arg!(slop: [SLOP])\n                .num_args(1..)\n                .last(true)\n                .value_parser(value_parser!(String)),\n        )\n        .get_matches();\n\n    // This is what will happen with `myprog -f -p=bob -- sloppy slop slop`...\n\n    // -f used: true\n    println!(\"-f used: {:?}\", matches.get_flag(\"eff\"));\n    // -p's value: Some(\"bob\")\n    println!(\"-p's value: {:?}\", matches.get_one::<String>(\"pea\"));\n    // 'slops' values: Some([\"sloppy\", \"slop\", \"slop\"])\n    println!(\n        \"'slops' values: {:?}\",\n        matches\n            .get_many::<String>(\"slop\")\n            .map(|vals| vals.collect::<Vec<_>>())\n            .unwrap_or_default()\n    );\n\n    // Continued program logic goes here...\n}\n```\n\n**This requires enabling the [`cargo` feature flag][crate::_features].**\n\nYou can use `--` to escape further arguments.\n\nLet's see what this looks like in the help:\n```console\n$ escaped-positional --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: escaped-positional[EXE] [OPTIONS] [-- <SLOP>...]\n\nArguments:\n  [SLOP]...  \n\nOptions:\n  -f             \n  -p <PEAR>      \n  -h, --help     Print help\n  -V, --version  Print version\n\n```\n\nHere is a baseline without any arguments:\n```console\n$ escaped-positional\n-f used: false\n-p's value: None\n'slops' values: []\n\n```\n\nNotice that we can't pass positional arguments before `--`:\n```console\n$ escaped-positional foo bar\n? failed\nerror: unexpected argument 'foo' found\n\nUsage: escaped-positional[EXE] [OPTIONS] [-- <SLOP>...]\n\nFor more information, try '--help'.\n\n```\n\nBut you can after:\n```console\n$ escaped-positional -f -p=bob -- sloppy slop slop\n-f used: true\n-p's value: Some(\"bob\")\n'slops' values: [\"sloppy\", \"slop\", \"slop\"]\n\n```\n\nAs mentioned, the parser will directly pass everything through:\n```console\n$ escaped-positional -- -f -p=bob sloppy slop slop\n-f used: false\n-p's value: None\n'slops' values: [\"-f\", \"-p=bob\", \"sloppy\", \"slop\", \"slop\"]\n\n```","links":{"crate::_features":2},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"14":{"id":14,"crate_id":0,"name":"typed_derive","span":{"filename":"src/_cookbook/typed_derive.rs","begin":[1,1],"end":[7,57]},"visibility":"public","docs":"# Example: Custom Types (Derive API)\n\n```rust\nuse clap::builder::TypedValueParser as _;\nuse clap::Parser;\nuse std::error::Error;\n\n#[derive(Parser, Debug)] // requires `derive` feature\n#[command(term_width = 0)] // Just to make testing across clap features easier\nstruct Args {\n    /// Implicitly using `std::str::FromStr`\n    #[arg(short = 'O')]\n    optimization: Option<usize>,\n\n    /// Allow invalid UTF-8 paths\n    #[arg(short = 'I', value_name = \"DIR\", value_hint = clap::ValueHint::DirPath)]\n    include: Option<std::path::PathBuf>,\n\n    /// Handle IP addresses\n    #[arg(long)]\n    bind: Option<std::net::IpAddr>,\n\n    /// Allow human-readable durations\n    #[arg(long)]\n    sleep: Option<jiff::SignedDuration>,\n\n    /// Hand-written parser for tuples\n    #[arg(short = 'D', value_parser = parse_key_val::<String, i32>)]\n    defines: Vec<(String, i32)>,\n\n    /// Support for discrete numbers\n    #[arg(\n        long,\n        default_value_t = 22,\n        value_parser = clap::builder::PossibleValuesParser::new([\"22\", \"80\"])\n            .map(|s| s.parse::<usize>().unwrap()),\n    )]\n    port: usize,\n\n    /// Support enums from a foreign crate that don't implement `ValueEnum`\n    #[arg(\n        long,\n        default_value_t = foreign_crate::LogLevel::Info,\n        value_parser = clap::builder::PossibleValuesParser::new([\"trace\", \"debug\", \"info\", \"warn\", \"error\"])\n            .map(|s| s.parse::<foreign_crate::LogLevel>().unwrap()),\n    )]\n    log_level: foreign_crate::LogLevel,\n}\n\n/// Parse a single key-value pair\nfn parse_key_val<T, U>(s: &str) -> Result<(T, U), Box<dyn Error + Send + Sync + 'static>>\nwhere\n    T: std::str::FromStr,\n    T::Err: Error + Send + Sync + 'static,\n    U: std::str::FromStr,\n    U::Err: Error + Send + Sync + 'static,\n{\n    let pos = s\n        .find('=')\n        .ok_or_else(|| format!(\"invalid KEY=value: no `=` found in `{s}`\"))?;\n    Ok((s[..pos].parse()?, s[pos + 1..].parse()?))\n}\n\nmod foreign_crate {\n    #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n    pub(crate) enum LogLevel {\n        Trace,\n        Debug,\n        Info,\n        Warn,\n        Error,\n    }\n\n    impl std::fmt::Display for LogLevel {\n        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n            let s = match self {\n                Self::Trace => \"trace\",\n                Self::Debug => \"debug\",\n                Self::Info => \"info\",\n                Self::Warn => \"warn\",\n                Self::Error => \"error\",\n            };\n            s.fmt(f)\n        }\n    }\n    impl std::str::FromStr for LogLevel {\n        type Err = String;\n\n        fn from_str(s: &str) -> Result<Self, Self::Err> {\n            match s {\n                \"trace\" => Ok(Self::Trace),\n                \"debug\" => Ok(Self::Debug),\n                \"info\" => Ok(Self::Info),\n                \"warn\" => Ok(Self::Warn),\n                \"error\" => Ok(Self::Error),\n                _ => Err(format!(\"Unknown log level: {s}\")),\n            }\n        }\n    }\n}\n\nfn main() {\n    let args = Args::parse();\n    println!(\"{args:?}\");\n}\n```\n\n**This requires enabling the [`derive` feature flag][crate::_features].**\n\nHelp:\n```console\n$ typed-derive --help\nUsage: typed-derive[EXE] [OPTIONS]\n\nOptions:\n  -O <OPTIMIZATION>            Implicitly using `std::str::FromStr`\n  -I <DIR>                     Allow invalid UTF-8 paths\n      --bind <BIND>            Handle IP addresses\n      --sleep <SLEEP>          Allow human-readable durations\n  -D <DEFINES>                 Hand-written parser for tuples\n      --port <PORT>            Support for discrete numbers [default: 22] [possible values: 22, 80]\n      --log-level <LOG_LEVEL>  Support enums from a foreign crate that don't implement `ValueEnum` [default: info] [possible values: trace, debug, info, warn, error]\n  -h, --help                   Print help\n\n```\n\nOptimization-level (number)\n```console\n$ typed-derive -O 1\nArgs { optimization: Some(1), include: None, bind: None, sleep: None, defines: [], port: 22, log_level: Info }\n\n$ typed-derive -O plaid\n? failed\nerror: invalid value 'plaid' for '-O <OPTIMIZATION>': invalid digit found in string\n\nFor more information, try '--help'.\n\n```\n\nInclude (path)\n```console\n$ typed-derive -I../hello\nArgs { optimization: None, include: Some(\"../hello\"), bind: None, sleep: None, defines: [], port: 22, log_level: Info }\n\n```\n\nIP Address\n```console\n$ typed-derive --bind 192.0.0.1\nArgs { optimization: None, include: None, bind: Some(192.0.0.1), sleep: None, defines: [], port: 22, log_level: Info }\n\n$ typed-derive --bind localhost\n? failed\nerror: invalid value 'localhost' for '--bind <BIND>': invalid IP address syntax\n\nFor more information, try '--help'.\n\n```\n\nTime\n```console\n$ typed-derive --sleep 10s\nArgs { optimization: None, include: None, bind: None, sleep: Some(10s), defines: [], port: 22, log_level: Info }\n\n$ typed-derive --sleep forever\n? failed\nerror: invalid value 'forever' for '--sleep <SLEEP>': failed to parse \"forever\" in the \"friendly\" format: parsing a friendly duration requires it to start with a unit value (a decimal integer) after an optional sign, but no integer was found\n\nFor more information, try '--help'.\n\n```\n\nDefines (key-value pairs)\n```console\n$ typed-derive -D Foo=10 -D Alice=30\nArgs { optimization: None, include: None, bind: None, sleep: None, defines: [(\"Foo\", 10), (\"Alice\", 30)], port: 22, log_level: Info }\n\n$ typed-derive -D Foo\n? failed\nerror: invalid value 'Foo' for '-D <DEFINES>': invalid KEY=value: no `=` found in `Foo`\n\nFor more information, try '--help'.\n\n$ typed-derive -D Foo=Bar\n? failed\nerror: invalid value 'Foo=Bar' for '-D <DEFINES>': invalid digit found in string\n\nFor more information, try '--help'.\n\n```\n\nDiscrete numbers\n```console\n$ typed-derive --port 22\nArgs { optimization: None, include: None, bind: None, sleep: None, defines: [], port: 22, log_level: Info }\n\n$ typed-derive --port 80\nArgs { optimization: None, include: None, bind: None, sleep: None, defines: [], port: 80, log_level: Info }\n\n$ typed-derive --port\n? failed\nerror: a value is required for '--port <PORT>' but none was supplied\n  [possible values: 22, 80]\n\nFor more information, try '--help'.\n\n$ typed-derive --port 3000\n? failed\nerror: invalid value '3000' for '--port <PORT>'\n  [possible values: 22, 80]\n\nFor more information, try '--help'.\n\n```\n\nEnums from crates that can't implement `ValueEnum`\n```console\n$ typed-derive --log-level debug\nArgs { optimization: None, include: None, bind: None, sleep: None, defines: [], port: 22, log_level: Debug }\n\n$ typed-derive --log-level error\nArgs { optimization: None, include: None, bind: None, sleep: None, defines: [], port: 22, log_level: Error }\n\n$ typed-derive --log-level\n? failed\nerror: a value is required for '--log-level <LOG_LEVEL>' but none was supplied\n  [possible values: trace, debug, info, warn, error]\n\nFor more information, try '--help'.\n\n$ typed-derive --log-level critical\n? failed\nerror: invalid value 'critical' for '--log-level <LOG_LEVEL>'\n  [possible values: trace, debug, info, warn, error]\n\nFor more information, try '--help'.\n\n```","links":{"crate::_features":2},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"6":{"id":6,"crate_id":0,"name":"git","span":{"filename":"src/_cookbook/git.rs","begin":[1,1],"end":[7,48]},"visibility":"public","docs":"# Example: git-like CLI (Builder API)\n\n```rust\nuse std::ffi::OsString;\nuse std::path::PathBuf;\n\nuse clap::{arg, Command};\n\nfn cli() -> Command {\n    Command::new(\"git\")\n        .about(\"A fictional versioning CLI\")\n        .subcommand_required(true)\n        .arg_required_else_help(true)\n        .allow_external_subcommands(true)\n        .subcommand(\n            Command::new(\"clone\")\n                .about(\"Clones repos\")\n                .arg(arg!(<REMOTE> \"The remote to clone\"))\n                .arg_required_else_help(true),\n        )\n        .subcommand(\n            Command::new(\"diff\")\n                .about(\"Compare two commits\")\n                .arg(arg!(base: [COMMIT]))\n                .arg(arg!(head: [COMMIT]))\n                .arg(arg!(path: [PATH]).last(true))\n                .arg(\n                    arg!(--color <WHEN>)\n                        .value_parser([\"always\", \"auto\", \"never\"])\n                        .num_args(0..=1)\n                        .require_equals(true)\n                        .default_value(\"auto\")\n                        .default_missing_value(\"always\"),\n                ),\n        )\n        .subcommand(\n            Command::new(\"push\")\n                .about(\"pushes things\")\n                .arg(arg!(<REMOTE> \"The remote to target\"))\n                .arg_required_else_help(true),\n        )\n        .subcommand(\n            Command::new(\"add\")\n                .about(\"adds things\")\n                .arg_required_else_help(true)\n                .arg(arg!(<PATH> ... \"Stuff to add\").value_parser(clap::value_parser!(PathBuf))),\n        )\n        .subcommand(\n            Command::new(\"stash\")\n                .args_conflicts_with_subcommands(true)\n                .flatten_help(true)\n                .args(push_args())\n                .subcommand(Command::new(\"push\").args(push_args()))\n                .subcommand(Command::new(\"pop\").arg(arg!([STASH])))\n                .subcommand(Command::new(\"apply\").arg(arg!([STASH]))),\n        )\n}\n\nfn push_args() -> Vec<clap::Arg> {\n    vec![arg!(-m --message <MESSAGE>)]\n}\n\nfn main() {\n    let matches = cli().get_matches();\n\n    match matches.subcommand() {\n        Some((\"clone\", sub_matches)) => {\n            println!(\n                \"Cloning {}\",\n                sub_matches.get_one::<String>(\"REMOTE\").expect(\"required\")\n            );\n        }\n        Some((\"diff\", sub_matches)) => {\n            let color = sub_matches\n                .get_one::<String>(\"color\")\n                .map(|s| s.as_str())\n                .expect(\"defaulted in clap\");\n\n            let mut base = sub_matches.get_one::<String>(\"base\").map(|s| s.as_str());\n            let mut head = sub_matches.get_one::<String>(\"head\").map(|s| s.as_str());\n            let mut path = sub_matches.get_one::<String>(\"path\").map(|s| s.as_str());\n            if path.is_none() {\n                path = head;\n                head = None;\n                if path.is_none() {\n                    path = base;\n                    base = None;\n                }\n            }\n            let base = base.unwrap_or(\"stage\");\n            let head = head.unwrap_or(\"worktree\");\n            let path = path.unwrap_or(\"\");\n            println!(\"Diffing {base}..{head} {path} (color={color})\");\n        }\n        Some((\"push\", sub_matches)) => {\n            println!(\n                \"Pushing to {}\",\n                sub_matches.get_one::<String>(\"REMOTE\").expect(\"required\")\n            );\n        }\n        Some((\"add\", sub_matches)) => {\n            let paths = sub_matches\n                .get_many::<PathBuf>(\"PATH\")\n                .into_iter()\n                .flatten()\n                .collect::<Vec<_>>();\n            println!(\"Adding {paths:?}\");\n        }\n        Some((\"stash\", sub_matches)) => {\n            let stash_command = sub_matches.subcommand().unwrap_or((\"push\", sub_matches));\n            match stash_command {\n                (\"apply\", sub_matches) => {\n                    let stash = sub_matches.get_one::<String>(\"STASH\");\n                    println!(\"Applying {stash:?}\");\n                }\n                (\"pop\", sub_matches) => {\n                    let stash = sub_matches.get_one::<String>(\"STASH\");\n                    println!(\"Popping {stash:?}\");\n                }\n                (\"push\", sub_matches) => {\n                    let message = sub_matches.get_one::<String>(\"message\");\n                    println!(\"Pushing {message:?}\");\n                }\n                (name, _) => {\n                    unreachable!(\"Unsupported subcommand `{name}`\")\n                }\n            }\n        }\n        Some((ext, sub_matches)) => {\n            let args = sub_matches\n                .get_many::<OsString>(\"\")\n                .into_iter()\n                .flatten()\n                .collect::<Vec<_>>();\n            println!(\"Calling out to {ext:?} with {args:?}\");\n        }\n        _ => unreachable!(), // If all subcommands are defined above, anything else is unreachable!()\n    }\n\n    // Continued program logic goes here...\n}\n```\n\nGit is an example of several common subcommand patterns.\n\nHelp:\n```console\n$ git\n? failed\nA fictional versioning CLI\n\nUsage: git[EXE] <COMMAND>\n\nCommands:\n  clone  Clones repos\n  diff   Compare two commits\n  push   pushes things\n  add    adds things\n  stash  \n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n\n$ git help\nA fictional versioning CLI\n\nUsage: git[EXE] <COMMAND>\n\nCommands:\n  clone  Clones repos\n  diff   Compare two commits\n  push   pushes things\n  add    adds things\n  stash  \n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n\n$ git help add\nadds things\n\nUsage: git[EXE] add <PATH>...\n\nArguments:\n  <PATH>...  Stuff to add\n\nOptions:\n  -h, --help  Print help\n\n```\n\nA basic argument:\n```console\n$ git add\n? failed\nadds things\n\nUsage: git[EXE] add <PATH>...\n\nArguments:\n  <PATH>...  Stuff to add\n\nOptions:\n  -h, --help  Print help\n\n$ git add Cargo.toml Cargo.lock\nAdding [\"Cargo.toml\", \"Cargo.lock\"]\n\n```\n\nDefault subcommand:\n```console\n$ git stash -h\nUsage: git[EXE] stash [OPTIONS]\n       git[EXE] stash push [OPTIONS]\n       git[EXE] stash pop [STASH]\n       git[EXE] stash apply [STASH]\n       git[EXE] stash help [COMMAND]...\n\nOptions:\n  -m, --message <MESSAGE>  \n  -h, --help               Print help\n\ngit[EXE] stash push:\n  -m, --message <MESSAGE>  \n  -h, --help               Print help\n\ngit[EXE] stash pop:\n  -h, --help  Print help\n  [STASH]     \n\ngit[EXE] stash apply:\n  -h, --help  Print help\n  [STASH]     \n\ngit[EXE] stash help:\nPrint this message or the help of the given subcommand(s)\n  [COMMAND]...  Print help for the subcommand(s)\n\n$ git stash push -h\nUsage: git[EXE] stash push [OPTIONS]\n\nOptions:\n  -m, --message <MESSAGE>  \n  -h, --help               Print help\n\n$ git stash pop -h\nUsage: git[EXE] stash pop [STASH]\n\nArguments:\n  [STASH]  \n\nOptions:\n  -h, --help  Print help\n\n$ git stash -m \"Prototype\"\nPushing Some(\"Prototype\")\n\n$ git stash pop\nPopping None\n\n$ git stash push -m \"Prototype\"\nPushing Some(\"Prototype\")\n\n$ git stash pop\nPopping None\n\n```\n\nExternal subcommands:\n```console\n$ git custom-tool arg1 --foo bar\nCalling out to \"custom-tool\" with [\"arg1\", \"--foo\", \"bar\"]\n\n```\n\nLast argument:\n```console\n$ git diff --help\nCompare two commits\n\nUsage: git[EXE] diff [OPTIONS] [COMMIT] [COMMIT] [-- <PATH>]\n\nArguments:\n  [COMMIT]  \n  [COMMIT]  \n  [PATH]    \n\nOptions:\n      --color[=<WHEN>]  [default: auto] [possible values: always, auto, never]\n  -h, --help            Print help\n\n$ git diff\nDiffing stage..worktree  (color=auto)\n\n$ git diff ./src\nDiffing stage..worktree ./src (color=auto)\n\n$ git diff HEAD ./src\nDiffing HEAD..worktree ./src (color=auto)\n\n$ git diff HEAD~~ -- HEAD\nDiffing HEAD~~..worktree HEAD (color=auto)\n\n$ git diff --color\nDiffing stage..worktree  (color=always)\n\n$ git diff --color=never\nDiffing stage..worktree  (color=never)\n\n```","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"17":{"id":17,"crate_id":0,"name":"_cookbook","span":{"filename":"src/_cookbook/mod.rs","begin":[8,1],"end":[63,22]},"visibility":"public","docs":"# Documentation: Cookbook\n\nTyped arguments: [derive][typed_derive]\n- Topics:\n  - Custom `parse()`\n\nCustom cargo command: [builder][cargo_example], [derive][cargo_example_derive]\n- Topics:\n  - Subcommands\n  - Cargo plugins\n  - custom terminal [styles][crate::Command::styles] (colors)\n\nfind-like interface: [builder][find]\n- Topics:\n  - Position-sensitive flags\n\ngit-like interface: [builder][git], [derive][git_derive]\n- Topics:\n  - Subcommands\n  - External subcommands\n  - Optional subcommands\n  - Default subcommands\n  - [`last`][crate::Arg::last]\n\npacman-like interface: [builder][pacman]\n- Topics:\n  - Flag subcommands\n  - Conflicting arguments\n\nEscaped positionals with `--`: [builder][escaped_positional], [derive][escaped_positional_derive]\n\nMulti-call\n- busybox: [builder][multicall_busybox]\n  - Topics:\n    - Subcommands\n- hostname: [builder][multicall_hostname]\n  - Topics:\n    - Subcommands\n\nrepl: [builder][repl], [derive][repl_derive]\n- Topics:\n  - Read-Eval-Print Loops / Custom command lines","links":{"escaped_positional_derive":4,"repl":12,"crate::Command::styles":15,"git_derive":7,"multicall_hostname":10,"typed_derive":14,"find":5,"multicall_busybox":9,"cargo_example_derive":1,"git":6,"cargo_example":0,"crate::Arg::last":16,"repl_derive":13,"pacman":11,"escaped_positional":3},"attrs":["#[<cfg>(feature = \"unstable-doc\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[0,1,3,4,5,6,7,9,10,11,12,13,14],"is_stripped":false}}},"9":{"id":9,"crate_id":0,"name":"multicall_busybox","span":{"filename":"src/_cookbook/multicall_busybox.rs","begin":[1,1],"end":[7,62]},"visibility":"public","docs":"# Example: busybox-like CLI (Builder API)\n\n```rust\nuse std::path::PathBuf;\nuse std::process::exit;\n\nuse clap::{value_parser, Arg, ArgAction, Command};\n\nfn applet_commands() -> [Command; 2] {\n    [\n        Command::new(\"true\").about(\"does nothing successfully\"),\n        Command::new(\"false\").about(\"does nothing unsuccessfully\"),\n    ]\n}\n\nfn main() {\n    let cmd = Command::new(env!(\"CARGO_CRATE_NAME\"))\n        .multicall(true)\n        .subcommand(\n            Command::new(\"busybox\")\n                .arg_required_else_help(true)\n                .subcommand_value_name(\"APPLET\")\n                .subcommand_help_heading(\"APPLETS\")\n                .arg(\n                    Arg::new(\"install\")\n                        .long(\"install\")\n                        .help(\"Install hardlinks for all subcommands in path\")\n                        .exclusive(true)\n                        .action(ArgAction::Set)\n                        .default_missing_value(\"/usr/local/bin\")\n                        .value_parser(value_parser!(PathBuf)),\n                )\n                .subcommands(applet_commands()),\n        )\n        .subcommands(applet_commands());\n\n    let matches = cmd.get_matches();\n    let mut subcommand = matches.subcommand();\n    if let Some((\"busybox\", cmd)) = subcommand {\n        if cmd.contains_id(\"install\") {\n            unimplemented!(\"Make hardlinks to the executable here\");\n        }\n        subcommand = cmd.subcommand();\n    }\n    match subcommand {\n        Some((\"false\", _)) => exit(1),\n        Some((\"true\", _)) => exit(0),\n        _ => unreachable!(\"parser should ensure only valid subcommand names are used\"),\n    }\n}\n```\n\nSee the documentation for [`Command::multicall`][crate::Command::multicall] for rationale.\n\nThis example omits every command except true and false,\nwhich are the most trivial to implement,\n```console\n$ busybox true\n? 0\n\n$ busybox false\n? 1\n\n```\n*Note: without the links setup, we can't demonstrate the multicall behavior*\n\nBut includes the `--install` option as an example of why it can be useful\nfor the main program to take arguments that aren't applet subcommands.\n```console\n$ busybox --install\n? failed\n...\n\n```\n\nThough users must pass something:\n```console\n$ busybox\n? failed\nUsage: busybox [OPTIONS] [APPLET]\n\nAPPLETS:\n  true   does nothing successfully\n  false  does nothing unsuccessfully\n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n      --install <install>  Install hardlinks for all subcommands in path\n  -h, --help               Print help\n\n```","links":{"crate::Command::multicall":8},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"42":{"id":42,"crate_id":0,"name":"_tutorial","span":{"filename":"src/_derive/_tutorial.rs","begin":[10,1],"end":[257,23]},"visibility":"public","docs":"## Tutorial for the Derive API\n\n*See the side bar for the Table of Contents*\n\n## Quick Start\n\nYou can create an application declaratively with a `struct` and some\nattributes.\n\nFirst, ensure `clap` is available with the [`derive` feature flag][crate::_features]:\n```console\n$ cargo add clap --features derive\n```\n\nHere is a preview of the type of application you can make:\n```rust\nuse std::path::PathBuf;\n\nuse clap::{Parser, Subcommand};\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    /// Optional name to operate on\n    name: Option<String>,\n\n    /// Sets a custom config file\n    #[arg(short, long, value_name = \"FILE\")]\n    config: Option<PathBuf>,\n\n    /// Turn debugging information on\n    #[arg(short, long, action = clap::ArgAction::Count)]\n    debug: u8,\n\n    #[command(subcommand)]\n    command: Option<Commands>,\n}\n\n#[derive(Subcommand)]\nenum Commands {\n    /// does testing things\n    Test {\n        /// lists test values\n        #[arg(short, long)]\n        list: bool,\n    },\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    // You can check the value provided by positional arguments, or option arguments\n    if let Some(name) = cli.name.as_deref() {\n        println!(\"Value for name: {name}\");\n    }\n\n    if let Some(config_path) = cli.config.as_deref() {\n        println!(\"Value for config: {}\", config_path.display());\n    }\n\n    // You can see how many times a particular flag or argument occurred\n    // Note, only flags can have multiple occurrences\n    match cli.debug {\n        0 => println!(\"Debug mode is off\"),\n        1 => println!(\"Debug mode is kind of on\"),\n        2 => println!(\"Debug mode is on\"),\n        _ => println!(\"Don't be crazy\"),\n    }\n\n    // You can check for the existence of subcommands, and if found use their\n    // matches just as you would the top level cmd\n    match &cli.command {\n        Some(Commands::Test { list }) => {\n            if *list {\n                println!(\"Printing testing lists...\");\n            } else {\n                println!(\"Not printing testing lists...\");\n            }\n        }\n        None => {}\n    }\n\n    // Continued program logic goes here...\n}\n```\n\n```console\n$ 01_quick_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 01_quick_derive[EXE] [OPTIONS] [NAME] [COMMAND]\n\nCommands:\n  test  does testing things\n  help  Print this message or the help of the given subcommand(s)\n\nArguments:\n  [NAME]  Optional name to operate on\n\nOptions:\n  -c, --config <FILE>  Sets a custom config file\n  -d, --debug...       Turn debugging information on\n  -h, --help           Print help\n  -V, --version        Print version\n\n```\n\nBy default, the program does nothing:\n```console\n$ 01_quick_derive\nDebug mode is off\n\n```\n\nBut you can mix and match the various features\n```console\n$ 01_quick_derive -dd test\nDebug mode is on\nNot printing testing lists...\n\n```\n\nSee also\n- [FAQ: When should I use the builder vs derive APIs?][crate::_faq#when-should-i-use-the-builder-vs-derive-apis]\n- The [cookbook][crate::_cookbook] for more application-focused examples\n\n## Configuring the Parser\n\nYou use derive [`Parser`][crate::Parser] to start building a parser.\n\n```rust\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(name = \"MyApp\")]\n#[command(version = \"1.0\")]\n#[command(about = \"Does awesome things\", long_about = None)]\nstruct Cli {\n    #[arg(long)]\n    two: String,\n    #[arg(long)]\n    one: String,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"two: {:?}\", cli.two);\n    println!(\"one: {:?}\", cli.one);\n}\n```\n\n```console\n$ 02_apps_derive --help\nDoes awesome things\n\nUsage: 02_apps_derive[EXE] --two <TWO> --one <ONE>\n\nOptions:\n      --two <TWO>  \n      --one <ONE>  \n  -h, --help       Print help\n  -V, --version    Print version\n\n$ 02_apps_derive --version\nMyApp 1.0\n\n```\n\nYou can use [`#[command(version, about)]` attribute defaults][super#command-attributes] on the struct to fill these fields in from your `Cargo.toml` file.\n\n```rust\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)] // Read from `Cargo.toml`\nstruct Cli {\n    #[arg(long)]\n    two: String,\n    #[arg(long)]\n    one: String,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"two: {:?}\", cli.two);\n    println!(\"one: {:?}\", cli.one);\n}\n```\n```console\n$ 02_crate_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 02_crate_derive[EXE] --two <TWO> --one <ONE>\n\nOptions:\n      --two <TWO>  \n      --one <ONE>  \n  -h, --help       Print help\n  -V, --version    Print version\n\n$ 02_crate_derive --version\nclap [..]\n\n```\n\nYou can use `#[command]` attributes on the struct to change the application level behavior of clap.  Any [`Command`][crate::Command] builder function can be used as an attribute, like [`Command::next_line_help`].\n\n```rust\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\n#[command(next_line_help = true)]\nstruct Cli {\n    #[arg(long)]\n    two: String,\n    #[arg(long)]\n    one: String,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"two: {:?}\", cli.two);\n    println!(\"one: {:?}\", cli.one);\n}\n```\n```console\n$ 02_app_settings_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 02_app_settings_derive[EXE] --two <TWO> --one <ONE>\n\nOptions:\n      --two <TWO>\n          \n      --one <ONE>\n          \n  -h, --help\n          Print help\n  -V, --version\n          Print version\n\n```\n\n## Adding Arguments\n\n1. [Positionals](#positionals)\n2. [Options](#options)\n3. [Flags](#flags)\n4. [Optional](#optional)\n5. [Defaults](#defaults)\n6. [Subcommands](#subcommands)\n\nArguments are inferred from the fields of your struct.\n\n### Positionals\n\nBy default, struct fields define positional arguments:\n\n```rust\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    name: String,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"name: {:?}\", cli.name);\n}\n```\n```console\n$ 03_03_positional_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_03_positional_derive[EXE] <NAME>\n\nArguments:\n  <NAME>  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_03_positional_derive\n? 2\nerror: the following required arguments were not provided:\n  <NAME>\n\nUsage: 03_03_positional_derive[EXE] <NAME>\n\nFor more information, try '--help'.\n\n$ 03_03_positional_derive bob\nname: \"bob\"\n\n```\n\nNote that the [default `ArgAction` is `Set`][super#arg-types].  To\naccept multiple values, override the [action][Arg::action] with [`Append`][crate::ArgAction::Append] via `Vec`:\n```rust\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    name: Vec<String>,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"name: {:?}\", cli.name);\n}\n```\n```console\n$ 03_03_positional_mult_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_03_positional_mult_derive[EXE] [NAME]...\n\nArguments:\n  [NAME]...  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_03_positional_mult_derive\nname: []\n\n$ 03_03_positional_mult_derive bob\nname: [\"bob\"]\n\n$ 03_03_positional_mult_derive bob john\nname: [\"bob\", \"john\"]\n\n```\n\n### Options\n\nYou can name your arguments with a flag:\n- Intent of the value is clearer\n- Order doesn't matter\n\nTo specify the flags for an argument, you can use [`#[arg(short = 'n')]`][Arg::short] and/or\n[`#[arg(long = \"name\")]`][Arg::long] attributes on a field.  When no value is given (e.g.\n`#[arg(short)]`), the flag is inferred from the field's name.\n\n```rust\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    #[arg(short, long)]\n    name: String,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"name: {:?}\", cli.name);\n}\n```\n```console\n$ 03_02_option_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_02_option_derive[EXE] --name <NAME>\n\nOptions:\n  -n, --name <NAME>  \n  -h, --help         Print help\n  -V, --version      Print version\n\n$ 03_02_option_derive\n? 2\nerror: the following required arguments were not provided:\n  --name <NAME>\n\nUsage: 03_02_option_derive[EXE] --name <NAME>\n\nFor more information, try '--help'.\n\n$ 03_02_option_derive --name bob\nname: \"bob\"\n\n$ 03_02_option_derive --name=bob\nname: \"bob\"\n\n$ 03_02_option_derive -n bob\nname: \"bob\"\n\n$ 03_02_option_derive -n=bob\nname: \"bob\"\n\n$ 03_02_option_derive -nbob\nname: \"bob\"\n\n```\n\nNote that the [default `ArgAction` is `Set`][super#arg-types].  To\naccept multiple occurrences, override the [action][Arg::action] with [`Append`][crate::ArgAction::Append] via `Vec`:\n```rust\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    #[arg(short, long)]\n    name: Vec<String>,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"name: {:?}\", cli.name);\n}\n```\n```console\n$ 03_02_option_mult_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_02_option_mult_derive[EXE] [OPTIONS]\n\nOptions:\n  -n, --name <NAME>  \n  -h, --help         Print help\n  -V, --version      Print version\n\n$ 03_02_option_mult_derive\nname: []\n\n$ 03_02_option_mult_derive --name bob\nname: [\"bob\"]\n\n$ 03_02_option_mult_derive --name bob --name john\nname: [\"bob\", \"john\"]\n\n$ 03_02_option_mult_derive --name bob --name=john -n tom -n=chris -nsteve\nname: [\"bob\", \"john\", \"tom\", \"chris\", \"steve\"]\n\n```\n\n### Flags\n\nFlags can also be switches that can be on/off:\n\n```rust\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    #[arg(short, long)]\n    verbose: bool,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"verbose: {:?}\", cli.verbose);\n}\n```\n```console\n$ 03_01_flag_bool_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_01_flag_bool_derive[EXE] [OPTIONS]\n\nOptions:\n  -v, --verbose  \n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_01_flag_bool_derive\nverbose: false\n\n$ 03_01_flag_bool_derive --verbose\nverbose: true\n\n$ 03_01_flag_bool_derive --verbose --verbose\n? failed\nerror: the argument '--verbose' cannot be used multiple times\n\nUsage: 03_01_flag_bool_derive[EXE] [OPTIONS]\n\nFor more information, try '--help'.\n\n```\n\nNote that the [default `ArgAction` for a `bool` field is\n`SetTrue`][super#arg-types].  To accept multiple flags, override the [action][Arg::action] with\n[`Count`][crate::ArgAction::Count]:\n\n```rust\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    #[arg(short, long, action = clap::ArgAction::Count)]\n    verbose: u8,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"verbose: {:?}\", cli.verbose);\n}\n```\n```console\n$ 03_01_flag_count_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_01_flag_count_derive[EXE] [OPTIONS]\n\nOptions:\n  -v, --verbose...  \n  -h, --help        Print help\n  -V, --version     Print version\n\n$ 03_01_flag_count_derive\nverbose: 0\n\n$ 03_01_flag_count_derive --verbose\nverbose: 1\n\n$ 03_01_flag_count_derive --verbose --verbose\nverbose: 2\n\n```\n\nThis also shows that any[`Arg`][crate::Args] method may be used as an attribute.\n\n### Optional\n\nBy default, arguments are assumed to be [`required`][crate::Arg::required].\nTo make an argument optional, wrap the field's type in `Option`:\n```rust\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    name: Option<String>,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"name: {:?}\", cli.name);\n}\n```\n```console\n$ 03_06_optional_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_06_optional_derive[EXE] [NAME]\n\nArguments:\n  [NAME]  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_06_optional_derive\nname: None\n\n$ 03_06_optional_derive bob\nname: Some(\"bob\")\n\n```\n\n### Defaults\n\nWe've previously showed that arguments can be [`required`][crate::Arg::required] or optional.\nWhen optional, you work with a `Option` and can `unwrap_or`.  Alternatively, you can\nset [`#[arg(default_value_t)]`][super#arg-attributes].\n\n```rust\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    #[arg(default_value_t = 2020)]\n    port: u16,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"port: {:?}\", cli.port);\n}\n```\n```console\n$ 03_05_default_values_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_05_default_values_derive[EXE] [PORT]\n\nArguments:\n  [PORT]  [default: 2020]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_05_default_values_derive\nport: 2020\n\n$ 03_05_default_values_derive 22\nport: 22\n\n```\n\n### Subcommands\n\nSubcommands are derived with `#[derive(Subcommand)]` and be added via\n[`#[command(subcommand)]` attribute][super#command-attributes] on the field using that type.\nEach instance of a [Subcommand][crate::Subcommand] can have its own version, author(s), Args,\nand even its own subcommands.\n\n```rust\nuse clap::{Parser, Subcommand};\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\n#[command(propagate_version = true)]\nstruct Cli {\n    #[command(subcommand)]\n    command: Commands,\n}\n\n#[derive(Subcommand)]\nenum Commands {\n    /// Adds files to myapp\n    Add { name: Option<String> },\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    // You can check for the existence of subcommands, and if found use their\n    // matches just as you would the top level cmd\n    match &cli.command {\n        Commands::Add { name } => {\n            println!(\"'myapp add' was used, name is: {name:?}\");\n        }\n    }\n}\n```\nWe used a struct-variant to define the `add` subcommand.\nAlternatively, you can use a struct for your subcommand's arguments:\n```rust\nuse clap::{Args, Parser, Subcommand};\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\n#[command(propagate_version = true)]\nstruct Cli {\n    #[command(subcommand)]\n    command: Commands,\n}\n\n#[derive(Subcommand)]\nenum Commands {\n    /// Adds files to myapp\n    Add(AddArgs),\n}\n\n#[derive(Args)]\nstruct AddArgs {\n    name: Option<String>,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    // You can check for the existence of subcommands, and if found use their\n    // matches just as you would the top level cmd\n    match &cli.command {\n        Commands::Add(name) => {\n            println!(\"'myapp add' was used, name is: {:?}\", name.name);\n        }\n    }\n}\n```\n\n```console\n$ 03_04_subcommands_derive help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_04_subcommands_derive[EXE] <COMMAND>\n\nCommands:\n  add   Adds files to myapp\n  help  Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_04_subcommands_derive help add\nAdds files to myapp\n\nUsage: 03_04_subcommands_derive[EXE] add [NAME]\n\nArguments:\n  [NAME]  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_04_subcommands_derive add bob\n'myapp add' was used, name is: Some(\"bob\")\n\n```\n\nWhen specifying commands with `command: Commands`, they are [required][crate::Command::subcommand_required].\nBy default, a missing subcommand will [show help rather than error][crate::Command::arg_required_else_help].\n```console\n$ 03_04_subcommands_derive\n? failed\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_04_subcommands_derive[EXE] <COMMAND>\n\nCommands:\n  add   Adds files to myapp\n  help  Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n```\nTo make a subcommand optional, wrap it in an `Option` (e.g. `command: Option<Commands>`).\n\nSince we specified [`#[command(propagate_version = true)]`][crate::Command::propagate_version],\nthe `--version` flag is available in all subcommands:\n```console\n$ 03_04_subcommands_derive --version\nclap [..]\n\n$ 03_04_subcommands_derive add --version\nclap-add [..]\n\n```\n\n## Validation\n\n1. [Enumerated values](#enumerated-values)\n2. [Validated values](#validated-values)\n3. [Argument Relations](#argument-relations)\n4. [Custom Validation](#custom-validation)\n\nAn appropriate default parser/validator will be selected for the field's type.  See\n[`value_parser!`][crate::value_parser!] for more details.\n\n### Enumerated values\n\nFor example, if you have arguments of specific values you want to test for, you can derive\n[`ValueEnum`][super#valueenum-attributes]\n(any [`PossibleValue`] builder function can be used as a `#[value]` attribute on enum variants).\n\nThis allows you specify the valid values for that argument. If the user does not use one of\nthose specific values, they will receive a graceful exit with error message informing them\nof the mistake, and what the possible valid values are\n\n```rust\nuse clap::{Parser, ValueEnum};\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    /// What mode to run the program in\n    #[arg(value_enum)]\n    mode: Mode,\n}\n\n#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum)]\nenum Mode {\n    /// Run swiftly\n    Fast,\n    /// Crawl slowly but steadily\n    ///\n    /// This paragraph is ignored because there is no long help text for possible values.\n    Slow,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    match cli.mode {\n        Mode::Fast => {\n            println!(\"Hare\");\n        }\n        Mode::Slow => {\n            println!(\"Tortoise\");\n        }\n    }\n}\n```\n```console\n$ 04_01_enum_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_01_enum_derive[EXE] <MODE>\n\nArguments:\n  <MODE>\n          What mode to run the program in\n\n          Possible values:\n          - fast: Run swiftly\n          - slow: Crawl slowly but steadily\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n\n$ 04_01_enum_derive -h\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_01_enum_derive[EXE] <MODE>\n\nArguments:\n  <MODE>  What mode to run the program in [possible values: fast, slow]\n\nOptions:\n  -h, --help     Print help (see more with '--help')\n  -V, --version  Print version\n\n$ 04_01_enum_derive fast\nHare\n\n$ 04_01_enum_derive slow\nTortoise\n\n$ 04_01_enum_derive medium\n? failed\nerror: invalid value 'medium' for '<MODE>'\n  [possible values: fast, slow]\n\nFor more information, try '--help'.\n\n```\n\n### Validated values\n\nMore generally, you can validate and parse into any data type with [`Arg::value_parser`].\n\n```rust\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    /// Network port to use\n    #[arg(value_parser = clap::value_parser!(u16).range(1..))]\n    port: u16,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"PORT = {}\", cli.port);\n}\n```\n```console\n$ 04_02_parse_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_02_parse_derive[EXE] <PORT>\n\nArguments:\n  <PORT>  Network port to use\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 04_02_parse_derive 22\nPORT = 22\n\n$ 04_02_parse_derive foobar\n? failed\nerror: invalid value 'foobar' for '<PORT>': invalid digit found in string\n\nFor more information, try '--help'.\n\n$ 04_02_parse_derive 0\n? failed\nerror: invalid value '0' for '<PORT>': 0 is not in 1..=65535\n\nFor more information, try '--help'.\n\n```\n\nA [custom parser][TypedValueParser] can be used to improve the error messages or provide additional validation:\n\n```rust\nuse std::ops::RangeInclusive;\n\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    /// Network port to use\n    #[arg(value_parser = port_in_range)]\n    port: u16,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"PORT = {}\", cli.port);\n}\n\nconst PORT_RANGE: RangeInclusive<usize> = 1..=65535;\n\nfn port_in_range(s: &str) -> Result<u16, String> {\n    let port: usize = s\n        .parse()\n        .map_err(|_| format!(\"`{s}` isn't a port number\"))?;\n    if PORT_RANGE.contains(&port) {\n        Ok(port as u16)\n    } else {\n        Err(format!(\n            \"port not in range {}-{}\",\n            PORT_RANGE.start(),\n            PORT_RANGE.end()\n        ))\n    }\n}\n```\n```console\n$ 04_02_validate_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_02_validate_derive[EXE] <PORT>\n\nArguments:\n  <PORT>  Network port to use\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 04_02_validate_derive 22\nPORT = 22\n\n$ 04_02_validate_derive foobar\n? failed\nerror: invalid value 'foobar' for '<PORT>': `foobar` isn't a port number\n\nFor more information, try '--help'.\n\n$ 04_02_validate_derive 0\n? failed\nerror: invalid value '0' for '<PORT>': port not in range 1-65535\n\nFor more information, try '--help'.\n\n```\n\nSee [`Arg::value_parser`][crate::Arg::value_parser] for more details.\n\n### Argument Relations\n\nYou can declare dependencies or conflicts between [`Arg`][crate::Arg]s or even\n[`ArgGroup`][crate::ArgGroup]s.\n\n[`ArgGroup`][crate::ArgGroup]s  make it easier to declare relations instead of having to list\neach individually, or when you want a rule to apply \"any but not all\" arguments.\n\nPerhaps the most common use of [`ArgGroup`][crate::ArgGroup]s is to require one and *only* one\nargument to be present out of a given set. Imagine that you had multiple arguments, and you\nwant one of them to be required, but making all of them required isn't feasible because perhaps\nthey conflict with each other.\n\n[`ArgGroup`][crate::ArgGroup]s are automatically created for a `struct` with its\n[`ArgGroup::id`][crate::ArgGroup::id] being the struct's name.\n\n```rust\nuse clap::{Args, Parser};\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    #[command(flatten)]\n    vers: Vers,\n\n    /// some regular input\n    #[arg(group = \"input\")]\n    input_file: Option<String>,\n\n    /// some special input argument\n    #[arg(long, group = \"input\")]\n    spec_in: Option<String>,\n\n    #[arg(short, requires = \"input\")]\n    config: Option<String>,\n}\n\n#[derive(Args)]\n#[group(required = true, multiple = false)]\nstruct Vers {\n    /// set version manually\n    #[arg(long, value_name = \"VER\")]\n    set_ver: Option<String>,\n\n    /// auto inc major\n    #[arg(long)]\n    major: bool,\n\n    /// auto inc minor\n    #[arg(long)]\n    minor: bool,\n\n    /// auto inc patch\n    #[arg(long)]\n    patch: bool,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    // Let's assume the old version 1.2.3\n    let mut major = 1;\n    let mut minor = 2;\n    let mut patch = 3;\n\n    // See if --set_ver was used to set the version manually\n    let vers = &cli.vers;\n    let version = if let Some(ver) = vers.set_ver.as_deref() {\n        ver.to_string()\n    } else {\n        // Increment the one requested (in a real program, we'd reset the lower numbers)\n        let (maj, min, pat) = (vers.major, vers.minor, vers.patch);\n        match (maj, min, pat) {\n            (true, _, _) => major += 1,\n            (_, true, _) => minor += 1,\n            (_, _, true) => patch += 1,\n            _ => unreachable!(),\n        };\n        format!(\"{major}.{minor}.{patch}\")\n    };\n\n    println!(\"Version: {version}\");\n\n    // Check for usage of -c\n    if let Some(config) = cli.config.as_deref() {\n        let input = cli\n            .input_file\n            .as_deref()\n            .unwrap_or_else(|| cli.spec_in.as_deref().unwrap());\n        println!(\"Doing work using input {input} and config {config}\");\n    }\n}\n```\n```console\n$ 04_03_relations_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_03_relations_derive[EXE] [OPTIONS] <--set-ver <VER>|--major|--minor|--patch> [INPUT_FILE]\n\nArguments:\n  [INPUT_FILE]  some regular input\n\nOptions:\n      --set-ver <VER>      set version manually\n      --major              auto inc major\n      --minor              auto inc minor\n      --patch              auto inc patch\n      --spec-in <SPEC_IN>  some special input argument\n  -c <CONFIG>              \n  -h, --help               Print help\n  -V, --version            Print version\n\n$ 04_03_relations_derive\n? failed\nerror: the following required arguments were not provided:\n  <--set-ver <VER>|--major|--minor|--patch>\n\nUsage: 04_03_relations_derive[EXE] <--set-ver <VER>|--major|--minor|--patch> [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_03_relations_derive --major\nVersion: 2.2.3\n\n$ 04_03_relations_derive --major --minor\n? failed\nerror: the argument '--major' cannot be used with '--minor'\n\nUsage: 04_03_relations_derive[EXE] <--set-ver <VER>|--major|--minor|--patch> [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_03_relations_derive --major -c config.toml\n? failed\nerror: the following required arguments were not provided:\n  <INPUT_FILE|--spec-in <SPEC_IN>>\n\nUsage: 04_03_relations_derive[EXE] -c <CONFIG> <--set-ver <VER>|--major|--minor|--patch> <INPUT_FILE|--spec-in <SPEC_IN>>\n\nFor more information, try '--help'.\n\n$ 04_03_relations_derive --major -c config.toml --spec-in input.txt\nVersion: 2.2.3\nDoing work using input input.txt and config config.toml\n\n```\n\n### Custom Validation\n\nAs a last resort, you can create custom errors with the basics of clap's formatting.\n\n```rust\nuse clap::error::ErrorKind;\nuse clap::{CommandFactory, Parser};\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    /// set version manually\n    #[arg(long, value_name = \"VER\")]\n    set_ver: Option<String>,\n\n    /// auto inc major\n    #[arg(long)]\n    major: bool,\n\n    /// auto inc minor\n    #[arg(long)]\n    minor: bool,\n\n    /// auto inc patch\n    #[arg(long)]\n    patch: bool,\n\n    /// some regular input\n    input_file: Option<String>,\n\n    /// some special input argument\n    #[arg(long)]\n    spec_in: Option<String>,\n\n    #[arg(short)]\n    config: Option<String>,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    // Let's assume the old version 1.2.3\n    let mut major = 1;\n    let mut minor = 2;\n    let mut patch = 3;\n\n    // See if --set-ver was used to set the version manually\n    let version = if let Some(ver) = cli.set_ver.as_deref() {\n        if cli.major || cli.minor || cli.patch {\n            let mut cmd = Cli::command();\n            cmd.error(\n                ErrorKind::ArgumentConflict,\n                \"Can't do relative and absolute version change\",\n            )\n            .exit();\n        }\n        ver.to_string()\n    } else {\n        // Increment the one requested (in a real program, we'd reset the lower numbers)\n        let (maj, min, pat) = (cli.major, cli.minor, cli.patch);\n        match (maj, min, pat) {\n            (true, false, false) => major += 1,\n            (false, true, false) => minor += 1,\n            (false, false, true) => patch += 1,\n            _ => {\n                let mut cmd = Cli::command();\n                cmd.error(\n                    ErrorKind::ArgumentConflict,\n                    \"Can only modify one version field\",\n                )\n                .exit();\n            }\n        };\n        format!(\"{major}.{minor}.{patch}\")\n    };\n\n    println!(\"Version: {version}\");\n\n    // Check for usage of -c\n    if let Some(config) = cli.config.as_deref() {\n        let input = cli\n            .input_file\n            .as_deref()\n            // 'or' is preferred to 'or_else' here since `Option::as_deref` is 'const'\n            .or(cli.spec_in.as_deref())\n            .unwrap_or_else(|| {\n                let mut cmd = Cli::command();\n                cmd.error(\n                    ErrorKind::MissingRequiredArgument,\n                    \"INPUT_FILE or --spec-in is required when using --config\",\n                )\n                .exit()\n            });\n        println!(\"Doing work using input {input} and config {config}\");\n    }\n}\n```\n```console\n$ 04_04_custom_derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_04_custom_derive[EXE] [OPTIONS] [INPUT_FILE]\n\nArguments:\n  [INPUT_FILE]  some regular input\n\nOptions:\n      --set-ver <VER>      set version manually\n      --major              auto inc major\n      --minor              auto inc minor\n      --patch              auto inc patch\n      --spec-in <SPEC_IN>  some special input argument\n  -c <CONFIG>              \n  -h, --help               Print help\n  -V, --version            Print version\n\n$ 04_04_custom_derive\n? failed\nerror: Can only modify one version field\n\nUsage: clap [OPTIONS] [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_04_custom_derive --major\nVersion: 2.2.3\n\n$ 04_04_custom_derive --major --minor\n? failed\nerror: Can only modify one version field\n\nUsage: clap [OPTIONS] [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_04_custom_derive --major -c config.toml\n? failed\nVersion: 2.2.3\nerror: INPUT_FILE or --spec-in is required when using --config\n\nUsage: clap [OPTIONS] [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_04_custom_derive --major -c config.toml --spec-in input.txt\nVersion: 2.2.3\nDoing work using input input.txt and config config.toml\n\n```\n\n## Testing\n\nclap reports most development errors as `debug_assert!`s.  Rather than checking every\nsubcommand, you should have a test that calls\n[`Command::debug_assert`][crate::Command::debug_assert]:\n```rust,no_run\nuse clap::Parser;\n\n#[derive(Parser)]\n#[command(version, about, long_about = None)]\nstruct Cli {\n    /// Network port to use\n    port: u16,\n}\n\nfn main() {\n    let cli = Cli::parse();\n\n    println!(\"PORT = {}\", cli.port);\n}\n\n#[test]\nfn verify_cli() {\n    use clap::CommandFactory;\n    Cli::command().debug_assert();\n}\n```\n\n## Next Steps\n\n- [Cookbook][crate::_cookbook] for application-focused examples\n- Explore more features in the [Derive reference][super]\n  - See also [`Command`], [`Arg`], [`ArgGroup`], and [`PossibleValue`] builder functions which\n    can be used as attributes\n\nFor support, see [Discussions](https://github.com/clap-rs/clap/discussions)","links":{"crate::Arg":38,"super":20,"crate::ArgGroup":39,"crate::Arg::value_parser":36,"`Arg::value_parser`":36,"crate::value_parser!":34,"crate::Command::propagate_version":33,"Arg::action":23,"crate::Arg::required":29,"TypedValueParser":37,"`PossibleValue`":35,"crate::Command":21,"`Command::next_line_help`":22,"Arg::short":25,"Arg::long":26,"super#arg-attributes":20,"crate::_cookbook":17,"crate::_features":2,"`Command`":21,"super#command-attributes":20,"super#arg-types":20,"crate::_faq#when-should-i-use-the-builder-vs-derive-apis":18,"crate::ArgAction::Append":24,"super#valueenum-attributes":20,"crate::ArgAction::Count":27,"crate::Parser":19,"`Arg`":38,"crate::ArgGroup::id":40,"crate::Command::arg_required_else_help":32,"crate::Args":28,"crate::Subcommand":30,"`ArgGroup`":39,"crate::Command::subcommand_required":31,"crate::Command::debug_assert":41},"attrs":["#[allow(unused_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"20":{"id":20,"crate_id":0,"name":"_derive","span":{"filename":"src/_derive/mod.rs","begin":[1,1],"end":[542,26]},"visibility":"public","docs":"# Documentation: Derive Reference\n\n1. [Overview](#overview)\n2. [Attributes](#attributes)\n    1. [Terminology](#terminology)\n    2. [Command Attributes](#command-attributes)\n    2. [ArgGroup Attributes](#arggroup-attributes)\n    3. [Arg Attributes](#arg-attributes)\n    4. [ValueEnum Attributes](#valueenum-attributes)\n    5. [Possible Value Attributes](#possible-value-attributes)\n3. [Field Types](#field-types)\n4. [Doc Comments](#doc-comments)\n5. [Mixing Builder and Derive APIs](#mixing-builder-and-derive-apis)\n6. [Tips](#tips)\n\n## Overview\n\nTo derive `clap` types, you need to enable the [`derive` feature flag][crate::_features].\n\nExample:\n```rust\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name);\n    }\n}\n```\n\nLet's start by breaking down the anatomy of the derive attributes:\n```rust\nuse clap::{Parser, Args, Subcommand, ValueEnum};\n\n/// Doc comment\n#[derive(Parser)]\n#[command(CMD ATTRIBUTE)]\n#[group(GROUP ATTRIBUTE)]\nstruct Cli {\n    /// Doc comment\n    #[arg(ARG ATTRIBUTE)]\n    field: UserType,\n\n    #[arg(value_enum, ARG ATTRIBUTE...)]\n    field: EnumValues,\n\n    #[command(flatten)]\n    delegate: Struct,\n\n    #[command(subcommand)]\n    command: Command,\n}\n\n/// Doc comment\n#[derive(Args)]\n#[command(PARENT CMD ATTRIBUTE)]\n#[group(GROUP ATTRIBUTE)]\nstruct Struct {\n    /// Doc comment\n    #[command(ARG ATTRIBUTE)]\n    field: UserType,\n}\n\n/// Doc comment\n#[derive(Subcommand)]\n#[command(PARENT CMD ATTRIBUTE)]\nenum Command {\n    /// Doc comment\n    #[command(CMD ATTRIBUTE)]\n    Variant1(Struct),\n\n    /// Doc comment\n    #[command(CMD ATTRIBUTE)]\n    Variant2 {\n        /// Doc comment\n        #[arg(ARG ATTRIBUTE)]\n        field: UserType,\n    }\n}\n\n/// Doc comment\n#[derive(ValueEnum)]\n#[value(VALUE ENUM ATTRIBUTE)]\nenum EnumValues {\n    /// Doc comment\n    #[value(POSSIBLE VALUE ATTRIBUTE)]\n    Variant1,\n}\n\nfn main() {\n    let cli = Cli::parse();\n}\n```\n\nTraits:\n- [`Parser`][crate::Parser] parses arguments into a `struct` (arguments) or `enum` (subcommands).\n  - [`Args`][crate::Args] allows defining a set of re-usable arguments that get merged into their parent container.\n  - [`Subcommand`][crate::Subcommand] defines available subcommands.\n  - Subcommand arguments can be defined in a struct-variant or automatically flattened with a tuple-variant.\n- [`ValueEnum`][crate::ValueEnum] allows parsing a value directly into an `enum`, erroring on unsupported values.\n  - The derive doesn't work on enums that contain non-unit variants, unless they are skipped\n\n*See also the [derive tutorial][crate::_derive::_tutorial] and [cookbook][crate::_cookbook]*\n\n## Attributes\n\n### Terminology\n\n**Raw attributes** are forwarded directly to the underlying [`clap` builder][crate::builder].  Any\n[`Command`][crate::Command], [`Arg`][crate::Arg], or [`PossibleValue`][crate::builder::PossibleValue] method can be used as an attribute.\n\nRaw attributes come in two different syntaxes:\n```rust,ignore\n#[arg(\n    global = true, // name = arg form, neat for one-arg methods\n    required_if_eq(\"out\", \"file\") // name(arg1, arg2, ...) form.\n)]\n```\n\n- `method = arg` can only be used for methods which take only one argument.\n- `method(arg1, arg2)` can be used with any method.\n\nAs long as `method_name` is not one of the magical methods it will be\ntranslated into a mere method call.\n\n**Magic attributes** have post-processing done to them, whether that is\n- Providing of defaults\n- Special behavior is triggered off of it\n\nMagic attributes are more constrained in the syntax they support, usually just\n`<attr> = <value>` though some use `<attr>(<value>)` instead.  See the specific\nmagic attributes documentation for details.  This allows users to access the\nraw behavior of an attribute via `<attr>(<value>)` syntax.\n\n<div class=\"warning\">\n\n**NOTE:** Some attributes are inferred from [Arg Types](#arg-types) and [Doc\nComments](#doc-comments).  Explicit attributes take precedence over inferred\nattributes.\n\n</div>\n\n### Command Attributes\n\nThese correspond to a [`Command`][crate::Command] which is used for both top-level parsers and\nwhen defining subcommands.\n\n**Raw attributes:**  Any [`Command` method][crate::Command] can also be used as an attribute,\nsee [Terminology](#terminology) for syntax.\n- e.g. `#[command(arg_required_else_help(true))]` would translate to `cmd.arg_required_else_help(true)`\n\n**Magic attributes:**\n- `name  = <expr>`: [`Command::name`][crate::Command::name]\n  - When not present: [package `name`](https://doc.rust-lang.org/cargo/reference/manifest.html#the-name-field) (if on [`Parser`][crate::Parser] container), variant name (if on [`Subcommand`][crate::Subcommand] variant)\n- `version [= <expr>]`: [`Command::version`][crate::Command::version]\n  - When not present: no version set\n  - Without `<expr>`: defaults to [crate `version`](https://doc.rust-lang.org/cargo/reference/manifest.html#the-version-field)\n- `author [= <expr>]`: [`Command::author`][crate::Command::author]\n  - When not present: no author set\n  - Without `<expr>`: defaults to [crate `authors`](https://doc.rust-lang.org/cargo/reference/manifest.html#the-authors-field)\n  - **NOTE:** A custom [`help_template`][crate::Command::help_template] is needed for author to show up.\n- `about [= <expr>]`: [`Command::about`][crate::Command::about]\n  - When not present: [Doc comment summary](#doc-comments)\n  - Without `<expr>`: [crate `description`](https://doc.rust-lang.org/cargo/reference/manifest.html#the-description-field) ([`Parser`][crate::Parser] container)\n    - **TIP:** When a doc comment is also present, you most likely want to add\n      `#[arg(long_about = None)]` to clear the doc comment so only [`about`][crate::Command::about]\n      gets shown with both `-h` and `--help`.\n- `long_about[ = <expr>]`: [`Command::long_about`][crate::Command::long_about]\n  - When not present: [Doc comment](#doc-comments) if there is a blank line, else nothing\n  - When present without a value: [Doc comment](#doc-comments)\n- `verbatim_doc_comment`: Minimizes pre-processing when converting doc comments to [`about`][crate::Command::about] / [`long_about`][crate::Command::long_about]\n- `next_display_order`: [`Command::next_display_order`][crate::Command::next_display_order]\n- `next_help_heading`: [`Command::next_help_heading`][crate::Command::next_help_heading]\n  - When `flatten`ing [`Args`][crate::Args], this is scoped to just the args in this struct and any struct `flatten`ed into it\n- `rename_all = <string_literal>`: Override default field / variant name case conversion for [`Command::name`][crate::Command::name] / [`Arg::id`][crate::Arg::id]\n  - When not present: `\"kebab-case\"`\n  - Available values: `\"camelCase\"`, `\"kebab-case\"`, `\"PascalCase\"`, `\"SCREAMING_SNAKE_CASE\"`, `\"snake_case\"`, `\"lower\"`, `\"UPPER\"`, `\"verbatim\"`\n- `rename_all_env = <string_literal>`: Override default field name case conversion for env variables for  [`Arg::env`][crate::Arg::env]\n  - When not present: `\"SCREAMING_SNAKE_CASE\"`\n  - Available values: `\"camelCase\"`, `\"kebab-case\"`, `\"PascalCase\"`, `\"SCREAMING_SNAKE_CASE\"`, `\"snake_case\"`, `\"lower\"`, `\"UPPER\"`, `\"verbatim\"`\n\nAnd for [`Subcommand`][crate::Subcommand] variants:\n- `skip`: Ignore this variant\n- `flatten`: Delegates to the variant for more subcommands (must implement\n  [`Subcommand`][crate::Subcommand])\n- `subcommand`: Nest subcommands under the current set of subcommands (must implement\n  [`Subcommand`][crate::Subcommand])\n- `external_subcommand`: [`Command::allow_external_subcommand(true)`][crate::Command::allow_external_subcommands]\n  - Variant must be either `Variant(Vec<String>)` or `Variant(Vec<OsString>)`\n\nAnd for [`Args`][crate::Args] fields:\n- `flatten`: Delegates to the field for more arguments (must implement [`Args`][crate::Args])\n  - Only [`next_help_heading`][crate::Command::next_help_heading] can be used with `flatten`.  See\n    [clap-rs/clap#3269](https://github.com/clap-rs/clap/issues/3269) for why\n    arg attributes are not generally supported.\n  - **Tip:** Though we do apply a flattened [`Args`][crate::Args]'s Parent Command Attributes, this\n    makes reuse harder. Generally prefer putting the cmd attributes on the\n    [`Parser`][crate::Parser] or on the flattened field.\n- `subcommand`: Delegates definition of subcommands to the field (must implement\n  [`Subcommand`][crate::Subcommand])\n  - When `Option<T>`, the subcommand becomes optional\n\nSee [Configuring the Parser][_tutorial#configuring-the-parser] and\n[Subcommands][_tutorial#subcommands] from the tutorial.\n\n### ArgGroup Attributes\n\nThese correspond to the [`ArgGroup`][crate::ArgGroup] which is implicitly created for each\n`Args` derive.\n\n**Raw attributes:**  Any [`ArgGroup` method][crate::ArgGroup] can also be used as an attribute, see [Terminology](#terminology) for syntax.\n- e.g. `#[group(required = true)]` would translate to `arg_group.required(true)`\n\n**Magic attributes**:\n- `id = <expr>`: [`ArgGroup::id`][crate::ArgGroup::id]\n  - When not present: struct's name is used\n- `skip [= <expr>]`: Ignore this field, filling in with `<expr>`\n  - Without `<expr>`: fills the field with `Default::default()`\n\nNote:\n- For `struct`s, [`multiple = true`][crate::ArgGroup::multiple] is implied\n- `enum` support is tracked at [#2621](https://github.com/clap-rs/clap/issues/2621)\n\nSee [Argument Relations][_tutorial#argument-relations] from the tutorial.\n\n### Arg Attributes\n\nThese correspond to a [`Arg`][crate::Arg].\nThe default state for a field without attributes is to be a positional argument with [behavior\ninferred from the field type](#arg-types).\n`#[arg(...)]` attributes allow overriding or extending those defaults.\n\n**Raw attributes:**  Any [`Arg` method][crate::Arg] can also be used as an attribute, see [Terminology](#terminology) for syntax.\n- e.g. `#[arg(num_args(..=3))]` would translate to `arg.num_args(..=3)`\n\n**Magic attributes**:\n- `id = <expr>`: [`Arg::id`][crate::Arg::id]\n  - When not present: field's name is used\n- `value_parser [= <expr>]`: [`Arg::value_parser`][crate::Arg::value_parser]\n  - When not present: will auto-select an implementation based on the field type using\n    [`value_parser!`][crate::value_parser!]\n- `action [= <expr>]`: [`Arg::action`][crate::Arg::action]\n  - When not present: will auto-select an action based on the field type\n- `help = <expr>`: [`Arg::help`][crate::Arg::help]\n  - When not present: [Doc comment summary](#doc-comments)\n- `long_help[ = <expr>]`: [`Arg::long_help`][crate::Arg::long_help]\n  - When not present: [Doc comment](#doc-comments) if there is a blank line, else nothing\n  - When present without a value: [Doc comment](#doc-comments)\n- `verbatim_doc_comment`: Minimizes pre-processing when converting doc comments to [`help`][crate::Arg::help] / [`long_help`][crate::Arg::long_help]\n- `short [= <char>]`: [`Arg::short`][crate::Arg::short]\n  - When not present: no short set\n  - Without `<char>`: defaults to first character in the case-converted field name\n- `long [= <str>]`: [`Arg::long`][crate::Arg::long]\n  - When not present: no long set\n  - Without `<str>`: defaults to the case-converted field name\n- `env [= <str>]`: [`Arg::env`][crate::Arg::env] (needs [`env` feature][crate::_features] enabled)\n  - When not present: no env set\n  - Without `<str>`: defaults to the case-converted field name\n- `from_global`: Read a [`Arg::global`][crate::Arg::global] argument (raw attribute), regardless of what subcommand you are in\n- `value_enum`: Parse the value using the [`ValueEnum`][crate::ValueEnum]\n- `skip [= <expr>]`: Ignore this field, filling in with `<expr>`\n  - Without `<expr>`: fills the field with `Default::default()`\n- `default_value = <str>`: [`Arg::default_value`][crate::Arg::default_value] and [`Arg::required(false)`][crate::Arg::required]\n- `default_value_t [= <expr>]`: [`Arg::default_value`][crate::Arg::default_value] and [`Arg::required(false)`][crate::Arg::required]\n  - Requires `std::fmt::Display` that roundtrips correctly with the\n    [`Arg::value_parser`][crate::Arg::value_parser] or `#[arg(value_enum)]`\n  - Without `<expr>`, relies on `Default::default()`\n- `default_values_t = <expr>`: [`Arg::default_values`][crate::Arg::default_values] and [`Arg::required(false)`][crate::Arg::required]\n  - Requires field arg to be of type `Vec<T>` and `T` to implement `std::fmt::Display` or `#[arg(value_enum)]`\n  - `<expr>` must implement `IntoIterator<T>`\n- `default_value_os_t [= <expr>]`: [`Arg::default_value_os`][crate::Arg::default_value_os] and [`Arg::required(false)`][crate::Arg::required]\n  - Requires `std::convert::Into<OsString>` or `#[arg(value_enum)]`\n  - Without `<expr>`, relies on `Default::default()`\n- `default_values_os_t = <expr>`: [`Arg::default_values_os`][crate::Arg::default_values_os] and [`Arg::required(false)`][crate::Arg::required]\n  - Requires field arg to be of type `Vec<T>` and `T` to implement `std::convert::Into<OsString>` or `#[arg(value_enum)]`\n  - `<expr>` must implement `IntoIterator<T>`\n\nSee [Adding Arguments][_tutorial#adding-arguments] and [Validation][_tutorial#validation] from the\ntutorial.\n\n### ValueEnum Attributes\n\n- `rename_all = <string_literal>`: Override default field / variant name case conversion for [`PossibleValue::new`][crate::builder::PossibleValue]\n  - When not present: `\"kebab-case\"`\n  - Available values: `\"camelCase\"`, `\"kebab-case\"`, `\"PascalCase\"`, `\"SCREAMING_SNAKE_CASE\"`, `\"snake_case\"`, `\"lower\"`, `\"UPPER\"`, `\"verbatim\"`\n\nSee [Enumerated values][_tutorial#enumerated-values] from the tutorial.\n\n### Possible Value Attributes\n\nThese correspond to a [`PossibleValue`][crate::builder::PossibleValue].\n\n**Raw attributes:**  Any [`PossibleValue` method][crate::builder::PossibleValue] can also be used as an attribute, see [Terminology](#terminology) for syntax.\n- e.g. `#[value(alias(\"foo\"))]` would translate to `pv.alias(\"foo\")`\n\n**Magic attributes**:\n- `name = <expr>`: [`PossibleValue::new`][crate::builder::PossibleValue::new]\n  - When not present: case-converted field name is used\n- `help = <expr>`: [`PossibleValue::help`][crate::builder::PossibleValue::help]\n  - When not present: [Doc comment summary](#doc-comments)\n- `skip`: Ignore this variant\n\n## Field Types\n\n`clap` assumes some intent based on the type used.\n\n### Subcommand Types\n\n| Type                  | Effect              | Implies                                                   |\n|-----------------------|---------------------|-----------------------------------------------------------|\n| `Option<T>`           | optional subcommand |                                                           |\n| `T`                   | required subcommand | `.subcommand_required(true).arg_required_else_help(true)` |\n\n### Arg Types\n\n| Type                  | Effect                                               | Implies                                                     | Notes |\n|-----------------------|------------------------------------------------------|-------------------------------------------------------------|-------|\n| `()`                  | user-defined                                         | `.action(ArgAction::Set).required(false)`                   |       |\n| `bool`                | flag                                                 | `.action(ArgAction::SetTrue)`                               |       |\n| `Option<T>`           | optional argument                                    | `.action(ArgAction::Set).required(false)`                   |       |\n| `Option<Option<T>>`   | optional value for optional argument                 | `.action(ArgAction::Set).required(false).num_args(0..=1)`   |       |\n| `T`                   | required argument                                    | `.action(ArgAction::Set).required(!has_default)`            |       |\n| `Vec<T>`              | `0..` occurrences of argument                        | `.action(ArgAction::Append).required(false)`  |       |\n| `Option<Vec<T>>`      | `0..` occurrences of argument                        | `.action(ArgAction::Append).required(false)`  |       |\n| `Vec<Vec<T>>`         | `0..` occurrences of argument, grouped by occurrence | `.action(ArgAction::Append).required(false)`  | requires `unstable-v5` |\n| `Option<Vec<Vec<T>>>` | `0..` occurrences of argument, grouped by occurrence | `.action(ArgAction::Append).required(false)`  | requires `unstable-v5` |\n\nIn addition, [`.value_parser(value_parser!(T))`][crate::value_parser!] is called for each\nfield.\n\nNotes:\n- For custom type behavior, you can override the implied attributes/settings and/or set additional ones\n  - To force any inferred type (like `Vec<T>`) to be treated as `T`, you can refer to the type\n    by another means, like using `std::vec::Vec` instead of `Vec`.  For improving this, see\n    [#4626](https://github.com/clap-rs/clap/issues/4626).\n- `Option<Vec<T>>` and `Option<Vec<Vec<T>>` will be `None` instead of `vec![]` if no arguments are provided.\n  - This gives the user some flexibility in designing their argument, like with `num_args(0..)`\n- `Vec<Vec<T>>` will need [`Arg::num_args`][crate::Arg::num_args] set to be meaningful\n\n## Doc Comments\n\nIn clap, help messages for the whole binary can be specified\nvia [`Command::about`][crate::Command::about] and [`Command::long_about`][crate::Command::long_about] while help messages\nfor individual arguments can be specified via [`Arg::help`][crate::Arg::help] and [`Arg::long_help`][crate::Arg::long_help].\n\n`long_*` variants are used when user calls the program with\n`--help` and \"short\" variants are used with `-h` flag.\n\n```rust\n# use clap::Parser;\n\n#[derive(Parser)]\n#[command(about = \"I am a program and I work, just pass `-h`\", long_about = None)]\nstruct Foo {\n    #[arg(short, help = \"Pass `-h` and you'll see me!\")]\n    bar: String,\n}\n```\n\nFor convenience, doc comments can be used instead of raw methods\n(this example works exactly like the one above):\n\n```rust\n# use clap::Parser;\n\n#[derive(Parser)]\n/// I am a program and I work, just pass `-h`\nstruct Foo {\n    /// Pass `-h` and you'll see me!\n    bar: String,\n}\n```\n\n<div class=\"warning\">\n\n**NOTE:** Attributes have priority over doc comments!\n\n**Top level doc comments always generate `Command::about/long_about` calls!**\nIf you really want to use the `Command::about/long_about` methods (you likely don't),\nuse the `about` / `long_about` attributes to override the calls generated from\nthe doc comment.  To clear `long_about`, you can use\n`#[command(long_about = None)]`.\n\n</div>\n\n### Pre-processing\n\n```rust\n# use clap::Parser;\n#[derive(Parser)]\n/// Hi there, I'm Robo!\n///\n/// I like beeping, stumbling, eating your electricity,\n/// and making records of you singing in a shower.\n/// Pay up, or I'll upload it to youtube!\nstruct Robo {\n    /// Call my brother SkyNet.\n    ///\n    /// I am artificial superintelligence. I won't rest\n    /// until I'll have destroyed humanity. Enjoy your\n    /// pathetic existence, you mere mortals.\n    #[arg(long, action)]\n    kill_all_humans: bool,\n}\n```\n\nA doc comment consists of three parts:\n- Short summary\n- A blank line (whitespace only)\n- Detailed description, all the rest\n\nThe summary corresponds with `Command::about` / `Arg::help`.  When a blank line is\npresent, the whole doc comment will be passed to `Command::long_about` /\n`Arg::long_help`.  Or in other words, a doc may result in just a `Command::about` /\n`Arg::help` or `Command::about` / `Arg::help` and `Command::long_about` /\n`Arg::long_help`\n\nIn addition, when `verbatim_doc_comment` is not present, `clap` applies some preprocessing, including:\n\n- Strip leading and trailing whitespace from every line, if present.\n\n- Strip leading and trailing blank lines, if present.\n\n- Interpret each group of non-empty lines as a word-wrapped paragraph.\n\n  We replace newlines within paragraphs with spaces to allow the output\n  to be re-wrapped to the terminal width.\n\n- Strip any excess blank lines so that there is exactly one per paragraph break.\n\n- If the first paragraph ends in exactly one period,\n  remove the trailing period (i.e. strip trailing periods but not trailing ellipses).\n\nSometimes you don't want this preprocessing to apply, for example the comment contains\nsome ASCII art or markdown tables, you would need to preserve LFs along with\nblank lines and the leading/trailing whitespace. When you pass use the\n`verbatim_doc_comment` magic attribute, you  preserve\nthem.\n\n**Note:** Keep in mind that `verbatim_doc_comment` will *still*\n- Remove one leading space from each line, even if this attribute is present,\n  to allow for a space between `///` and the content.\n- Remove leading and trailing blank lines\n\n## Mixing Builder and Derive APIs\n\nThe builder and derive APIs do not live in isolation. They can work together, which is\nespecially helpful if some arguments can be specified at compile-time while others must be\nspecified at runtime.\n\n### Using derived arguments in a builder application\n\nWhen using the derive API, you can `#[command(flatten)]` a struct deriving `Args` into a struct\nderiving `Args` or `Parser`. This example shows how you can augment a `Command` instance\ncreated using the builder API with `Args` created using the derive API.\n\nIt uses the [`Args::augment_args`][crate::Args::augment_args] method to add the arguments to\nthe `Command` instance.\n\nCrates such as [clap-verbosity-flag](https://github.com/rust-cli/clap-verbosity-flag) provide\nstructs that implement `Args`. Without the technique shown in this example, it would not be\npossible to use such crates with the builder API.\n\nFor example:\n```rust\nuse clap::{arg, Args, Command, FromArgMatches as _};\n\n#[derive(Args, Debug)]\nstruct DerivedArgs {\n    #[arg(short, long)]\n    derived: bool,\n}\n\nfn main() {\n    let cli = Command::new(\"CLI\").arg(arg!(-b - -built).action(clap::ArgAction::SetTrue));\n    // Augment built args with derived args\n    let cli = DerivedArgs::augment_args(cli);\n\n    let matches = cli.get_matches();\n    println!(\"Value of built: {:?}\", matches.get_flag(\"built\"));\n    println!(\n        \"Value of derived via ArgMatches: {:?}\",\n        matches.get_flag(\"derived\")\n    );\n\n    // Since DerivedArgs implements FromArgMatches, we can extract it from the unstructured ArgMatches.\n    // This is the main benefit of using derived arguments.\n    let derived_matches = DerivedArgs::from_arg_matches(&matches)\n        .map_err(|err| err.exit())\n        .unwrap();\n    println!(\"Value of derived: {derived_matches:#?}\");\n}\n```\n\n### Using derived subcommands in a builder application\n\nWhen using the derive API, you can use `#[command(subcommand)]` inside the struct to add\nsubcommands. The type of the field is usually an enum that derived `Parser`. However, you can\nalso add the subcommands in that enum to a `Command` instance created with the builder API.\n\nIt uses the [`Subcommand::augment_subcommands`][crate::Subcommand::augment_subcommands] method\nto add the subcommands to the `Command` instance.\n\nFor example:\n```rust\nuse clap::{Command, FromArgMatches as _, Parser, Subcommand as _};\n\n#[derive(Parser, Debug)]\nenum Subcommands {\n    Derived {\n        #[arg(short, long)]\n        derived_flag: bool,\n    },\n}\n\nfn main() {\n    let cli = Command::new(\"Built CLI\");\n    // Augment with derived subcommands\n    let cli = Subcommands::augment_subcommands(cli);\n\n    let matches = cli.get_matches();\n    let derived_subcommands = Subcommands::from_arg_matches(&matches)\n        .map_err(|err| err.exit())\n        .unwrap();\n    println!(\"Derived subcommands: {derived_subcommands:#?}\");\n}\n```\n\n### Adding hand-implemented subcommands to a derived application\n\nWhen using the derive API, you can use `#[command(subcommand)]` inside the struct to add\nsubcommands. The type of the field is usually an enum that derived `Parser`. However, you can\nalso implement the `Subcommand` trait manually on this enum (or any other type) and it can\nstill be used inside the struct created with the derive API. The implementation of the\n`Subcommand` trait will use the builder API to add the subcommands to the `Command` instance\ncreated behind the scenes for you by the derive API.\n\nNotice how in the previous example we used\n[`augment_subcommands`][crate::Subcommand::augment_subcommands] on an enum that derived\n`Parser`, whereas now we implement\n[`augment_subcommands`][crate::Subcommand::augment_subcommands] ourselves, but the derive API\ncalls it automatically since we used the `#[command(subcommand)]` attribute.\n\nFor example:\n```rust\n#![allow(dead_code)]\nuse clap::error::{Error, ErrorKind};\nuse clap::{ArgMatches, Args as _, Command, FromArgMatches, Parser, Subcommand};\n\n#[derive(Parser, Debug)]\nstruct AddArgs {\n    name: Vec<String>,\n}\n#[derive(Parser, Debug)]\nstruct RemoveArgs {\n    #[arg(short, long)]\n    force: bool,\n    name: Vec<String>,\n}\n\n#[derive(Debug)]\nenum CliSub {\n    Add(AddArgs),\n    Remove(RemoveArgs),\n}\n\nimpl FromArgMatches for CliSub {\n    fn from_arg_matches(matches: &ArgMatches) -> Result<Self, Error> {\n        match matches.subcommand() {\n            Some((\"add\", args)) => Ok(Self::Add(AddArgs::from_arg_matches(args)?)),\n            Some((\"remove\", args)) => Ok(Self::Remove(RemoveArgs::from_arg_matches(args)?)),\n            Some((_, _)) => Err(Error::raw(\n                ErrorKind::InvalidSubcommand,\n                \"Valid subcommands are `add` and `remove`\",\n            )),\n            None => Err(Error::raw(\n                ErrorKind::MissingSubcommand,\n                \"Valid subcommands are `add` and `remove`\",\n            )),\n        }\n    }\n    fn update_from_arg_matches(&mut self, matches: &ArgMatches) -> Result<(), Error> {\n        match matches.subcommand() {\n            Some((\"add\", args)) => *self = Self::Add(AddArgs::from_arg_matches(args)?),\n            Some((\"remove\", args)) => *self = Self::Remove(RemoveArgs::from_arg_matches(args)?),\n            Some((_, _)) => {\n                return Err(Error::raw(\n                    ErrorKind::InvalidSubcommand,\n                    \"Valid subcommands are `add` and `remove`\",\n                ))\n            }\n            None => (),\n        };\n        Ok(())\n    }\n}\n\nimpl Subcommand for CliSub {\n    fn augment_subcommands(cmd: Command) -> Command {\n        cmd.subcommand(AddArgs::augment_args(Command::new(\"add\")))\n            .subcommand(RemoveArgs::augment_args(Command::new(\"remove\")))\n            .subcommand_required(true)\n    }\n    fn augment_subcommands_for_update(cmd: Command) -> Command {\n        cmd.subcommand(AddArgs::augment_args(Command::new(\"add\")))\n            .subcommand(RemoveArgs::augment_args(Command::new(\"remove\")))\n            .subcommand_required(true)\n    }\n    fn has_subcommand(name: &str) -> bool {\n        matches!(name, \"add\" | \"remove\")\n    }\n}\n\n#[derive(Parser, Debug)]\nstruct Cli {\n    #[arg(short, long)]\n    top_level: bool,\n    #[command(subcommand)]\n    subcommand: CliSub,\n}\n\nfn main() {\n    let args = Cli::parse();\n    println!(\"{args:#?}\");\n}\n```\n\n### Flattening hand-implemented args into a derived application\n\nWhen using the derive API, you can use `#[command(flatten)]` inside the struct to add arguments as\nif they were added directly to the containing struct. The type of the field is usually an\nstruct that derived `Args`. However, you can also implement the `Args` trait manually on this\nstruct (or any other type) and it can still be used inside the struct created with the derive\nAPI. The implementation of the `Args` trait will use the builder API to add the arguments to\nthe `Command` instance created behind the scenes for you by the derive API.\n\nNotice how in the previous example we used [`augment_args`][crate::Args::augment_args] on the\nstruct that derived `Parser`, whereas now we implement\n[`augment_args`][crate::Args::augment_args] ourselves, but the derive API calls it\nautomatically since we used the `#[command(flatten)]` attribute.\n\nFor example:\n```rust\nuse clap::error::Error;\nuse clap::{Arg, ArgAction, ArgMatches, Args, Command, FromArgMatches, Parser};\n\n#[derive(Debug)]\nstruct CliArgs {\n    foo: bool,\n    bar: bool,\n    quuz: Option<String>,\n}\n\nimpl FromArgMatches for CliArgs {\n    fn from_arg_matches(matches: &ArgMatches) -> Result<Self, Error> {\n        let mut matches = matches.clone();\n        Self::from_arg_matches_mut(&mut matches)\n    }\n    fn from_arg_matches_mut(matches: &mut ArgMatches) -> Result<Self, Error> {\n        Ok(Self {\n            foo: matches.get_flag(\"foo\"),\n            bar: matches.get_flag(\"bar\"),\n            quuz: matches.remove_one::<String>(\"quuz\"),\n        })\n    }\n    fn update_from_arg_matches(&mut self, matches: &ArgMatches) -> Result<(), Error> {\n        let mut matches = matches.clone();\n        self.update_from_arg_matches_mut(&mut matches)\n    }\n    fn update_from_arg_matches_mut(&mut self, matches: &mut ArgMatches) -> Result<(), Error> {\n        self.foo |= matches.get_flag(\"foo\");\n        self.bar |= matches.get_flag(\"bar\");\n        if let Some(quuz) = matches.remove_one::<String>(\"quuz\") {\n            self.quuz = Some(quuz);\n        }\n        Ok(())\n    }\n}\n\nimpl Args for CliArgs {\n    fn augment_args(cmd: Command) -> Command {\n        cmd.arg(\n            Arg::new(\"foo\")\n                .short('f')\n                .long(\"foo\")\n                .action(ArgAction::SetTrue),\n        )\n        .arg(\n            Arg::new(\"bar\")\n                .short('b')\n                .long(\"bar\")\n                .action(ArgAction::SetTrue),\n        )\n        .arg(\n            Arg::new(\"quuz\")\n                .short('q')\n                .long(\"quuz\")\n                .action(ArgAction::Set),\n        )\n    }\n    fn augment_args_for_update(cmd: Command) -> Command {\n        cmd.arg(\n            Arg::new(\"foo\")\n                .short('f')\n                .long(\"foo\")\n                .action(ArgAction::SetTrue),\n        )\n        .arg(\n            Arg::new(\"bar\")\n                .short('b')\n                .long(\"bar\")\n                .action(ArgAction::SetTrue),\n        )\n        .arg(\n            Arg::new(\"quuz\")\n                .short('q')\n                .long(\"quuz\")\n                .action(ArgAction::Set),\n        )\n    }\n}\n\n#[derive(Parser, Debug)]\nstruct Cli {\n    #[arg(short, long)]\n    top_level: bool,\n    #[command(flatten)]\n    more_args: CliArgs,\n}\n\nfn main() {\n    let args = Cli::parse();\n    println!(\"{args:#?}\");\n}\n```\n\n## Tips\n\n- To get access to a [`Command`][crate::Command] call\n  [`CommandFactory::command`][crate::CommandFactory::command] (implemented when deriving\n  [`Parser`][crate::Parser])\n- Proactively check for bad [`Command`][crate::Command] configurations by calling\n  [`Command::debug_assert`][crate::Command::debug_assert] in a test\n  ([example][_tutorial#testing])\n- Always remember to [document](#doc-comments) args and commands with `#![deny(missing_docs)]`","links":{"crate::Arg":38,"crate::Command::debug_assert":41,"crate::ValueEnum":44,"crate::Arg::id":54,"crate::CommandFactory::command":70,"crate::ArgGroup":39,"crate::Arg::value_parser":36,"crate::builder::PossibleValue::help":66,"crate::Arg::default_value":61,"crate::Subcommand::augment_subcommands":69,"crate::Command::next_help_heading":53,"crate::builder::PossibleValue":35,"crate::Arg::action":23,"crate::Arg::short":25,"crate::_derive::_tutorial":42,"crate::Command::name":46,"crate::Command::next_display_order":52,"crate::Arg::env":55,"crate::Arg::global":60,"crate::value_parser!":34,"crate::Command::long_about":51,"crate::Arg::long":26,"crate::builder":45,"crate::Command":21,"_tutorial#configuring-the-parser":42,"crate::ArgGroup::multiple":57,"_tutorial#argument-relations":42,"crate::Arg::required":29,"crate::Arg::default_values":62,"crate::Arg::default_values_os":64,"crate::Command::allow_external_subcommands":56,"crate::_cookbook":17,"crate::_features":2,"crate::Command::author":48,"_tutorial#validation":42,"crate::builder::PossibleValue::new":65,"crate::Arg::num_args":67,"_tutorial#testing":42,"crate::Parser":19,"crate::Command::help_template":49,"crate::Command::version":47,"_tutorial#subcommands":42,"crate::ArgGroup::id":40,"crate::Arg::long_help":59,"crate::Command::about":50,"crate::Arg::default_value_os":63,"crate::Arg::help":58,"crate::Args":28,"crate::Subcommand":30,"crate::Args::augment_args":68,"_tutorial#adding-arguments":42,"_tutorial#enumerated-values":42},"attrs":["#[<cfg>(feature = \"unstable-doc\")]","#[doc(alias = \"skip\")]","#[doc(alias = \"verbatim_doc_comment\")]","#[doc(alias = \"flatten\")]","#[doc(alias = \"external_subcommand\")]","#[doc(alias = \"subcommand\")]","#[doc(alias = \"rename_all\")]","#[doc(alias = \"rename_all_env\")]","#[doc(alias = \"default_value_t\")]","#[doc(alias = \"default_values_t\")]","#[doc(alias = \"default_value_os_t\")]","#[doc(alias = \"default_values_os_t\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[42,43],"is_stripped":false}}},"1":{"id":1,"crate_id":0,"name":"cargo_example_derive","span":{"filename":"src/_cookbook/cargo_example_derive.rs","begin":[1,1],"end":[7,65]},"visibility":"public","docs":"# Example: cargo subcommand (Derive API)\n\n```rust\nuse clap::Parser;\n\n#[derive(Parser)] // requires `derive` feature\n#[command(name = \"cargo\")]\n#[command(bin_name = \"cargo\")]\n#[command(styles = CLAP_STYLING)]\nenum CargoCli {\n    ExampleDerive(ExampleDeriveArgs),\n}\n\n// See also `clap_cargo::style::CLAP_STYLING`\npub const CLAP_STYLING: clap::builder::styling::Styles = clap::builder::styling::Styles::styled()\n    .header(clap_cargo::style::HEADER)\n    .usage(clap_cargo::style::USAGE)\n    .literal(clap_cargo::style::LITERAL)\n    .placeholder(clap_cargo::style::PLACEHOLDER)\n    .error(clap_cargo::style::ERROR)\n    .valid(clap_cargo::style::VALID)\n    .invalid(clap_cargo::style::INVALID);\n\n#[derive(clap::Args)]\n#[command(version, about, long_about = None)]\nstruct ExampleDeriveArgs {\n    #[arg(long)]\n    manifest_path: Option<std::path::PathBuf>,\n}\n\nfn main() {\n    let CargoCli::ExampleDerive(args) = CargoCli::parse();\n    println!(\"{:?}\", args.manifest_path);\n}\n```\n\nFor more on creating a custom subcommand, see [the cargo\nbook](https://doc.rust-lang.org/cargo/reference/external-tools.html#custom-subcommands).\nThe crate [`clap-cargo`](https://github.com/crate-ci/clap-cargo) can help in\nmimicking cargo's interface.\n\nThe help looks like:\n```console\n$ cargo-example-derive --help\nUsage: cargo <COMMAND>\n\nCommands:\n  example-derive  A simple to use, efficient, and full-featured Command Line Argument Parser\n  help            Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n\n$ cargo-example-derive example-derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: cargo example-derive [OPTIONS]\n\nOptions:\n      --manifest-path <MANIFEST_PATH>  \n  -h, --help                           Print help\n  -V, --version                        Print version\n\n```\n\nThen to directly invoke the command, run:\n```console\n$ cargo-example-derive example-derive\nNone\n\n$ cargo-example-derive example-derive --manifest-path Cargo.toml\nSome(\"Cargo.toml\")\n\n```","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"12":{"id":12,"crate_id":0,"name":"repl","span":{"filename":"src/_cookbook/repl.rs","begin":[1,1],"end":[5,8]},"visibility":"public","docs":"# Example: Command REPL (Builder API)\n\n```rust\nuse std::io::Write;\n\nuse clap::Command;\n\nfn main() -> Result<(), String> {\n    loop {\n        let line = readline()?;\n        let line = line.trim();\n        if line.is_empty() {\n            continue;\n        }\n\n        match respond(line) {\n            Ok(quit) => {\n                if quit {\n                    break;\n                }\n            }\n            Err(err) => {\n                write!(std::io::stdout(), \"{err}\").map_err(|e| e.to_string())?;\n                std::io::stdout().flush().map_err(|e| e.to_string())?;\n            }\n        }\n    }\n\n    Ok(())\n}\n\nfn respond(line: &str) -> Result<bool, String> {\n    let args = shlex::split(line).ok_or(\"error: Invalid quoting\")?;\n    let matches = cli()\n        .try_get_matches_from(args)\n        .map_err(|e| e.to_string())?;\n    match matches.subcommand() {\n        Some((\"ping\", _matches)) => {\n            write!(std::io::stdout(), \"Pong\").map_err(|e| e.to_string())?;\n            std::io::stdout().flush().map_err(|e| e.to_string())?;\n        }\n        Some((\"quit\", _matches)) => {\n            write!(std::io::stdout(), \"Exiting ...\").map_err(|e| e.to_string())?;\n            std::io::stdout().flush().map_err(|e| e.to_string())?;\n            return Ok(true);\n        }\n        Some((name, _matches)) => unimplemented!(\"{name}\"),\n        None => unreachable!(\"subcommand required\"),\n    }\n\n    Ok(false)\n}\n\nfn cli() -> Command {\n    // strip out usage\n    const PARSER_TEMPLATE: &str = \"\\\n        {all-args}\n    \";\n    // strip out name/version\n    const APPLET_TEMPLATE: &str = \"\\\n        {about-with-newline}\\n\\\n        {usage-heading}\\n    {usage}\\n\\\n        \\n\\\n        {all-args}{after-help}\\\n    \";\n\n    Command::new(\"repl\")\n        .multicall(true)\n        .arg_required_else_help(true)\n        .subcommand_required(true)\n        .subcommand_value_name(\"APPLET\")\n        .subcommand_help_heading(\"APPLETS\")\n        .help_template(PARSER_TEMPLATE)\n        .subcommand(\n            Command::new(\"ping\")\n                .about(\"Get a response\")\n                .help_template(APPLET_TEMPLATE),\n        )\n        .subcommand(\n            Command::new(\"quit\")\n                .alias(\"exit\")\n                .about(\"Quit the REPL\")\n                .help_template(APPLET_TEMPLATE),\n        )\n}\n\nfn readline() -> Result<String, String> {\n    write!(std::io::stdout(), \"$ \").map_err(|e| e.to_string())?;\n    std::io::stdout().flush().map_err(|e| e.to_string())?;\n    let mut buffer = String::new();\n    std::io::stdin()\n        .read_line(&mut buffer)\n        .map_err(|e| e.to_string())?;\n    Ok(buffer)\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"4":{"id":4,"crate_id":0,"name":"escaped_positional_derive","span":{"filename":"src/_cookbook/escaped_positional_derive.rs","begin":[1,1],"end":[7,70]},"visibility":"public","docs":"# Example (Derive API)\n\n```rust\nuse clap::Parser;\n\n#[derive(Parser)] // requires `derive` feature\n#[command(version, about, long_about = None)]\nstruct Cli {\n    #[arg(short = 'f')]\n    eff: bool,\n\n    #[arg(short = 'p', value_name = \"PEAR\")]\n    pea: Option<String>,\n\n    #[arg(last = true)]\n    slop: Vec<String>,\n}\n\nfn main() {\n    let args = Cli::parse();\n\n    // This is what will happen with `myprog -f -p=bob -- sloppy slop slop`...\n    println!(\"-f used: {:?}\", args.eff); // -f used: true\n    println!(\"-p's value: {:?}\", args.pea); // -p's value: Some(\"bob\")\n    println!(\"'slops' values: {:?}\", args.slop); // 'slops' values: Some([\"sloppy\", \"slop\", \"slop\"])\n\n    // Continued program logic goes here...\n}\n```\n\n**This requires enabling the [`derive` feature flag][crate::_features].**\n\nYou can use `--` to escape further arguments.\n\nLet's see what this looks like in the help:\n```console\n$ escaped-positional-derive --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: escaped-positional-derive[EXE] [OPTIONS] [-- <SLOP>...]\n\nArguments:\n  [SLOP]...  \n\nOptions:\n  -f             \n  -p <PEAR>      \n  -h, --help     Print help\n  -V, --version  Print version\n\n```\n\nHere is a baseline without any arguments:\n```console\n$ escaped-positional-derive\n-f used: false\n-p's value: None\n'slops' values: []\n\n```\n\nNotice that we can't pass positional arguments before `--`:\n```console\n$ escaped-positional-derive foo bar\n? failed\nerror: unexpected argument 'foo' found\n\nUsage: escaped-positional-derive[EXE] [OPTIONS] [-- <SLOP>...]\n\nFor more information, try '--help'.\n\n```\n\nBut you can after:\n```console\n$ escaped-positional-derive -f -p=bob -- sloppy slop slop\n-f used: true\n-p's value: Some(\"bob\")\n'slops' values: [\"sloppy\", \"slop\", \"slop\"]\n\n```\n\nAs mentioned, the parser will directly pass everything through:\n```console\n$ escaped-positional-derive -- -f -p=bob sloppy slop slop\n-f used: false\n-p's value: None\n'slops' values: [\"-f\", \"-p=bob\", \"sloppy\", \"slop\", \"slop\"]\n\n```","links":{"crate::_features":2},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"81":{"id":81,"crate_id":0,"name":"clap","span":{"filename":"src/lib.rs","begin":[6,1],"end":[106,27]},"visibility":"public","docs":"> **Command Line Argument Parser for Rust**\n\nQuick Links:\n- Derive [tutorial][_derive::_tutorial] and [reference][_derive]\n- Builder [tutorial][_tutorial] and [reference][Command]\n- [Cookbook][_cookbook]\n- [FAQ][_faq]\n- [Discussions](https://github.com/clap-rs/clap/discussions)\n- [CHANGELOG](https://github.com/clap-rs/clap/blob/v4.5.40/CHANGELOG.md) (includes major version migration\n  guides)\n\n## Aspirations\n\n- Out of the box, users get a polished CLI experience\n  - Including common argument behavior, help generation, suggested fixes for users, colored output, [shell completions](https://github.com/clap-rs/clap/tree/master/clap_complete), etc\n- Flexible enough to port your existing CLI interface\n  - However, we won't necessarily streamline support for each use case\n- Reasonable parse performance\n- Resilient maintainership, including\n  - Willing to break compatibility rather than batching up breaking changes in large releases\n  - Leverage feature flags to keep to one active branch\n  - Being under [WG-CLI](https://github.com/rust-cli/team/) to increase the bus factor\n- We follow semver and will wait about 6-9 months between major breaking changes\n- We will support the last two minor Rust releases (MSRV, currently 1.74)\n\nWhile these aspirations can be at odds with fast build times and low binary\nsize, we will still strive to keep these reasonable for the flexibility you\nget.  Check out the\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs) for\nCLI parsers optimized for other use cases.\n\n## Example\n\nRun\n```console\n$ cargo add clap --features derive\n```\n*(See also [feature flag reference][_features])*\n\nThen define your CLI in `main.rs`:\n```rust\n# #[cfg(feature = \"derive\")] {\nuse clap::Parser;\n\n/// Simple program to greet a person\n#[derive(Parser, Debug)]\n#[command(version, about, long_about = None)]\nstruct Args {\n    /// Name of the person to greet\n    #[arg(short, long)]\n    name: String,\n\n    /// Number of times to greet\n    #[arg(short, long, default_value_t = 1)]\n    count: u8,\n}\n\nfn main() {\n    let args = Args::parse();\n\n    for _ in 0..args.count {\n        println!(\"Hello {}!\", args.name);\n    }\n}\n# }\n```\n\nAnd try it out:\n```console\n$ demo --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: demo[EXE] [OPTIONS] --name <NAME>\n\nOptions:\n  -n, --name <NAME>    Name of the person to greet\n  -c, --count <COUNT>  Number of times to greet [default: 1]\n  -h, --help           Print help\n  -V, --version        Print version\n\n$ demo --name Me\nHello Me!\n\n```\n*(version number and `.exe` extension on windows replaced by placeholders)*\n\nSee also the derive [tutorial][_derive::_tutorial] and [reference][_derive]\n\n### Related Projects\n\nAugment clap:\n- [wild](https://crates.io/crates/wild) for supporting wildcards (`*`) on Windows like you do Linux\n- [argfile](https://crates.io/crates/argfile) for loading additional arguments from a file (aka response files)\n- [shadow-rs](https://crates.io/crates/shadow-rs) for generating `Command::long_version`\n- [clap_mangen](https://crates.io/crates/clap_mangen) for generating man page source (roff)\n- [clap_complete](https://crates.io/crates/clap_complete) for shell completion support\n\nCLI Helpers\n- [clio](https://crates.io/crates/clio) for reading/writing to files specified as arguments\n- [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n- [clap-cargo](https://crates.io/crates/clap-cargo)\n- [colorchoice-clap](https://crates.io/crates/colorchoice-clap)\n\nTesting\n- [`trycmd`](https://crates.io/crates/trycmd):  Bulk snapshot testing\n- [`snapbox`](https://crates.io/crates/snapbox):  Specialized snapshot testing\n- [`assert_cmd`](https://crates.io/crates/assert_cmd) and [`assert_fs`](https://crates.io/crates/assert_fs): Customized testing\n\nDocumentation:\n- [Command-line Apps for Rust](https://rust-cli.github.io/book/index.html) book\n","links":{"_derive::_tutorial":42,"_tutorial":71,"Command":21,"_cookbook":17,"_faq":18,"_derive":20,"_features":2},"attrs":["#[doc(html_logo_url =\n\"https://raw.githubusercontent.com/clap-rs/clap/master/assets/clap.png\")]","#[<cfg_attr>(docsrs, feature(doc_auto_cfg))]","#[feature(doc_auto_cfg)]","#[forbid(unsafe_code)]","#[warn(missing_docs)]","#[warn(clippy::print_stderr)]","#[warn(clippy::print_stdout)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":[17,20,18,2,71,82],"is_stripped":false}}},"7":{"id":7,"crate_id":0,"name":"git_derive","span":{"filename":"src/_cookbook/git_derive.rs","begin":[1,1],"end":[7,55]},"visibility":"public","docs":"# Example: git-like CLI (Derive API)\n\n```rust\nuse std::ffi::OsStr;\nuse std::ffi::OsString;\nuse std::path::PathBuf;\n\nuse clap::{Args, Parser, Subcommand, ValueEnum};\n\n/// A fictional versioning CLI\n#[derive(Debug, Parser)] // requires `derive` feature\n#[command(name = \"git\")]\n#[command(about = \"A fictional versioning CLI\", long_about = None)]\nstruct Cli {\n    #[command(subcommand)]\n    command: Commands,\n}\n\n#[derive(Debug, Subcommand)]\nenum Commands {\n    /// Clones repos\n    #[command(arg_required_else_help = true)]\n    Clone {\n        /// The remote to clone\n        remote: String,\n    },\n    /// Compare two commits\n    Diff {\n        #[arg(value_name = \"COMMIT\")]\n        base: Option<OsString>,\n        #[arg(value_name = \"COMMIT\")]\n        head: Option<OsString>,\n        #[arg(last = true)]\n        path: Option<OsString>,\n        #[arg(\n            long,\n            require_equals = true,\n            value_name = \"WHEN\",\n            num_args = 0..=1,\n            default_value_t = ColorWhen::Auto,\n            default_missing_value = \"always\",\n            value_enum\n        )]\n        color: ColorWhen,\n    },\n    /// pushes things\n    #[command(arg_required_else_help = true)]\n    Push {\n        /// The remote to target\n        remote: String,\n    },\n    /// adds things\n    #[command(arg_required_else_help = true)]\n    Add {\n        /// Stuff to add\n        #[arg(required = true)]\n        path: Vec<PathBuf>,\n    },\n    Stash(StashArgs),\n    #[command(external_subcommand)]\n    External(Vec<OsString>),\n}\n\n#[derive(ValueEnum, Copy, Clone, Debug, PartialEq, Eq)]\nenum ColorWhen {\n    Always,\n    Auto,\n    Never,\n}\n\nimpl std::fmt::Display for ColorWhen {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        self.to_possible_value()\n            .expect(\"no values are skipped\")\n            .get_name()\n            .fmt(f)\n    }\n}\n\n#[derive(Debug, Args)]\n#[command(args_conflicts_with_subcommands = true)]\n#[command(flatten_help = true)]\nstruct StashArgs {\n    #[command(subcommand)]\n    command: Option<StashCommands>,\n\n    #[command(flatten)]\n    push: StashPushArgs,\n}\n\n#[derive(Debug, Subcommand)]\nenum StashCommands {\n    Push(StashPushArgs),\n    Pop { stash: Option<String> },\n    Apply { stash: Option<String> },\n}\n\n#[derive(Debug, Args)]\nstruct StashPushArgs {\n    #[arg(short, long)]\n    message: Option<String>,\n}\n\nfn main() {\n    let args = Cli::parse();\n\n    match args.command {\n        Commands::Clone { remote } => {\n            println!(\"Cloning {remote}\");\n        }\n        Commands::Diff {\n            mut base,\n            mut head,\n            mut path,\n            color,\n        } => {\n            if path.is_none() {\n                path = head;\n                head = None;\n                if path.is_none() {\n                    path = base;\n                    base = None;\n                }\n            }\n            let base = base\n                .as_deref()\n                .map(|s| s.to_str().unwrap())\n                .unwrap_or(\"stage\");\n            let head = head\n                .as_deref()\n                .map(|s| s.to_str().unwrap())\n                .unwrap_or(\"worktree\");\n            let path = path.as_deref().unwrap_or_else(|| OsStr::new(\"\"));\n            println!(\n                \"Diffing {}..{} {} (color={})\",\n                base,\n                head,\n                path.to_string_lossy(),\n                color\n            );\n        }\n        Commands::Push { remote } => {\n            println!(\"Pushing to {remote}\");\n        }\n        Commands::Add { path } => {\n            println!(\"Adding {path:?}\");\n        }\n        Commands::Stash(stash) => {\n            let stash_cmd = stash.command.unwrap_or(StashCommands::Push(stash.push));\n            match stash_cmd {\n                StashCommands::Push(push) => {\n                    println!(\"Pushing {push:?}\");\n                }\n                StashCommands::Pop { stash } => {\n                    println!(\"Popping {stash:?}\");\n                }\n                StashCommands::Apply { stash } => {\n                    println!(\"Applying {stash:?}\");\n                }\n            }\n        }\n        Commands::External(args) => {\n            println!(\"Calling out to {:?} with {:?}\", &args[0], &args[1..]);\n        }\n    }\n\n    // Continued program logic goes here...\n}\n```\n\n**This requires enabling the [`derive` feature flag][crate::_features].**\n\nGit is an example of several common subcommand patterns.\n\nHelp:\n```console\n$ git-derive\n? failed\nA fictional versioning CLI\n\nUsage: git-derive[EXE] <COMMAND>\n\nCommands:\n  clone  Clones repos\n  diff   Compare two commits\n  push   pushes things\n  add    adds things\n  stash  \n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n\n$ git-derive help\nA fictional versioning CLI\n\nUsage: git-derive[EXE] <COMMAND>\n\nCommands:\n  clone  Clones repos\n  diff   Compare two commits\n  push   pushes things\n  add    adds things\n  stash  \n  help   Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n\n$ git-derive help add\nadds things\n\nUsage: git-derive[EXE] add <PATH>...\n\nArguments:\n  <PATH>...  Stuff to add\n\nOptions:\n  -h, --help  Print help\n\n```\n\nA basic argument:\n```console\n$ git-derive add\n? failed\nadds things\n\nUsage: git-derive[EXE] add <PATH>...\n\nArguments:\n  <PATH>...  Stuff to add\n\nOptions:\n  -h, --help  Print help\n\n$ git-derive add Cargo.toml Cargo.lock\nAdding [\"Cargo.toml\", \"Cargo.lock\"]\n\n```\n\nDefault subcommand:\n```console\n$ git-derive stash -h\nUsage: git-derive[EXE] stash [OPTIONS]\n       git-derive[EXE] stash push [OPTIONS]\n       git-derive[EXE] stash pop [STASH]\n       git-derive[EXE] stash apply [STASH]\n       git-derive[EXE] stash help [COMMAND]...\n\nOptions:\n  -m, --message <MESSAGE>  \n  -h, --help               Print help\n\ngit-derive[EXE] stash push:\n  -m, --message <MESSAGE>  \n  -h, --help               Print help\n\ngit-derive[EXE] stash pop:\n  -h, --help  Print help\n  [STASH]     \n\ngit-derive[EXE] stash apply:\n  -h, --help  Print help\n  [STASH]     \n\ngit-derive[EXE] stash help:\nPrint this message or the help of the given subcommand(s)\n  [COMMAND]...  Print help for the subcommand(s)\n\n$ git-derive stash push -h\nUsage: git-derive[EXE] stash push [OPTIONS]\n\nOptions:\n  -m, --message <MESSAGE>  \n  -h, --help               Print help\n\n$ git-derive stash pop -h\nUsage: git-derive[EXE] stash pop [STASH]\n\nArguments:\n  [STASH]  \n\nOptions:\n  -h, --help  Print help\n\n$ git-derive stash -m \"Prototype\"\nPushing StashPushArgs { message: Some(\"Prototype\") }\n\n$ git-derive stash pop\nPopping None\n\n$ git-derive stash push -m \"Prototype\"\nPushing StashPushArgs { message: Some(\"Prototype\") }\n\n$ git-derive stash pop\nPopping None\n\n```\n\nExternal subcommands:\n```console\n$ git-derive custom-tool arg1 --foo bar\nCalling out to \"custom-tool\" with [\"arg1\", \"--foo\", \"bar\"]\n\n```\n\nLast argument:\n```console\n$ git-derive diff --help\nCompare two commits\n\nUsage: git-derive[EXE] diff [OPTIONS] [COMMIT] [COMMIT] [-- <PATH>]\n\nArguments:\n  [COMMIT]  \n  [COMMIT]  \n  [PATH]    \n\nOptions:\n      --color[=<WHEN>]  [default: auto] [possible values: always, auto, never]\n  -h, --help            Print help\n\n$ git-derive diff\nDiffing stage..worktree  (color=auto)\n\n$ git-derive diff ./src\nDiffing stage..worktree ./src (color=auto)\n\n$ git-derive diff HEAD ./src\nDiffing HEAD..worktree ./src (color=auto)\n\n$ git-derive diff HEAD~~ -- HEAD\nDiffing HEAD~~..worktree HEAD (color=auto)\n\n$ git-derive diff --color\nDiffing stage..worktree  (color=always)\n\n$ git-derive diff --color=never\nDiffing stage..worktree  (color=never)\n\n```","links":{"crate::_features":2},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"18":{"id":18,"crate_id":0,"name":"_faq","span":{"filename":"src/_faq.rs","begin":[1,1],"end":[95,4]},"visibility":"public","docs":"# Documentation: FAQ\n\n1. [Comparisons](#comparisons)\n   1. [How does `clap` compare to structopt?](#how-does-clap-compare-to-structopt)\n   2. [What are some reasons to use `clap`? (The Pitch)](#what-are-some-reasons-to-use-clap-the-pitch)\n   3. [What are some reasons *not* to use `clap`? (The Anti Pitch)](#what-are-some-reasons-not-to-use-clap-the-anti-pitch)\n   4. [Reasons to use `clap`](#reasons-to-use-clap)\n2. [How many approaches are there to create a parser?](#how-many-approaches-are-there-to-create-a-parser)\n3. [When should I use the builder vs derive APIs?](#when-should-i-use-the-builder-vs-derive-apis)\n4. [Why is there a default subcommand of help?](#why-is-there-a-default-subcommand-of-help)\n\n### Comparisons\n\nFirst, let me say that these comparisons are highly subjective, and not meant\nin a critical or harsh manner. All the argument parsing libraries out there (to\ninclude `clap`) have their own strengths and weaknesses. Sometimes it just\ncomes down to personal taste when all other factors are equal. When in doubt,\ntry them all and pick one that you enjoy :). There's plenty of room in the Rust\ncommunity for multiple implementations!\n\nFor less detailed but more broad comparisons, see\n[argparse-benchmarks](https://github.com/rust-cli/argparse-benchmarks-rs).\n\n#### How does `clap` compare to [structopt](https://github.com/TeXitoi/structopt)?\n\nSimple! `clap` *is* `structopt`.  `structopt` started as a derive API built on\ntop of clap v2.  With clap v3, we've forked structopt and integrated it\ndirectly into clap.  structopt is in\n[maintenance mode](https://github.com/TeXitoi/structopt/issues/516#issuecomment-989566094)\nwith the release of `clap_derive`.\n\nThe benefits of integrating `structopt` and `clap` are:\n- Easier cross-linking in documentation\n- Documentation parity\n- Tighter design feedback loop, ensuring all new features are designed with\n  derives in mind and easier to change `clap` in response to `structopt` bugs.\n- Clearer endorsement of `structopt`\n\nSee also\n- [`clap` v3 CHANGELOG](https://github.com/clap-rs/clap/blob/v3-master/CHANGELOG.md#300---2021-12-31)\n- [`structopt` migration guide](https://github.com/clap-rs/clap/blob/v3-master/CHANGELOG.md#migrate-structopt)\n\n#### What are some reasons to use `clap`? (The Pitch)\n\n`clap` is as fast, and as lightweight as possible while still giving all the features you'd expect from a modern argument parser. In fact, for the amount and type of features `clap` offers it remains about as fast as `getopts`. If you use `clap`, when you just need some simple arguments parsed, you'll find it's a walk in the park. `clap` also makes it possible to represent extremely complex and advanced requirements without too much thought. `clap` aims to be intuitive, easy to use, and fully capable for wide variety use cases and needs.\n\n#### What are some reasons *not* to use `clap`? (The Anti Pitch)\n\nDepending on the style in which you choose to define the valid arguments, `clap` can be very verbose. `clap` also offers so many finetuning knobs and dials, that learning everything can seem overwhelming. I strive to keep the simple cases simple, but when turning all those custom dials it can get complex. `clap` is also opinionated about parsing. Even though so much can be tweaked and tuned with `clap` (and I'm adding more all the time), there are still certain features which `clap` implements in specific ways that may be contrary to some users' use-cases.\n\n#### Reasons to use `clap`\n\n * You want all the nice CLI features your users may expect, yet you don't want to implement them all yourself. You'd like to focus on your application, not argument parsing.\n * In addition to the point above, you don't want to sacrifice performance to get all those nice features.\n * You have complex requirements/conflicts between your various valid args.\n * You want to use subcommands (although other libraries also support subcommands, they are not nearly as feature rich as those provided by `clap`).\n * You want some sort of custom validation built into the argument parsing process, instead of as part of your application (which allows for earlier failures, better error messages, more cohesive experience, etc.).\n\n### How many approaches are there to create a parser?\n\nThe following APIs are supported:\n- [Derive][crate::_derive::_tutorial]\n- [Builder][crate::_tutorial]\n\nPreviously, we supported:\n- [YAML](https://github.com/clap-rs/clap/issues/3087)\n- [docopt](http://docopt.org/)-inspired [usage parser](https://github.com/clap-rs/clap/issues/3086)\n- [`clap_app!`](https://github.com/clap-rs/clap/issues/2835)\n\nThere are also experiments with other APIs:\n- [fncmd](https://github.com/yuhr/fncmd): function attribute\n- [clap-serde](https://github.com/aobatact/clap-serde): create a `Command` from a deserializer\n\n### When should I use the builder vs derive APIs?\n\nOur default answer is to use the [Derive API][crate::_derive::_tutorial]:\n- Easier to read, write, and modify\n- Easier to keep the argument declaration and reading of argument in sync\n- Easier to reuse, e.g. [clap-verbosity-flag](https://crates.io/crates/clap-verbosity-flag)\n\nThe [Builder API][crate::_tutorial] is a lower-level API that someone might want to use for\n- Faster compile times if you aren't already using other procedural macros\n- More flexibility, e.g. you can look up the [argument's values][crate::ArgMatches::get_many],\n  their [ordering with other arguments][crate::ArgMatches::indices_of], and [what set\n  them][crate::ArgMatches::value_source].  The Derive API can only report values and not\n  indices of or other data.\n\nYou can [interop between Derive and Builder APIs][crate::_derive#mixing-builder-and-derive-apis].\n\n### Why is there a default subcommand of help?\n\nThere is only a default subcommand of `help` when other subcommands have been defined manually. So it's opt-in(ish), being that you only get a `help` subcommand if you're actually using subcommands.\n\nAlso, if the user defined a `help` subcommand themselves, the auto-generated one wouldn't be added (meaning it's only generated if the user hasn't defined one themselves).\n","links":{"crate::_derive::_tutorial":42,"crate::_tutorial":71,"crate::ArgMatches::indices_of":73,"crate::ArgMatches::value_source":74,"crate::ArgMatches::get_many":72,"crate::_derive#mixing-builder-and-derive-apis":20},"attrs":["#[<cfg>(feature = \"unstable-doc\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"10":{"id":10,"crate_id":0,"name":"multicall_hostname","span":{"filename":"src/_cookbook/multicall_hostname.rs","begin":[1,1],"end":[7,63]},"visibility":"public","docs":"# Example: hostname-like CLI (Builder API)\n\n```rust\nuse clap::Command;\n\nfn main() {\n    let cmd = Command::new(env!(\"CARGO_CRATE_NAME\"))\n        .multicall(true)\n        .arg_required_else_help(true)\n        .subcommand_value_name(\"APPLET\")\n        .subcommand_help_heading(\"APPLETS\")\n        .subcommand(Command::new(\"hostname\").about(\"show hostname part of FQDN\"))\n        .subcommand(Command::new(\"dnsdomainname\").about(\"show domain name part of FQDN\"));\n\n    match cmd.get_matches().subcommand_name() {\n        Some(\"hostname\") => println!(\"www\"),\n        Some(\"dnsdomainname\") => println!(\"example.com\"),\n        _ => unreachable!(\"parser should ensure only valid subcommand names are used\"),\n    }\n}\n```\n\nSee the documentation for [`Command::multicall`][crate::Command::multicall] for rationale.\n\nThis example omits the implementation of displaying address config\n\n```console\n$ hostname\nwww\n\n```\n*Note: without the links setup, we can't demonstrate the multicall behavior*","links":{"crate::Command::multicall":8},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"43":{"id":43,"crate_id":0,"name":null,"span":{"filename":"src/_derive/mod.rs","begin":[542,1],"end":[542,26]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"use":{"source":"crate::_cookbook","name":"_cookbook","id":17,"is_glob":false}}},"13":{"id":13,"crate_id":0,"name":"repl_derive","span":{"filename":"src/_cookbook/repl_derive.rs","begin":[1,1],"end":[4,56]},"visibility":"public","docs":"# Example: REPL (Derive API)\n\n```rust\nuse std::io::Write;\n\nuse clap::{Parser, Subcommand};\n\nfn main() -> Result<(), String> {\n    loop {\n        let line = readline()?;\n        let line = line.trim();\n        if line.is_empty() {\n            continue;\n        }\n\n        match respond(line) {\n            Ok(quit) => {\n                if quit {\n                    break;\n                }\n            }\n            Err(err) => {\n                write!(std::io::stdout(), \"{err}\").map_err(|e| e.to_string())?;\n                std::io::stdout().flush().map_err(|e| e.to_string())?;\n            }\n        }\n    }\n\n    Ok(())\n}\n\nfn respond(line: &str) -> Result<bool, String> {\n    let args = shlex::split(line).ok_or(\"error: Invalid quoting\")?;\n    let cli = Cli::try_parse_from(args).map_err(|e| e.to_string())?;\n    match cli.command {\n        Commands::Ping => {\n            write!(std::io::stdout(), \"Pong\").map_err(|e| e.to_string())?;\n            std::io::stdout().flush().map_err(|e| e.to_string())?;\n        }\n        Commands::Exit => {\n            write!(std::io::stdout(), \"Exiting ...\").map_err(|e| e.to_string())?;\n            std::io::stdout().flush().map_err(|e| e.to_string())?;\n            return Ok(true);\n        }\n    }\n    Ok(false)\n}\n\n#[derive(Debug, Parser)]\n#[command(multicall = true)]\nstruct Cli {\n    #[command(subcommand)]\n    command: Commands,\n}\n\n#[derive(Debug, Subcommand)]\nenum Commands {\n    Ping,\n    Exit,\n}\n\nfn readline() -> Result<String, String> {\n    write!(std::io::stdout(), \"$ \").map_err(|e| e.to_string())?;\n    std::io::stdout().flush().map_err(|e| e.to_string())?;\n    let mut buffer = String::new();\n    std::io::stdin()\n        .read_line(&mut buffer)\n        .map_err(|e| e.to_string())?;\n    Ok(buffer)\n}","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2":{"id":2,"crate_id":0,"name":"_features","span":{"filename":"src/_features.rs","begin":[1,1],"end":[29,79]},"visibility":"public","docs":"## Documentation: Feature Flags\n\nAvailable [compile-time feature flags](https://doc.rust-lang.org/cargo/reference/features.html#dependency-features)\n\n#### Default Features\n\n* `std`: _Not Currently Used._ Placeholder for supporting `no_std` environments in a backwards compatible manner.\n* `color`: Turns on terminal styling of help and error messages.  See\n  [`Command::styles`][crate::Command::styles] to customize this.\n* `help`: Auto-generate help output\n* `usage`: Auto-generate usage\n* `error-context`: Include contextual information for errors (which arg failed, etc)\n* `suggestions`: Turns on the `Did you mean '--myoption'?` feature for when users make typos.\n\n#### Optional features\n\n* `deprecated`: Guided experience to prepare for next breaking release (at different stages of development, this may become default)\n* `derive`: Enables the custom derive (i.e. `#[derive(Parser)]`). Without this you must use one of the other methods of creating a `clap` CLI listed above.\n* `cargo`: Turns on macros that read values from [`CARGO_*` environment variables](https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates).\n* `env`: Turns on the usage of environment variables during parsing.\n* `unicode`: Turns on support for unicode characters (including emoji) in arguments and help messages.\n* ``wrap_help``: Turns on the help text wrapping feature, based on the terminal size.\n* `string`: Allow runtime generated strings (e.g. with [`Str`][crate::builder::Str]).\n\n#### Experimental features\n\n**Warning:** These may contain breaking changes between minor releases.\n\n* `unstable-v5`: Preview features which will be stable on the v5.0 release","links":{"crate::Command::styles":15,"crate::builder::Str":75},"attrs":["#[<cfg>(feature = \"unstable-doc\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"5":{"id":5,"crate_id":0,"name":"find","span":{"filename":"src/_cookbook/find.rs","begin":[1,1],"end":[7,49]},"visibility":"public","docs":"# Example: find-like CLI (Builder API)\n\n```rust\nuse std::collections::BTreeMap;\n\nuse clap::{command, value_parser, Arg, ArgAction, ArgGroup, ArgMatches, Command};\n\nfn main() {\n    let matches = cli().get_matches();\n    let values = Value::from_matches(&matches);\n    println!(\"{values:#?}\");\n}\n\nfn cli() -> Command {\n    command!()\n        .group(ArgGroup::new(\"tests\").multiple(true))\n        .next_help_heading(\"TESTS\")\n        .args([\n            position_sensitive_flag(Arg::new(\"empty\"))\n                .long(\"empty\")\n                .action(ArgAction::Append)\n                .help(\"File is empty and is either a regular file or a directory\")\n                .group(\"tests\"),\n            Arg::new(\"name\")\n                .long(\"name\")\n                .action(ArgAction::Append)\n                .help(\"Base of file name (the path with the leading directories removed) matches shell pattern pattern\")\n                .group(\"tests\")\n        ])\n        .group(ArgGroup::new(\"operators\").multiple(true))\n        .next_help_heading(\"OPERATORS\")\n        .args([\n            position_sensitive_flag(Arg::new(\"or\"))\n                .short('o')\n                .long(\"or\")\n                .action(ArgAction::Append)\n                .help(\"expr2 is not evaluate if exp1 is true\")\n                .group(\"operators\"),\n            position_sensitive_flag(Arg::new(\"and\"))\n                .short('a')\n                .long(\"and\")\n                .action(ArgAction::Append)\n                .help(\"Same as `expr1 expr1`\")\n                .group(\"operators\"),\n        ])\n}\n\nfn position_sensitive_flag(arg: Arg) -> Arg {\n    // Flags don't track the position of each occurrence, so we need to emulate flags with\n    // value-less options to get the same result\n    arg.num_args(0)\n        .value_parser(value_parser!(bool))\n        .default_missing_value(\"true\")\n        .default_value(\"false\")\n}\n\n#[derive(Clone, PartialEq, Eq, Hash, Debug)]\npub enum Value {\n    Bool(bool),\n    String(String),\n}\n\nimpl Value {\n    pub fn from_matches(matches: &ArgMatches) -> Vec<(clap::Id, Self)> {\n        let mut values = BTreeMap::new();\n        for id in matches.ids() {\n            if matches.try_get_many::<clap::Id>(id.as_str()).is_ok() {\n                // ignore groups\n                continue;\n            }\n            let value_source = matches\n                .value_source(id.as_str())\n                .expect(\"id came from matches\");\n            if value_source != clap::parser::ValueSource::CommandLine {\n                // Any other source just gets tacked on at the end (like default values)\n                continue;\n            }\n            if Self::extract::<String>(matches, id, &mut values) {\n                continue;\n            }\n            if Self::extract::<bool>(matches, id, &mut values) {\n                continue;\n            }\n            unimplemented!(\"unknown type for {id}: {matches:?}\");\n        }\n        values.into_values().collect::<Vec<_>>()\n    }\n\n    fn extract<T: Clone + Into<Value> + Send + Sync + 'static>(\n        matches: &ArgMatches,\n        id: &clap::Id,\n        output: &mut BTreeMap<usize, (clap::Id, Self)>,\n    ) -> bool {\n        match matches.try_get_many::<T>(id.as_str()) {\n            Ok(Some(values)) => {\n                for (value, index) in values.zip(\n                    matches\n                        .indices_of(id.as_str())\n                        .expect(\"id came from matches\"),\n                ) {\n                    output.insert(index, (id.clone(), value.clone().into()));\n                }\n                true\n            }\n            Ok(None) => {\n                unreachable!(\"`ids` only reports what is present\")\n            }\n            Err(clap::parser::MatchesError::UnknownArgument { .. }) => {\n                unreachable!(\"id came from matches\")\n            }\n            Err(clap::parser::MatchesError::Downcast { .. }) => false,\n            Err(_) => {\n                unreachable!(\"id came from matches\")\n            }\n        }\n    }\n}\n\nimpl From<String> for Value {\n    fn from(other: String) -> Self {\n        Self::String(other)\n    }\n}\n\nimpl From<bool> for Value {\n    fn from(other: bool) -> Self {\n        Self::Bool(other)\n    }\n}\n```\n\n`find` is an example of position-sensitive flags\n\n```console\n$ find --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: find[EXE] [OPTIONS]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\nTESTS:\n      --empty        File is empty and is either a regular file or a directory\n      --name <name>  Base of file name (the path with the leading directories removed) matches shell\n                     pattern pattern\n\nOPERATORS:\n  -o, --or   expr2 is not evaluate if exp1 is true\n  -a, --and  Same as `expr1 expr1`\n\n$ find --empty -o --name .keep\n[\n    (\n        \"empty\",\n        Bool(\n            true,\n        ),\n    ),\n    (\n        \"or\",\n        Bool(\n            true,\n        ),\n    ),\n    (\n        \"name\",\n        String(\n            \".keep\",\n        ),\n    ),\n]\n\n$ find --empty -o --name .keep -o --name foo\n[\n    (\n        \"empty\",\n        Bool(\n            true,\n        ),\n    ),\n    (\n        \"or\",\n        Bool(\n            true,\n        ),\n    ),\n    (\n        \"name\",\n        String(\n            \".keep\",\n        ),\n    ),\n    (\n        \"or\",\n        Bool(\n            true,\n        ),\n    ),\n    (\n        \"name\",\n        String(\n            \"foo\",\n        ),\n    ),\n]\n\n```\n","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"71":{"id":71,"crate_id":0,"name":"_tutorial","span":{"filename":"src/_tutorial.rs","begin":[10,1],"end":[246,23]},"visibility":"public","docs":"## Tutorial for the Builder API\n\n*See the side bar for the Table of Contents*\n\n## Quick Start\n\nYou can create an application with several arguments using usage strings.\n\nFirst, ensure `clap` is available:\n```console\n$ cargo add clap\n```\n\nHere is a preview of the type of application you can make:\n```rust\nuse std::path::PathBuf;\n\nuse clap::{arg, command, value_parser, ArgAction, Command};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(arg!([name] \"Optional name to operate on\"))\n        .arg(\n            arg!(\n                -c --config <FILE> \"Sets a custom config file\"\n            )\n            // We don't have syntax yet for optional options, so manually calling `required`\n            .required(false)\n            .value_parser(value_parser!(PathBuf)),\n        )\n        .arg(arg!(\n            -d --debug ... \"Turn debugging information on\"\n        ))\n        .subcommand(\n            Command::new(\"test\")\n                .about(\"does testing things\")\n                .arg(arg!(-l --list \"lists test values\").action(ArgAction::SetTrue)),\n        )\n        .get_matches();\n\n    // You can check the value provided by positional arguments, or option arguments\n    if let Some(name) = matches.get_one::<String>(\"name\") {\n        println!(\"Value for name: {name}\");\n    }\n\n    if let Some(config_path) = matches.get_one::<PathBuf>(\"config\") {\n        println!(\"Value for config: {}\", config_path.display());\n    }\n\n    // You can see how many times a particular flag or argument occurred\n    // Note, only flags can have multiple occurrences\n    match matches\n        .get_one::<u8>(\"debug\")\n        .expect(\"Counts are defaulted\")\n    {\n        0 => println!(\"Debug mode is off\"),\n        1 => println!(\"Debug mode is kind of on\"),\n        2 => println!(\"Debug mode is on\"),\n        _ => println!(\"Don't be crazy\"),\n    }\n\n    // You can check for the existence of subcommands, and if found use their\n    // matches just as you would the top level cmd\n    if let Some(matches) = matches.subcommand_matches(\"test\") {\n        // \"$ myapp test\" was run\n        if matches.get_flag(\"list\") {\n            // \"$ myapp test -l\" was run\n            println!(\"Printing testing lists...\");\n        } else {\n            println!(\"Not printing testing lists...\");\n        }\n    }\n\n    // Continued program logic goes here...\n}\n```\n\n```console\n$ 01_quick --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 01_quick[EXE] [OPTIONS] [name] [COMMAND]\n\nCommands:\n  test  does testing things\n  help  Print this message or the help of the given subcommand(s)\n\nArguments:\n  [name]  Optional name to operate on\n\nOptions:\n  -c, --config <FILE>  Sets a custom config file\n  -d, --debug...       Turn debugging information on\n  -h, --help           Print help\n  -V, --version        Print version\n\n```\n\nBy default, the program does nothing:\n```console\n$ 01_quick\nDebug mode is off\n\n```\n\nBut you can mix and match the various features\n```console\n$ 01_quick -dd test\nDebug mode is on\nNot printing testing lists...\n\n```\n\nSee also\n- [FAQ: When should I use the builder vs derive APIs?][crate::_faq#when-should-i-use-the-builder-vs-derive-apis]\n- The [cookbook][crate::_cookbook] for more application-focused examples\n\n## Configuring the Parser\n\nYou use [`Command`][crate::Command] to start building a parser.\n\n```rust\nuse clap::{arg, Command};\n\nfn main() {\n    let matches = Command::new(\"MyApp\")\n        .version(\"1.0\")\n        .about(\"Does awesome things\")\n        .arg(arg!(--two <VALUE>).required(true))\n        .arg(arg!(--one <VALUE>).required(true))\n        .get_matches();\n\n    println!(\n        \"two: {:?}\",\n        matches.get_one::<String>(\"two\").expect(\"required\")\n    );\n    println!(\n        \"one: {:?}\",\n        matches.get_one::<String>(\"one\").expect(\"required\")\n    );\n}\n```\n\n```console\n$ 02_apps --help\nDoes awesome things\n\nUsage: 02_apps[EXE] --two <VALUE> --one <VALUE>\n\nOptions:\n      --two <VALUE>  \n      --one <VALUE>  \n  -h, --help         Print help\n  -V, --version      Print version\n\n$ 02_apps --version\nMyApp 1.0\n\n```\n\nYou can use [`command!()`][crate::command!] to fill these fields in from your `Cargo.toml`\nfile.  **This requires the [`cargo` feature flag][crate::_features].**\n\n```rust\nuse clap::{arg, command};\n\nfn main() {\n    // requires `cargo` feature, reading name, version, author, and description from `Cargo.toml`\n    let matches = command!()\n        .arg(arg!(--two <VALUE>).required(true))\n        .arg(arg!(--one <VALUE>).required(true))\n        .get_matches();\n\n    println!(\n        \"two: {:?}\",\n        matches.get_one::<String>(\"two\").expect(\"required\")\n    );\n    println!(\n        \"one: {:?}\",\n        matches.get_one::<String>(\"one\").expect(\"required\")\n    );\n}\n```\n```console\n$ 02_crate --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 02_crate[EXE] --two <VALUE> --one <VALUE>\n\nOptions:\n      --two <VALUE>  \n      --one <VALUE>  \n  -h, --help         Print help\n  -V, --version      Print version\n\n$ 02_crate --version\nclap [..]\n\n```\n\nYou can use [`Command`][crate::Command] methods to change the application level behavior of\nclap, like [`Command::next_line_help`].\n\n```rust\nuse clap::{arg, command, ArgAction};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .next_line_help(true)\n        .arg(arg!(--two <VALUE>).required(true).action(ArgAction::Set))\n        .arg(arg!(--one <VALUE>).required(true).action(ArgAction::Set))\n        .get_matches();\n\n    println!(\n        \"two: {:?}\",\n        matches.get_one::<String>(\"two\").expect(\"required\")\n    );\n    println!(\n        \"one: {:?}\",\n        matches.get_one::<String>(\"one\").expect(\"required\")\n    );\n}\n```\n```console\n$ 02_app_settings --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 02_app_settings[EXE] --two <VALUE> --one <VALUE>\n\nOptions:\n      --two <VALUE>\n          \n      --one <VALUE>\n          \n  -h, --help\n          Print help\n  -V, --version\n          Print version\n\n```\n\n## Adding Arguments\n\n1. [Positionals](#positionals)\n2. [Options](#options)\n3. [Flags](#flags)\n4. [Required](#required)\n5. [Defaults](#defaults)\n6. [Subcommands](#subcommands)\n\n\n### Positionals\n\nBy default, an [`Arg`] defines a positional argument:\n\n```rust\nuse clap::{command, Arg};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(Arg::new(\"name\"))\n        .get_matches();\n\n    println!(\"name: {:?}\", matches.get_one::<String>(\"name\"));\n}\n```\n```console\n$ 03_03_positional --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_03_positional[EXE] [name]\n\nArguments:\n  [name]  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_03_positional\nname: None\n\n$ 03_03_positional bob\nname: Some(\"bob\")\n\n```\n\nNote that the default [`ArgAction`][crate::ArgAction] is [`Set`][crate::ArgAction::Set].  To\naccept multiple values, override the [action][Arg::action] with [`Append`][crate::ArgAction::Append]:\n```rust\nuse clap::{command, Arg, ArgAction};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(Arg::new(\"name\").action(ArgAction::Append))\n        .get_matches();\n\n    let args = matches\n        .get_many::<String>(\"name\")\n        .unwrap_or_default()\n        .map(|v| v.as_str())\n        .collect::<Vec<_>>();\n\n    println!(\"names: {:?}\", &args);\n}\n```\n```console\n$ 03_03_positional_mult --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_03_positional_mult[EXE] [name]...\n\nArguments:\n  [name]...  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_03_positional_mult\nnames: []\n\n$ 03_03_positional_mult bob\nnames: [\"bob\"]\n\n$ 03_03_positional_mult bob john\nnames: [\"bob\", \"john\"]\n\n```\n\n### Options\n\nYou can name your arguments with a flag:\n- Intent of the value is clearer\n- Order doesn't matter\n\n```rust\nuse clap::{command, Arg};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(Arg::new(\"name\").short('n').long(\"name\"))\n        .get_matches();\n\n    println!(\"name: {:?}\", matches.get_one::<String>(\"name\"));\n}\n```\n```console\n$ 03_02_option --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_02_option[EXE] [OPTIONS]\n\nOptions:\n  -n, --name <name>  \n  -h, --help         Print help\n  -V, --version      Print version\n\n$ 03_02_option\nname: None\n\n$ 03_02_option --name bob\nname: Some(\"bob\")\n\n$ 03_02_option --name=bob\nname: Some(\"bob\")\n\n$ 03_02_option -n bob\nname: Some(\"bob\")\n\n$ 03_02_option -n=bob\nname: Some(\"bob\")\n\n$ 03_02_option -nbob\nname: Some(\"bob\")\n\n```\n\nNote that the default [`ArgAction`][crate::ArgAction] is [`Set`][crate::ArgAction::Set].  To\naccept multiple occurrences, override the [action][Arg::action] with [`Append`][crate::ArgAction::Append]:\n```rust\nuse clap::{command, Arg, ArgAction};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(\n            Arg::new(\"name\")\n                .short('n')\n                .long(\"name\")\n                .action(ArgAction::Append),\n        )\n        .get_matches();\n\n    let args = matches\n        .get_many::<String>(\"name\")\n        .unwrap_or_default()\n        .map(|v| v.as_str())\n        .collect::<Vec<_>>();\n\n    println!(\"names: {:?}\", &args);\n}\n```\n```console\n$ 03_02_option_mult --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_02_option_mult[EXE] [OPTIONS]\n\nOptions:\n  -n, --name <name>  \n  -h, --help         Print help\n  -V, --version      Print version\n\n$ 03_02_option_mult\nnames: []\n\n$ 03_02_option_mult --name bob\nnames: [\"bob\"]\n\n$ 03_02_option_mult --name bob --name john\nnames: [\"bob\", \"john\"]\n\n$ 03_02_option_mult_derive --name bob --name=john -n tom -n=chris -nsteve\nname: [\"bob\", \"john\", \"tom\", \"chris\", \"steve\"]\n\n```\n\n### Flags\n\nFlags can also be switches that can be on/off:\n\n```rust\nuse clap::{command, Arg, ArgAction};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(\n            Arg::new(\"verbose\")\n                .short('v')\n                .long(\"verbose\")\n                .action(ArgAction::SetTrue),\n        )\n        .get_matches();\n\n    println!(\"verbose: {:?}\", matches.get_flag(\"verbose\"));\n}\n```\n```console\n$ 03_01_flag_bool --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_01_flag_bool[EXE] [OPTIONS]\n\nOptions:\n  -v, --verbose  \n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_01_flag_bool\nverbose: false\n\n$ 03_01_flag_bool --verbose\nverbose: true\n\n$ 03_01_flag_bool --verbose --verbose\n? failed\nerror: the argument '--verbose' cannot be used multiple times\n\nUsage: 03_01_flag_bool[EXE] [OPTIONS]\n\nFor more information, try '--help'.\n\n```\n\nTo accept multiple flags, use [`Count`][crate::ArgAction::Count]:\n\n```rust\nuse clap::{command, Arg, ArgAction};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(\n            Arg::new(\"verbose\")\n                .short('v')\n                .long(\"verbose\")\n                .action(ArgAction::Count),\n        )\n        .get_matches();\n\n    println!(\"verbose: {:?}\", matches.get_count(\"verbose\"));\n}\n```\n```console\n$ 03_01_flag_count --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_01_flag_count[EXE] [OPTIONS]\n\nOptions:\n  -v, --verbose...  \n  -h, --help        Print help\n  -V, --version     Print version\n\n$ 03_01_flag_count\nverbose: 0\n\n$ 03_01_flag_count --verbose\nverbose: 1\n\n$ 03_01_flag_count --verbose --verbose\nverbose: 2\n\n```\n\n### Required\n\nBy default, an [`Arg`] is optional which can be changed with\n[`required`][crate::Arg::required].\n```rust\nuse clap::{command, Arg};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(Arg::new(\"name\").required(true))\n        .get_matches();\n\n    println!(\n        \"name: {:?}\",\n        matches\n            .get_one::<String>(\"name\")\n            .expect(\"clap `required` ensures its present\")\n    );\n}\n```\n```console\n$ 03_06_required --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_06_required[EXE] <name>\n\nArguments:\n  <name>  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_06_required\n? 2\nerror: the following required arguments were not provided:\n  <name>\n\nUsage: 03_06_required[EXE] <name>\n\nFor more information, try '--help'.\n\n$ 03_06_required bob\nname: \"bob\"\n\n```\n\n### Defaults\n\nWe've previously showed that arguments can be [`required`][crate::Arg::required] or optional.\nWhen optional, you work with a `Option` and can `unwrap_or`.  Alternatively, you can set\n[`Arg::default_value`][crate::Arg::default_value].\n\n```rust\nuse clap::{arg, command, value_parser};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(\n            arg!([PORT])\n                .value_parser(value_parser!(u16))\n                .default_value(\"2020\"),\n        )\n        .get_matches();\n\n    println!(\n        \"port: {:?}\",\n        matches\n            .get_one::<u16>(\"PORT\")\n            .expect(\"default ensures there is always a value\")\n    );\n}\n```\n```console\n$ 03_05_default_values --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_05_default_values[EXE] [PORT]\n\nArguments:\n  [PORT]  [default: 2020]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_05_default_values\nport: 2020\n\n$ 03_05_default_values 22\nport: 22\n\n```\n\n### Subcommands\n\nSubcommands are defined as [`Command`][crate::Command]s that get added via\n[`Command::subcommand`][crate::Command::subcommand]. Each instance of a Subcommand can have its\nown version, author(s), Args, and even its own subcommands.\n\n```rust\nuse clap::{arg, command, Command};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .propagate_version(true)\n        .subcommand_required(true)\n        .arg_required_else_help(true)\n        .subcommand(\n            Command::new(\"add\")\n                .about(\"Adds files to myapp\")\n                .arg(arg!([NAME])),\n        )\n        .get_matches();\n\n    match matches.subcommand() {\n        Some((\"add\", sub_matches)) => println!(\n            \"'myapp add' was used, name is: {:?}\",\n            sub_matches.get_one::<String>(\"NAME\")\n        ),\n        _ => unreachable!(\"Exhausted list of subcommands and subcommand_required prevents `None`\"),\n    }\n}\n```\n```console\n$ 03_04_subcommands help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_04_subcommands[EXE] <COMMAND>\n\nCommands:\n  add   Adds files to myapp\n  help  Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_04_subcommands help add\nAdds files to myapp\n\nUsage: 03_04_subcommands[EXE] add [NAME]\n\nArguments:\n  [NAME]  \n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 03_04_subcommands add bob\n'myapp add' was used, name is: Some(\"bob\")\n\n```\n\nWe set\n[`Command::arg_required_else_help`][crate::Command::arg_required_else_help] to\nshow the help, rather than an error, when the\n[required subcommand][crate::Command::subcommand_required] is missing:\n```console\n$ 03_04_subcommands\n? failed\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 03_04_subcommands[EXE] <COMMAND>\n\nCommands:\n  add   Adds files to myapp\n  help  Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n```\n\nSince we specified [`Command::propagate_version`][crate::Command::propagate_version], the `--version` flag\nis available in all subcommands:\n```console\n$ 03_04_subcommands --version\nclap [..]\n\n$ 03_04_subcommands add --version\nclap-add [..]\n\n```\n\n## Validation\n\n1. [Enumerated values](#enumerated-values)\n2. [Validated values](#validated-values)\n3. [Argument Relations](#argument-relations)\n4. [Custom Validation](#custom-validation)\n\nAn appropriate default parser/validator will be selected for the field's type.  See\n[`value_parser!`][crate::value_parser!] for more details.\n\n### Enumerated values\n\nIf you have arguments of specific values you want to test for, you can use the\n[`PossibleValuesParser`][crate::builder::PossibleValuesParser] or [`Arg::value_parser([\"val1\",\n...])`][crate::Arg::value_parser] for short.\n\nThis allows you to specify the valid values for that argument. If the user does not use one of\nthose specific values, they will receive a graceful exit with error message informing them\nof the mistake, and what the possible valid values are\n\n```rust\nuse clap::{arg, command};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(\n            arg!(<MODE>)\n                .help(\"What mode to run the program in\")\n                .value_parser([\"fast\", \"slow\"]),\n        )\n        .get_matches();\n\n    // Note, it's safe to call unwrap() because the arg is required\n    match matches\n        .get_one::<String>(\"MODE\")\n        .expect(\"'MODE' is required and parsing will fail if its missing\")\n        .as_str()\n    {\n        \"fast\" => {\n            println!(\"Hare\");\n        }\n        \"slow\" => {\n            println!(\"Tortoise\");\n        }\n        _ => unreachable!(),\n    }\n}\n```\n```console\n$ 04_01_possible --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_01_possible[EXE] <MODE>\n\nArguments:\n  <MODE>  What mode to run the program in [possible values: fast, slow]\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 04_01_possible fast\nHare\n\n$ 04_01_possible slow\nTortoise\n\n$ 04_01_possible medium\n? failed\nerror: invalid value 'medium' for '<MODE>'\n  [possible values: fast, slow]\n\nFor more information, try '--help'.\n\n```\n\nWhen enabling the [`derive` feature][crate::_features], you can use\n[`ValueEnum`][crate::ValueEnum] to take care of the boiler plate for you, giving the same\nresults.\n\n```rust\nuse clap::{arg, builder::PossibleValue, command, value_parser, ValueEnum};\n\n#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\nenum Mode {\n    Fast,\n    Slow,\n}\n\n// Can also be derived with feature flag `derive`\nimpl ValueEnum for Mode {\n    fn value_variants<'a>() -> &'a [Self] {\n        &[Mode::Fast, Mode::Slow]\n    }\n\n    fn to_possible_value(&self) -> Option<PossibleValue> {\n        Some(match self {\n            Mode::Fast => PossibleValue::new(\"fast\").help(\"Run swiftly\"),\n            Mode::Slow => PossibleValue::new(\"slow\").help(\"Crawl slowly but steadily\"),\n        })\n    }\n}\n\nimpl std::fmt::Display for Mode {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        self.to_possible_value()\n            .expect(\"no values are skipped\")\n            .get_name()\n            .fmt(f)\n    }\n}\n\nimpl std::str::FromStr for Mode {\n    type Err = String;\n\n    fn from_str(s: &str) -> Result<Self, Self::Err> {\n        for variant in Self::value_variants() {\n            if variant.to_possible_value().unwrap().matches(s, false) {\n                return Ok(*variant);\n            }\n        }\n        Err(format!(\"invalid variant: {s}\"))\n    }\n}\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(\n            arg!(<MODE>)\n                .help(\"What mode to run the program in\")\n                .value_parser(value_parser!(Mode)),\n        )\n        .get_matches();\n\n    // Note, it's safe to call unwrap() because the arg is required\n    match matches\n        .get_one::<Mode>(\"MODE\")\n        .expect(\"'MODE' is required and parsing will fail if its missing\")\n    {\n        Mode::Fast => {\n            println!(\"Hare\");\n        }\n        Mode::Slow => {\n            println!(\"Tortoise\");\n        }\n    }\n}\n```\n```console\n$ 04_01_enum --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_01_enum[EXE] <MODE>\n\nArguments:\n  <MODE>\n          What mode to run the program in\n\n          Possible values:\n          - fast: Run swiftly\n          - slow: Crawl slowly but steadily\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n\n$ 04_01_enum -h\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_01_enum[EXE] <MODE>\n\nArguments:\n  <MODE>  What mode to run the program in [possible values: fast, slow]\n\nOptions:\n  -h, --help     Print help (see more with '--help')\n  -V, --version  Print version\n\n$ 04_01_enum fast\nHare\n\n$ 04_01_enum slow\nTortoise\n\n$ 04_01_enum medium\n? failed\nerror: invalid value 'medium' for '<MODE>'\n  [possible values: fast, slow]\n\nFor more information, try '--help'.\n\n```\n\n### Validated values\n\nMore generally, you can validate and parse into any data type with [`Arg::value_parser`].\n\n```rust\nuse clap::{arg, command, value_parser};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(\n            arg!(<PORT>)\n                .help(\"Network port to use\")\n                .value_parser(value_parser!(u16).range(1..)),\n        )\n        .get_matches();\n\n    // Note, it's safe to call unwrap() because the arg is required\n    let port: u16 = *matches\n        .get_one::<u16>(\"PORT\")\n        .expect(\"'PORT' is required and parsing will fail if its missing\");\n    println!(\"PORT = {port}\");\n}\n```\n```console\n$ 04_02_parse --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_02_parse[EXE] <PORT>\n\nArguments:\n  <PORT>  Network port to use\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 04_02_parse 22\nPORT = 22\n\n$ 04_02_parse foobar\n? failed\nerror: invalid value 'foobar' for '<PORT>': invalid digit found in string\n\nFor more information, try '--help'.\n\n$ 04_02_parse_derive 0\n? failed\nerror: invalid value '0' for '<PORT>': 0 is not in 1..=65535\n\nFor more information, try '--help'.\n\n```\n\nA [custom parser][TypedValueParser] can be used to improve the error messages or provide additional validation:\n\n```rust\nuse std::ops::RangeInclusive;\n\nuse clap::{arg, command};\n\nfn main() {\n    let matches = command!() // requires `cargo` feature\n        .arg(\n            arg!(<PORT>)\n                .help(\"Network port to use\")\n                .value_parser(port_in_range),\n        )\n        .get_matches();\n\n    // Note, it's safe to call unwrap() because the arg is required\n    let port: u16 = *matches\n        .get_one::<u16>(\"PORT\")\n        .expect(\"'PORT' is required and parsing will fail if its missing\");\n    println!(\"PORT = {port}\");\n}\n\nconst PORT_RANGE: RangeInclusive<usize> = 1..=65535;\n\nfn port_in_range(s: &str) -> Result<u16, String> {\n    let port: usize = s\n        .parse()\n        .map_err(|_| format!(\"`{s}` isn't a port number\"))?;\n    if PORT_RANGE.contains(&port) {\n        Ok(port as u16)\n    } else {\n        Err(format!(\n            \"port not in range {}-{}\",\n            PORT_RANGE.start(),\n            PORT_RANGE.end()\n        ))\n    }\n}\n```\n```console\n$ 04_02_validate --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_02_validate[EXE] <PORT>\n\nArguments:\n  <PORT>  Network port to use\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n\n$ 04_02_validate 22\nPORT = 22\n\n$ 04_02_validate foobar\n? failed\nerror: invalid value 'foobar' for '<PORT>': `foobar` isn't a port number\n\nFor more information, try '--help'.\n\n$ 04_02_validate 0\n? failed\nerror: invalid value '0' for '<PORT>': port not in range 1-65535\n\nFor more information, try '--help'.\n\n```\n\nSee [`Arg::value_parser`][crate::Arg::value_parser] for more details.\n\n### Argument Relations\n\nYou can declare dependencies or conflicts between [`Arg`][crate::Arg]s or even\n[`ArgGroup`][crate::ArgGroup]s.\n\n[`ArgGroup`][crate::ArgGroup]s  make it easier to declare relations instead of having to list\neach individually, or when you want a rule to apply \"any but not all\" arguments.\n\nPerhaps the most common use of [`ArgGroup`][crate::ArgGroup]s is to require one and *only* one\nargument to be present out of a given set. Imagine that you had multiple arguments, and you\nwant one of them to be required, but making all of them required isn't feasible because perhaps\nthey conflict with each other.\n\n```rust\nuse std::path::PathBuf;\n\nuse clap::{arg, command, value_parser, ArgAction, ArgGroup};\n\nfn main() {\n    // Create application like normal\n    let matches = command!() // requires `cargo` feature\n        // Add the version arguments\n        .arg(arg!(--\"set-ver\" <VER> \"set version manually\"))\n        .arg(arg!(--major         \"auto inc major\").action(ArgAction::SetTrue))\n        .arg(arg!(--minor         \"auto inc minor\").action(ArgAction::SetTrue))\n        .arg(arg!(--patch         \"auto inc patch\").action(ArgAction::SetTrue))\n        // Create a group, make it required, and add the above arguments\n        .group(\n            ArgGroup::new(\"vers\")\n                .required(true)\n                .args([\"set-ver\", \"major\", \"minor\", \"patch\"]),\n        )\n        // Arguments can also be added to a group individually, these two arguments\n        // are part of the \"input\" group which is not required\n        .arg(\n            arg!([INPUT_FILE] \"some regular input\")\n                .value_parser(value_parser!(PathBuf))\n                .group(\"input\"),\n        )\n        .arg(\n            arg!(--\"spec-in\" <SPEC_IN> \"some special input argument\")\n                .value_parser(value_parser!(PathBuf))\n                .group(\"input\"),\n        )\n        // Now let's assume we have a -c [config] argument which requires one of\n        // (but **not** both) the \"input\" arguments\n        .arg(\n            arg!(config: -c <CONFIG>)\n                .value_parser(value_parser!(PathBuf))\n                .requires(\"input\"),\n        )\n        .get_matches();\n\n    // Let's assume the old version 1.2.3\n    let mut major = 1;\n    let mut minor = 2;\n    let mut patch = 3;\n\n    // See if --set-ver was used to set the version manually\n    let version = if let Some(ver) = matches.get_one::<String>(\"set-ver\") {\n        ver.to_owned()\n    } else {\n        // Increment the one requested (in a real program, we'd reset the lower numbers)\n        let (maj, min, pat) = (\n            matches.get_flag(\"major\"),\n            matches.get_flag(\"minor\"),\n            matches.get_flag(\"patch\"),\n        );\n        match (maj, min, pat) {\n            (true, _, _) => major += 1,\n            (_, true, _) => minor += 1,\n            (_, _, true) => patch += 1,\n            _ => unreachable!(),\n        };\n        format!(\"{major}.{minor}.{patch}\")\n    };\n\n    println!(\"Version: {version}\");\n\n    // Check for usage of -c\n    if matches.contains_id(\"config\") {\n        let input = matches\n            .get_one::<PathBuf>(\"INPUT_FILE\")\n            .unwrap_or_else(|| matches.get_one::<PathBuf>(\"spec-in\").unwrap())\n            .display();\n        println!(\n            \"Doing work using input {} and config {}\",\n            input,\n            matches.get_one::<PathBuf>(\"config\").unwrap().display()\n        );\n    }\n}\n```\n```console\n$ 04_03_relations --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_03_relations[EXE] [OPTIONS] <--set-ver <VER>|--major|--minor|--patch> [INPUT_FILE]\n\nArguments:\n  [INPUT_FILE]  some regular input\n\nOptions:\n      --set-ver <VER>      set version manually\n      --major              auto inc major\n      --minor              auto inc minor\n      --patch              auto inc patch\n      --spec-in <SPEC_IN>  some special input argument\n  -c <CONFIG>              \n  -h, --help               Print help\n  -V, --version            Print version\n\n$ 04_03_relations\n? failed\nerror: the following required arguments were not provided:\n  <--set-ver <VER>|--major|--minor|--patch>\n\nUsage: 04_03_relations[EXE] <--set-ver <VER>|--major|--minor|--patch> [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_03_relations --major\nVersion: 2.2.3\n\n$ 04_03_relations --major --minor\n? failed\nerror: the argument '--major' cannot be used with '--minor'\n\nUsage: 04_03_relations[EXE] <--set-ver <VER>|--major|--minor|--patch> [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_03_relations --major -c config.toml\n? failed\nerror: the following required arguments were not provided:\n  <INPUT_FILE|--spec-in <SPEC_IN>>\n\nUsage: 04_03_relations[EXE] -c <CONFIG> <--set-ver <VER>|--major|--minor|--patch> <INPUT_FILE|--spec-in <SPEC_IN>>\n\nFor more information, try '--help'.\n\n$ 04_03_relations --major -c config.toml --spec-in input.txt\nVersion: 2.2.3\nDoing work using input input.txt and config config.toml\n\n```\n\n### Custom Validation\n\nAs a last resort, you can create custom errors with the basics of clap's formatting.\n\n```rust\nuse std::path::PathBuf;\n\nuse clap::error::ErrorKind;\nuse clap::{arg, command, value_parser, ArgAction};\n\nfn main() {\n    // Create application like normal\n    let mut cmd = command!() // requires `cargo` feature\n        // Add the version arguments\n        .arg(arg!(--\"set-ver\" <VER> \"set version manually\"))\n        .arg(arg!(--major         \"auto inc major\").action(ArgAction::SetTrue))\n        .arg(arg!(--minor         \"auto inc minor\").action(ArgAction::SetTrue))\n        .arg(arg!(--patch         \"auto inc patch\").action(ArgAction::SetTrue))\n        // Arguments can also be added to a group individually, these two arguments\n        // are part of the \"input\" group which is not required\n        .arg(arg!([INPUT_FILE] \"some regular input\").value_parser(value_parser!(PathBuf)))\n        .arg(\n            arg!(--\"spec-in\" <SPEC_IN> \"some special input argument\")\n                .value_parser(value_parser!(PathBuf)),\n        )\n        // Now let's assume we have a -c [config] argument which requires one of\n        // (but **not** both) the \"input\" arguments\n        .arg(arg!(config: -c <CONFIG>).value_parser(value_parser!(PathBuf)));\n    let matches = cmd.get_matches_mut();\n\n    // Let's assume the old version 1.2.3\n    let mut major = 1;\n    let mut minor = 2;\n    let mut patch = 3;\n\n    // See if --set-ver was used to set the version manually\n    let version = if let Some(ver) = matches.get_one::<String>(\"set-ver\") {\n        if matches.get_flag(\"major\") || matches.get_flag(\"minor\") || matches.get_flag(\"patch\") {\n            cmd.error(\n                ErrorKind::ArgumentConflict,\n                \"Can't do relative and absolute version change\",\n            )\n            .exit();\n        }\n        ver.to_string()\n    } else {\n        // Increment the one requested (in a real program, we'd reset the lower numbers)\n        let (maj, min, pat) = (\n            matches.get_flag(\"major\"),\n            matches.get_flag(\"minor\"),\n            matches.get_flag(\"patch\"),\n        );\n        match (maj, min, pat) {\n            (true, false, false) => major += 1,\n            (false, true, false) => minor += 1,\n            (false, false, true) => patch += 1,\n            _ => {\n                cmd.error(\n                    ErrorKind::ArgumentConflict,\n                    \"Can only modify one version field\",\n                )\n                .exit();\n            }\n        };\n        format!(\"{major}.{minor}.{patch}\")\n    };\n\n    println!(\"Version: {version}\");\n\n    // Check for usage of -c\n    if matches.contains_id(\"config\") {\n        let input = matches\n            .get_one::<PathBuf>(\"INPUT_FILE\")\n            .or_else(|| matches.get_one::<PathBuf>(\"spec-in\"))\n            .unwrap_or_else(|| {\n                cmd.error(\n                    ErrorKind::MissingRequiredArgument,\n                    \"INPUT_FILE or --spec-in is required when using --config\",\n                )\n                .exit()\n            })\n            .display();\n        println!(\n            \"Doing work using input {} and config {}\",\n            input,\n            matches.get_one::<PathBuf>(\"config\").unwrap().display()\n        );\n    }\n}\n```\n```console\n$ 04_04_custom --help\nA simple to use, efficient, and full-featured Command Line Argument Parser\n\nUsage: 04_04_custom[EXE] [OPTIONS] [INPUT_FILE]\n\nArguments:\n  [INPUT_FILE]  some regular input\n\nOptions:\n      --set-ver <VER>      set version manually\n      --major              auto inc major\n      --minor              auto inc minor\n      --patch              auto inc patch\n      --spec-in <SPEC_IN>  some special input argument\n  -c <CONFIG>              \n  -h, --help               Print help\n  -V, --version            Print version\n\n$ 04_04_custom\n? failed\nerror: Can only modify one version field\n\nUsage: 04_04_custom[EXE] [OPTIONS] [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_04_custom --major\nVersion: 2.2.3\n\n$ 04_04_custom --major --minor\n? failed\nerror: Can only modify one version field\n\nUsage: 04_04_custom[EXE] [OPTIONS] [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_04_custom --major -c config.toml\n? failed\nVersion: 2.2.3\nerror: INPUT_FILE or --spec-in is required when using --config\n\nUsage: 04_04_custom[EXE] [OPTIONS] [INPUT_FILE]\n\nFor more information, try '--help'.\n\n$ 04_04_custom --major -c config.toml --spec-in input.txt\nVersion: 2.2.3\nDoing work using input input.txt and config config.toml\n\n```\n\n## Testing\n\nclap reports most development errors as `debug_assert!`s.  Rather than checking every\nsubcommand, you should have a test that calls\n[`Command::debug_assert`][crate::Command::debug_assert]:\n```rust,no_run\nuse clap::{arg, command, value_parser};\n\nfn main() {\n    let matches = cmd().get_matches();\n\n    // Note, it's safe to call unwrap() because the arg is required\n    let port: usize = *matches\n        .get_one::<usize>(\"PORT\")\n        .expect(\"'PORT' is required and parsing will fail if its missing\");\n    println!(\"PORT = {port}\");\n}\n\nfn cmd() -> clap::Command {\n    command!() // requires `cargo` feature\n        .arg(\n            arg!(<PORT>)\n                .help(\"Network port to use\")\n                .value_parser(value_parser!(usize)),\n        )\n}\n\n#[test]\nfn verify_cmd() {\n    cmd().debug_assert();\n}\n```\n\n## Next Steps\n\n- [Cookbook][crate::_cookbook] for application-focused examples\n- Explore more features in the [API reference][super]\n\nFor support, see [Discussions](https://github.com/clap-rs/clap/discussions)","links":{"crate::ArgAction::Set":78,"crate::_cookbook":17,"crate::_features":2,"crate::Arg":38,"crate::command!":76,"crate::ValueEnum":44,"super":81,"crate::ArgGroup":39,"crate::_faq#when-should-i-use-the-builder-vs-derive-apis":18,"crate::ArgAction::Append":24,"crate::Arg::default_value":61,"crate::Arg::value_parser":36,"`Arg`":38,"crate::ArgAction::Count":27,"`Arg::value_parser`":36,"crate::Command::subcommand":79,"crate::builder::PossibleValuesParser":80,"crate::ArgAction":77,"crate::Command::propagate_version":33,"Arg::action":23,"crate::Arg::required":29,"crate::Command":21,"`Command::next_line_help`":22,"crate::Command::arg_required_else_help":32,"crate::value_parser!":34,"crate::Command::subcommand_required":31,"TypedValueParser":37,"crate::Command::debug_assert":41},"attrs":["#[<cfg>(feature = \"unstable-doc\")]","#[allow(unused_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"82":{"id":82,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[88,1],"end":[88,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"use":{"source":"clap_builder","name":"clap_builder","id":83,"is_glob":true}}}},"paths":{"0":{"crate_id":0,"path":["clap","_cookbook","cargo_example"],"kind":"module"},"1762":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2089":{"crate_id":30,"path":["strsim","RowId"],"kind":"struct"},"327":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1208":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1535":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedU64ValueParser"],"kind":"struct"},"654":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Indices"],"kind":"struct"},"2416":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2743":{"crate_id":15,"path":["addr2line"],"kind":"module"},"100":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"981":{"crate_id":3,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1862":{"crate_id":4,"path":["compiler_builtins"],"kind":"module"},"2189":{"crate_id":3,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"427":{"crate_id":20,"path":["clap_builder","parser","parser","ParseState"],"kind":"enum"},"1308":{"crate_id":20,"path":["clap_builder","error","format","Escape"],"kind":"struct"},"754":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1635":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2516":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppFlags"],"kind":"struct"},"200":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1081":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1962":{"crate_id":3,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1408":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"527":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"2289":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"854":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1735":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2616":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"300":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1181":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2062":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1508":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"627":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2389":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"954":{"crate_id":1,"path":["std","sync","poison","rwlock","RwLockReadGuard"],"kind":"struct"},"1835":{"crate_id":20,"path":["clap_builder","builder","os_str","inner","Inner"],"kind":"enum"},"2716":{"crate_id":18,"path":["memchr"],"kind":"module"},"2162":{"crate_id":2,"path":["core","iter"],"kind":"module"},"400":{"crate_id":2,"path":["core","sync","atomic","AtomicPrimitive"],"kind":"trait"},"1281":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1608":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"727":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2489":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1054":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"173":{"crate_id":32,"path":["rustix","ioctl","patterns","IntegerSetter"],"kind":"struct"},"1935":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2262":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"500":{"crate_id":6,"path":["libc","unix","linux_like","linux","xsk_tx_metadata_completion"],"kind":"struct"},"1381":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1708":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"827":{"crate_id":18,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"2589":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"273":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1154":{"crate_id":3,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2362":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"600":{"crate_id":32,"path":["rustix","backend","reg","ArgReg"],"kind":"struct"},"1481":{"crate_id":33,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg"],"kind":"struct"},"927":{"crate_id":2,"path":["core","ops","range","OneSidedRangeBound"],"kind":"enum"},"1808":{"crate_id":33,"path":["linux_raw_sys","general","epoll_params"],"kind":"struct"},"2689":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"373":{"crate_id":3,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1254":{"crate_id":3,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2135":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2462":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"700":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1581":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1027":{"crate_id":18,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"146":{"crate_id":18,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"1908":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"473":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1354":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2235":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1681":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"800":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2562":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1127":{"crate_id":34,"path":["bitflags","traits","Flags"],"kind":"trait"},"246":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2008":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2335":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"573":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1454":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1781":{"crate_id":33,"path":["linux_raw_sys","general","sigval"],"kind":"union"},"900":{"crate_id":35,"path":["unicode_width"],"kind":"module"},"19":{"crate_id":20,"path":["clap_builder","derive","Parser"],"kind":"trait"},"2662":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1227":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"346":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2108":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2435":{"crate_id":2,"path":["core","marker","variance","PhantomInvariant"],"kind":"struct"},"673":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1554":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"119":{"crate_id":32,"path":["rustix","termios","types","OptionalActions"],"kind":"enum"},"1000":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2762":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"446":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1327":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2208":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2535":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"773":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1654":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1100":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_quality"],"kind":"struct"},"219":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1981":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"546":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1427":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2308":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2635":{"crate_id":33,"path":["linux_raw_sys","general","kernel_sigaction"],"kind":"struct"},"873":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1754":{"crate_id":3,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1200":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"319":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2081":{"crate_id":3,"path":["alloc","string","Drain"],"kind":"struct"},"646":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1527":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2408":{"crate_id":28,"path":["is_terminal_polyfill","sealed","Sealed"],"kind":"trait"},"1854":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"92":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"973":{"crate_id":33,"path":["linux_raw_sys","general","fscrypt_provisioning_key_payload"],"kind":"struct"},"2735":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1300":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"419":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2181":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2508":{"crate_id":33,"path":["linux_raw_sys","general","fsxattr"],"kind":"struct"},"746":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1627":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1954":{"crate_id":1,"path":["std","collections","hash","set","VacantEntry"],"kind":"struct"},"192":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1073":{"crate_id":18,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"1400":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"519":{"crate_id":2,"path":["core","core_arch","simd","f16x4"],"kind":"struct"},"2281":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2608":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"846":{"crate_id":33,"path":["linux_raw_sys","general","__IncompleteArrayField"],"kind":"struct"},"1727":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2054":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"292":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1173":{"crate_id":1,"path":["std","sync","lazy_lock","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"619":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1500":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2381":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2708":{"crate_id":32,"path":["rustix","termios","types","OutputModes"],"kind":"struct"},"946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1827":{"crate_id":16,"path":["gimli"],"kind":"module"},"2154":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"392":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1273":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"719":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1600":{"crate_id":33,"path":["linux_raw_sys","general","vfs_cap_data"],"kind":"struct"},"2481":{"crate_id":34,"path":["bitflags","iter","IterNames"],"kind":"struct"},"165":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1046":{"crate_id":3,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1927":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1373":{"crate_id":3,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"492":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2254":{"crate_id":2,"path":["core","random","Random"],"kind":"trait"},"819":{"crate_id":33,"path":["linux_raw_sys","general","clone_args"],"kind":"struct"},"1700":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2581":{"crate_id":33,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1"],"kind":"union"},"2027":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"265":{"crate_id":24,"path":["anstream","auto","AutoStream"],"kind":"struct"},"1146":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1473":{"crate_id":2,"path":["core","clone","UseCloned"],"kind":"trait"},"592":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_event"],"kind":"struct"},"2354":{"crate_id":33,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_5"],"kind":"struct"},"2681":{"crate_id":3,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"919":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"38":{"crate_id":20,"path":["clap_builder","builder","arg","Arg"],"kind":"struct"},"1800":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2127":{"crate_id":33,"path":["linux_raw_sys","general","statmount"],"kind":"struct"},"365":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1246":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_pmkid_cand"],"kind":"struct"},"1573":{"crate_id":18,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"692":{"crate_id":3,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2454":{"crate_id":33,"path":["linux_raw_sys","general","timeval"],"kind":"struct"},"138":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1019":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1900":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2227":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"465":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1346":{"crate_id":3,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"792":{"crate_id":33,"path":["linux_raw_sys","general","vfs_cap_data__bindgen_ty_1"],"kind":"struct"},"1673":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2554":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1119":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2000":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2327":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"565":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1446":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"892":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"11":{"crate_id":0,"path":["clap","_cookbook","pacman"],"kind":"module"},"1773":{"crate_id":20,"path":["clap_builder","builder","command","TermWidth"],"kind":"struct"},"2654":{"crate_id":33,"path":["linux_raw_sys","general","user_desc"],"kind":"struct"},"338":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1219":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2100":{"crate_id":22,"path":["clap_lex","ParsedArg"],"kind":"struct"},"1546":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"665":{"crate_id":3,"path":["alloc","alloc","alloc"],"kind":"function"},"2427":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"992":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"111":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1873":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2754":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2200":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"438":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1319":{"crate_id":33,"path":["linux_raw_sys","general","pollfd"],"kind":"struct"},"1646":{"crate_id":1,"path":["std","path","NormalizeError"],"kind":"struct"},"765":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2527":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1092":{"crate_id":33,"path":["linux_raw_sys","elf","Elf_Dyn_Union"],"kind":"union"},"211":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1973":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2300":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"538":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1419":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1746":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"865":{"crate_id":33,"path":["linux_raw_sys","general","__kernel_old_itimerval"],"kind":"struct"},"2627":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"311":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1192":{"crate_id":20,"path":["clap_builder","builder","value_parser","UnknownArgumentValueParser"],"kind":"struct"},"2073":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2400":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1519":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1846":{"crate_id":18,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"84":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"965":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","SubCommand"],"kind":"struct"},"2727":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"411":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1292":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2173":{"crate_id":1,"path":["std","sync","mpmc","TryIter"],"kind":"struct"},"2500":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"738":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1619":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_sys_offset_extended"],"kind":"struct"},"1065":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"184":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_clock_caps"],"kind":"struct"},"1946":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1392":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2273":{"crate_id":26,"path":["utf8parse","types","State"],"kind":"enum"},"1719":{"crate_id":20,"path":["clap_builder","parser","validator","Conflicts"],"kind":"struct"},"838":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2600":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1165":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"284":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2046":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2373":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"611":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1492":{"crate_id":32,"path":["rustix","termios","types","QueueSelector"],"kind":"enum"},"1819":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"938":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2700":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1265":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"384":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2146":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2473":{"crate_id":6,"path":["libc","unix","linux_like","statx_timestamp"],"kind":"struct"},"711":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_pin_desc"],"kind":"struct"},"1592":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1919":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"157":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1038":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"484":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1365":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2246":{"crate_id":33,"path":["linux_raw_sys","general","itimerval"],"kind":"struct"},"2573":{"crate_id":3,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1692":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2019":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"257":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1138":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"584":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1465":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2346":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2673":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"911":{"crate_id":32,"path":["rustix"],"kind":"module"},"30":{"crate_id":20,"path":["clap_builder","derive","Subcommand"],"kind":"trait"},"1792":{"crate_id":3,"path":["alloc","collections","btree","set","entry","VacantEntry"],"kind":"struct"},"1238":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"357":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2119":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"684":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1565":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2446":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1892":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"130":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1011":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1338":{"crate_id":21,"path":["anstyle","color","NullFormatter"],"kind":"struct"},"457":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2219":{"crate_id":20,"path":["clap_builder","builder","value_parser","FalseyValueParser"],"kind":"struct"},"784":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1665":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2546":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1992":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"230":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1111":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1438":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"557":{"crate_id":1,"path":["std","sync","poison","rwlock","RwLockWriteGuard"],"kind":"struct"},"2319":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2646":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"3":{"crate_id":0,"path":["clap","_cookbook","escaped_positional"],"kind":"module"},"884":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1765":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2092":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"330":{"crate_id":2,"path":["core","num","niche_types","NonZeroU128Inner"],"kind":"struct"},"1211":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1538":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"657":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2419":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2746":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"103":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"984":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1865":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2192":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"430":{"crate_id":6,"path":["libc","unix","linux_like","linux","xdp_statistics_v1"],"kind":"struct"},"1311":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_extts_event"],"kind":"struct"},"757":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1638":{"crate_id":1,"path":["std","fs","TryLockError"],"kind":"enum"},"2519":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"203":{"crate_id":20,"path":["clap_builder","builder","resettable","IntoResettable"],"kind":"trait"},"1084":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1965":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1411":{"crate_id":33,"path":["linux_raw_sys","general","__sifields__bindgen_ty_6"],"kind":"struct"},"530":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2292":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"857":{"crate_id":3,"path":["alloc","slice","Concat"],"kind":"trait"},"1738":{"crate_id":24,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"2619":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"303":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1184":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2065":{"crate_id":3,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1511":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"630":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2392":{"crate_id":33,"path":["linux_raw_sys","general","__sifields"],"kind":"union"},"957":{"crate_id":20,"path":["clap_builder","parser","parser","Identifier"],"kind":"enum"},"76":{"crate_id":20,"path":["clap_builder","command"],"kind":"macro"},"1838":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2719":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2165":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"403":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1284":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1611":{"crate_id":1,"path":["std","io"],"kind":"module"},"730":{"crate_id":20,"path":["clap_builder","util","flat_set","FlatSet"],"kind":"struct"},"2492":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"176":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1057":{"crate_id":32,"path":["rustix","termios","types","LocalModes"],"kind":"struct"},"1938":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2265":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"503":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1384":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1711":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"830":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2592":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"276":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2038":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2365":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"603":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1484":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"930":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1811":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2692":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"376":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1257":{"crate_id":3,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2138":{"crate_id":3,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1584":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"703":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2465":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1030":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"149":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1911":{"crate_id":2,"path":["core","num","niche_types","U64NotAllOnes"],"kind":"struct"},"476":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1357":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2238":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1684":{"crate_id":2,"path":["core","ops","range","IntoBounds"],"kind":"trait"},"803":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2565":{"crate_id":3,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1130":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"249":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2011":{"crate_id":2,"path":["core","num","niche_types","UsizeNoHighBit"],"kind":"struct"},"2338":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"576":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1457":{"crate_id":20,"path":["clap_builder","builder","value_parser","RangedI64ValueParser"],"kind":"struct"},"1784":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"903":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2665":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1230":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"349":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2111":{"crate_id":3,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2438":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"676":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1557":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1884":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"122":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1003":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2765":{"crate_id":3,"path":["alloc","sync","Weak"],"kind":"struct"},"449":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1330":{"crate_id":3,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2211":{"crate_id":3,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2538":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"776":{"crate_id":3,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1657":{"crate_id":18,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"1103":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"222":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1984":{"crate_id":34,"path":["bitflags","iter","Iter"],"kind":"struct"},"549":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1430":{"crate_id":11,"path":["hashbrown","table","IterHash"],"kind":"struct"},"2311":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2638":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"876":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1757":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"322":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2084":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"649":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1530":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2411":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1857":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","env","Status"],"kind":"struct"},"95":{"crate_id":32,"path":["rustix","ioctl","patterns","Updater"],"kind":"struct"},"976":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2738":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1303":{"crate_id":30,"path":["strsim","GrowingHashmapMapElemChar"],"kind":"struct"},"422":{"crate_id":1,"path":["std","sync","poison","rwlock","RwLock"],"kind":"struct"},"2184":{"crate_id":31,"path":["terminal_size","Width"],"kind":"struct"},"2511":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"749":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1957":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"195":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1076":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1403":{"crate_id":20,"path":["clap_builder","error","ErrorInner"],"kind":"struct"},"522":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2284":{"crate_id":3,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2611":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"849":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1730":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2057":{"crate_id":20,"path":["clap_builder","util","color","ColorChoice"],"kind":"enum"},"295":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1176":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"622":{"crate_id":3,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1503":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2384":{"crate_id":2,"path":["core","str","pattern","Utf8Pattern"],"kind":"enum"},"2711":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"949":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1830":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1276":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"395":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2157":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"722":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1603":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2484":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"168":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1049":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1930":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1376":{"crate_id":2,"path":["core","fmt","FormattingOptions"],"kind":"struct"},"495":{"crate_id":1,"path":["std","sys","net","connection","socket","unix","Socket"],"kind":"struct"},"2257":{"crate_id":3,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"822":{"crate_id":33,"path":["linux_raw_sys","general","__user_cap_header_struct"],"kind":"struct"},"1703":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2584":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2030":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"268":{"crate_id":1,"path":["std","sys","fs","unix","OpenOptions"],"kind":"struct"},"1149":{"crate_id":18,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"1476":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"595":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2357":{"crate_id":33,"path":["linux_raw_sys","general","futex_waitv"],"kind":"struct"},"2684":{"crate_id":3,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"922":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1803":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2130":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"368":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1249":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1576":{"crate_id":33,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"695":{"crate_id":20,"path":["clap_builder","error","Error"],"kind":"struct"},"2457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"141":{"crate_id":1,"path":["std","sync","poison","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1022":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1903":{"crate_id":33,"path":["linux_raw_sys","general","dmabuf_cmsg"],"kind":"struct"},"2230":{"crate_id":21,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"468":{"crate_id":1,"path":["std","sys","fs","unix","FilePermissions"],"kind":"struct"},"1349":{"crate_id":33,"path":["linux_raw_sys","general","__old_kernel_stat"],"kind":"struct"},"795":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1676":{"crate_id":33,"path":["linux_raw_sys","general","sigevent"],"kind":"struct"},"2557":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"241":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2003":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2330":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"568":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1449":{"crate_id":33,"path":["linux_raw_sys","general","uffdio_range"],"kind":"struct"},"895":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"14":{"crate_id":0,"path":["clap","_cookbook","typed_derive"],"kind":"module"},"1776":{"crate_id":33,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2657":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"341":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1222":{"crate_id":33,"path":["linux_raw_sys","general","pm_scan_arg"],"kind":"struct"},"2103":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_sys_offset_precise"],"kind":"struct"},"1549":{"crate_id":2,"path":["core","marker","variance","PhantomContravariantLifetime"],"kind":"struct"},"668":{"crate_id":3,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2430":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"995":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mbstate_t"],"kind":"struct"},"1876":{"crate_id":33,"path":["linux_raw_sys","general","file_clone_range"],"kind":"struct"},"2757":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2203":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"441":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1322":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1649":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"768":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2530":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1095":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_block_desc"],"kind":"struct"},"214":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1976":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2303":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"541":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1422":{"crate_id":32,"path":["rustix","termios","types","ControlModes"],"kind":"struct"},"1749":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"868":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2630":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1195":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2076":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2403":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_param"],"kind":"struct"},"641":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"968":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"87":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_bd_ts"],"kind":"struct"},"1849":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2730":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"414":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1295":{"crate_id":18,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"2176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_sud_config"],"kind":"struct"},"2503":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1622":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1068":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"187":{"crate_id":33,"path":["linux_raw_sys","general","winsize"],"kind":"struct"},"1949":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"514":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1395":{"crate_id":33,"path":["linux_raw_sys","general","uffdio_poison"],"kind":"struct"},"2276":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1722":{"crate_id":34,"path":["bitflags","parser","ParseError"],"kind":"struct"},"841":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aria_gcm_128"],"kind":"struct"},"2603":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1168":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"287":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2049":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2376":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"614":{"crate_id":3,"path":["alloc","borrow","Cow"],"kind":"enum"},"1495":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1822":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"941":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2703":{"crate_id":24,"path":["anstream"],"kind":"module"},"1268":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"387":{"crate_id":33,"path":["linux_raw_sys","general","file_dedupe_range_info"],"kind":"struct"},"2149":{"crate_id":3,"path":["alloc","slice","Join"],"kind":"trait"},"2476":{"crate_id":33,"path":["linux_raw_sys","general","linux_dirent64"],"kind":"struct"},"714":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1595":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1922":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"160":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1041":{"crate_id":33,"path":["linux_raw_sys","general","fscrypt_get_policy_ex_arg__bindgen_ty_1"],"kind":"union"},"487":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1368":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2249":{"crate_id":18,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"2576":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"814":{"crate_id":32,"path":["rustix","termios","types","SpecialCode"],"kind":"struct"},"1695":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2022":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"260":{"crate_id":2,"path":["core","random","RandomSource"],"kind":"trait"},"1141":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"587":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1468":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2349":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","fpos64_t"],"kind":"struct"},"914":{"crate_id":29,"path":["anstyle_query"],"kind":"module"},"1795":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1241":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"360":{"crate_id":2,"path":["core","core_simd","swizzle","extract","Extract"],"kind":"struct"},"2122":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"687":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1568":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2449":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1895":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_rollover_stats"],"kind":"struct"},"133":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1014":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"1341":{"crate_id":34,"path":["bitflags","parser","ParseErrorKind"],"kind":"enum"},"460":{"crate_id":33,"path":["linux_raw_sys","general","robust_list_head"],"kind":"struct"},"2222":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2549":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"787":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1668":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1995":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"233":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1114":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1441":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"560":{"crate_id":24,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"2322":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2649":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_xdp"],"kind":"struct"},"6":{"crate_id":0,"path":["clap","_cookbook","git"],"kind":"module"},"887":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1768":{"crate_id":20,"path":["clap_builder","error","context","ContextValue"],"kind":"enum"},"2095":{"crate_id":3,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"333":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1214":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"660":{"crate_id":6,"path":["libc","unix","linux_like","linux","xdp_ring_offset_v1"],"kind":"struct"},"1541":{"crate_id":33,"path":["linux_raw_sys","general","robust_list"],"kind":"struct"},"2422":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2749":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"106":{"crate_id":33,"path":["linux_raw_sys","general","vgetrandom_opaque_params"],"kind":"struct"},"987":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1868":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2195":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"433":{"crate_id":3,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1314":{"crate_id":33,"path":["linux_raw_sys","general","__sifields__bindgen_ty_7"],"kind":"struct"},"760":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1641":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2522":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"206":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1087":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1968":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"1414":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"533":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2295":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"860":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1741":{"crate_id":20,"path":["clap_builder","output","fmt","Colorizer"],"kind":"struct"},"2622":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2068":{"crate_id":34,"path":["bitflags","traits","Bits"],"kind":"trait"},"306":{"crate_id":20,"path":["clap_builder","builder","arg_predicate","ArgPredicate"],"kind":"enum"},"1187":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ArgMatches"],"kind":"struct"},"1514":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"633":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2395":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"960":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","tcp_info"],"kind":"struct"},"2722":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2168":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"406":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1287":{"crate_id":3,"path":["alloc","vec","Vec"],"kind":"struct"},"1614":{"crate_id":20,"path":["clap_builder","error","format","RichFormatter"],"kind":"struct"},"733":{"crate_id":25,"path":["anstyle_parse","params","Params"],"kind":"struct"},"2495":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"179":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1060":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2268":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"506":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1387":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1714":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_req3"],"kind":"struct"},"833":{"crate_id":36,"path":["clap_derive","Subcommand"],"kind":"proc_derive"},"2595":{"crate_id":33,"path":["linux_raw_sys","general","fscrypt_key_specifier__bindgen_ty_1"],"kind":"union"},"279":{"crate_id":20,"path":["clap_builder","parser","error","MatchesError"],"kind":"enum"},"1160":{"crate_id":3,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2041":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2368":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"606":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1487":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"933":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2695":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"379":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1260":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2141":{"crate_id":3,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1587":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"706":{"crate_id":35,"path":["unicode_width","UnicodeWidthChar"],"kind":"trait"},"2468":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"1033":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"152":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1914":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"479":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1360":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2241":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1687":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"806":{"crate_id":2,"path":["core","core_simd","swizzle","shift_elements_right","Shift"],"kind":"struct"},"2568":{"crate_id":2,"path":["core","ffi","va_list","sealed","Sealed"],"kind":"trait"},"1133":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"252":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2014":{"crate_id":1,"path":["std","sys","process","unix","common","Stdio"],"kind":"enum"},"2341":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"579":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1460":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1787":{"crate_id":34,"path":["bitflags"],"kind":"module"},"906":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2668":{"crate_id":36,"path":["clap_derive"],"kind":"module"},"352":{"crate_id":1,"path":["std","sys","process","unix","unix","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1233":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2114":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2441":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"679":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1560":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1887":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"125":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1006":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2768":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"452":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1333":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2214":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2541":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"779":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1660":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1106":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"225":{"crate_id":24,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"1987":{"crate_id":6,"path":["libc","unix","linux_like","linux","xdp_options"],"kind":"struct"},"552":{"crate_id":1,"path":["std","sys","fs","unix","FileType"],"kind":"struct"},"1433":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2314":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"879":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2641":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1206":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"325":{"crate_id":33,"path":["linux_raw_sys","general","page_region"],"kind":"struct"},"2087":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"652":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1533":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2414":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1860":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"98":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"979":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2741":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1306":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"425":{"crate_id":3,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2187":{"crate_id":20,"path":["clap_builder","builder","value_parser","PathBufValueParser"],"kind":"struct"},"2514":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"752":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1633":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_xsk_tx_metadata_union"],"kind":"union"},"1960":{"crate_id":33,"path":["linux_raw_sys","general","fsuuid2"],"kind":"struct"},"198":{"crate_id":6,"path":["libc","unix","linux_like","statx"],"kind":"struct"},"1079":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1406":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"525":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2287":{"crate_id":33,"path":["linux_raw_sys","general","uffdio_move"],"kind":"struct"},"2614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"852":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_michaelmicfailure"],"kind":"struct"},"1733":{"crate_id":3,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2060":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"298":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1179":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"625":{"crate_id":11,"path":["hashbrown","control","bitmask","BitMask"],"kind":"struct"},"1506":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2387":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2714":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"71":{"crate_id":0,"path":["clap","_tutorial"],"kind":"module"},"952":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1833":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1279":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"398":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2160":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"725":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1606":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2487":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"171":{"crate_id":32,"path":["rustix","termios","types","Action"],"kind":"enum"},"1052":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1933":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1379":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"498":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2260":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"825":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1706":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2587":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2033":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"271":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1152":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1479":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"598":{"crate_id":3,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2360":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2687":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"925":{"crate_id":33,"path":["linux_raw_sys","general","rlimit64"],"kind":"struct"},"1806":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"44":{"crate_id":20,"path":["clap_builder","derive","ValueEnum"],"kind":"trait"},"2133":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"371":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1252":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1579":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"698":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2460":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"144":{"crate_id":21,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"1025":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1906":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2233":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"471":{"crate_id":3,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1352":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"798":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1679":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"2560":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"244":{"crate_id":1,"path":["std","sys","fs","unix","ReadDir"],"kind":"struct"},"1125":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2006":{"crate_id":20,"path":["clap_builder","error","format","KindFormatter"],"kind":"struct"},"1452":{"crate_id":3,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"571":{"crate_id":2,"path":["core","core_arch","simd","f16x16"],"kind":"struct"},"2333":{"crate_id":33,"path":["linux_raw_sys","general","inodes_stat_t"],"kind":"struct"},"898":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17":{"crate_id":0,"path":["clap","_cookbook"],"kind":"module"},"1779":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2660":{"crate_id":33,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"344":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1225":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2106":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1552":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"671":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2433":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"117":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1879":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2760":{"crate_id":1,"path":["std","io","pipe","PipeReader"],"kind":"struct"},"2206":{"crate_id":30,"path":["strsim","StrSimError"],"kind":"enum"},"444":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1325":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1652":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"771":{"crate_id":3,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2533":{"crate_id":3,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1098":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"217":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1979":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2306":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"544":{"crate_id":2,"path":["core","num","niche_types","NonZeroU32Inner"],"kind":"struct"},"1425":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1752":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"871":{"crate_id":18,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"2633":{"crate_id":32,"path":["rustix","termios","types","SpecialCodes"],"kind":"struct"},"317":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1198":{"crate_id":33,"path":["linux_raw_sys","general","__kernel_itimerspec"],"kind":"struct"},"2079":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2406":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"644":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_elf64_rela"],"kind":"struct"},"1525":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"971":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"90":{"crate_id":6,"path":["libc","unix","linux_like","linux","xsk_tx_metadata_request"],"kind":"struct"},"1852":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2733":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"417":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_ccm_128"],"kind":"struct"},"1298":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2179":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2506":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"744":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1625":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1071":{"crate_id":1,"path":["std","sync","poison","mutex","MappedMutexGuard"],"kind":"struct"},"190":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1952":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_sm4_gcm"],"kind":"struct"},"517":{"crate_id":3,"path":["alloc","sync","Arc"],"kind":"struct"},"1398":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2279":{"crate_id":2,"path":["core","intrinsics","AtomicOrdering"],"kind":"enum"},"1725":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"844":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2606":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1171":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"290":{"crate_id":20,"path":["clap_builder","output","fmt","Stream"],"kind":"enum"},"2052":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2379":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"617":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1498":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1825":{"crate_id":32,"path":["rustix","ioctl","patterns","NoArg"],"kind":"struct"},"944":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2706":{"crate_id":20,"path":["clap_builder","error","format","ErrorFormatter"],"kind":"trait"},"1271":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ptp_perout_request_2"],"kind":"union"},"390":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2152":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2479":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"717":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1598":{"crate_id":3,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1925":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"163":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1044":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"490":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1371":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2252":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2579":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","lru","Lru"],"kind":"struct"},"817":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1698":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1144":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"263":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2025":{"crate_id":25,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"590":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1471":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2352":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2679":{"crate_id":20,"path":["clap_builder","builder","value_parser","StringValueParser"],"kind":"struct"},"917":{"crate_id":3,"path":["alloc","collections","btree","set","entry","OccupiedEntry"],"kind":"struct"},"1798":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1244":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"363":{"crate_id":23,"path":["unicase","unicode","Unicode"],"kind":"struct"},"2125":{"crate_id":33,"path":["linux_raw_sys","general","statfs"],"kind":"struct"},"690":{"crate_id":33,"path":["linux_raw_sys","general","flock"],"kind":"struct"},"1571":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2452":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1898":{"crate_id":3,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"136":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1017":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1344":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"463":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2225":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","ValuesRef"],"kind":"struct"},"2552":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"790":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1671":{"crate_id":33,"path":["linux_raw_sys","general","__sifields__bindgen_ty_1"],"kind":"struct"},"1998":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"236":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1117":{"crate_id":27,"path":["colorchoice","ColorChoice"],"kind":"enum"},"1444":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"563":{"crate_id":32,"path":["rustix","termios","types","SpecialCodeIndex"],"kind":"struct"},"2325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","fanotify_event_info_error"],"kind":"struct"},"2652":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"9":{"crate_id":0,"path":["clap","_cookbook","multicall_busybox"],"kind":"module"},"890":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory"],"kind":"trait"},"1771":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2098":{"crate_id":3,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"336":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1217":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"663":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1544":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2425":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2752":{"crate_id":20,"path":["clap_builder","builder","os_str","OsStr"],"kind":"struct"},"109":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"990":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"1871":{"crate_id":1,"path":["std"],"kind":"module"},"2198":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"436":{"crate_id":15,"path":["addr2line","line","LineLocationRangeIter"],"kind":"struct"},"1317":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"763":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1644":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2525":{"crate_id":20,"path":["clap_builder","parser","matches","matched_arg","MatchedArg"],"kind":"struct"},"209":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1090":{"crate_id":1,"path":["std","sys","fs","unix","FileAttr"],"kind":"struct"},"1971":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1417":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"536":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2298":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"863":{"crate_id":20,"path":["clap_builder","builder","styled_str","StyledStr"],"kind":"struct"},"1744":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2625":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2071":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"309":{"crate_id":3,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1190":{"crate_id":1,"path":["std","sys","env","common","EnvStrDebug"],"kind":"struct"},"1517":{"crate_id":3,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"636":{"crate_id":22,"path":["clap_lex","ArgCursor"],"kind":"struct"},"2398":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2725":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"963":{"crate_id":17,"path":["object","read","elf","relocation","RelrIterator"],"kind":"struct"},"1844":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2171":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"409":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1290":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1617":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"736":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2498":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"182":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1063":{"crate_id":6,"path":["libc","unix","linux_like","linux","xsk_tx_metadata"],"kind":"struct"},"1944":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2271":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"509":{"crate_id":33,"path":["linux_raw_sys","general","fscrypt_key"],"kind":"struct"},"1390":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"836":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1717":{"crate_id":33,"path":["linux_raw_sys","general","__kernel_fd_set"],"kind":"struct"},"2598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"282":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1163":{"crate_id":33,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"2044":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2371":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"609":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1490":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"936":{"crate_id":3,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1817":{"crate_id":2,"path":["core","marker","variance","PhantomInvariantLifetime"],"kind":"struct"},"2698":{"crate_id":27,"path":["colorchoice"],"kind":"module"},"382":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1263":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2144":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1590":{"crate_id":33,"path":["linux_raw_sys","general","sigaction"],"kind":"struct"},"709":{"crate_id":3,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2471":{"crate_id":2,"path":["core","pin","PinCoerceUnsized"],"kind":"trait"},"1036":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"155":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1917":{"crate_id":3,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2244":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"482":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1363":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1690":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"809":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2571":{"crate_id":20,"path":["clap_builder","derive","CommandFactory"],"kind":"trait"},"1136":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"255":{"crate_id":2,"path":["core","cell","lazy","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"2017":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2344":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"582":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1463":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1790":{"crate_id":18,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"909":{"crate_id":18,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"28":{"crate_id":20,"path":["clap_builder","derive","Args"],"kind":"trait"},"2671":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"355":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1236":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2117":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2444":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"682":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1563":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1890":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"128":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1009":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValues"],"kind":"struct"},"455":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1336":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2217":{"crate_id":1,"path":["std","env"],"kind":"module"},"2544":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"782":{"crate_id":33,"path":["linux_raw_sys","general","siginfo__bindgen_ty_1"],"kind":"union"},"1663":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1109":{"crate_id":33,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1"],"kind":"struct"},"228":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1990":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"555":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1436":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2317":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1763":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"1":{"crate_id":0,"path":["clap","_cookbook","cargo_example_derive"],"kind":"module"},"882":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2644":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1209":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"328":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2090":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2417":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"655":{"crate_id":33,"path":["linux_raw_sys","general","rusage"],"kind":"struct"},"1536":{"crate_id":24,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"1863":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"101":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Occurrences"],"kind":"struct"},"982":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2744":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1309":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"428":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2190":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2517":{"crate_id":20,"path":["clap_builder","builder","range","ValueRange"],"kind":"struct"},"755":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1636":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1963":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"201":{"crate_id":3,"path":["alloc","collections","btree","set","CursorMutKey"],"kind":"struct"},"1082":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"528":{"crate_id":3,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1409":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2290":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2617":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"855":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1736":{"crate_id":33,"path":["linux_raw_sys","general","kernel_sigset_t"],"kind":"struct"},"2063":{"crate_id":3,"path":["alloc","collections","vec_deque","truncate_front","Dropper"],"kind":"struct"},"301":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1182":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"628":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"1509":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2390":{"crate_id":2,"path":["core","clone","uninit","InitializingSlice"],"kind":"struct"},"2717":{"crate_id":2,"path":["core","core_arch","simd","i32x32"],"kind":"struct"},"955":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1836":{"crate_id":32,"path":["rustix","termios","types","Winsize"],"kind":"struct"},"1282":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"401":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2163":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"728":{"crate_id":2,"path":["core","marker","PointerLike"],"kind":"trait"},"1609":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2490":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","env","Round"],"kind":"enum"},"1936":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_mlme"],"kind":"struct"},"174":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1382":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"501":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2263":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"828":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1709":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2590":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2036":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"274":{"crate_id":3,"path":["alloc","string","ToString"],"kind":"trait"},"1155":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1482":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"601":{"crate_id":3,"path":["alloc","task","Wake"],"kind":"trait"},"2363":{"crate_id":1,"path":["std","io","pipe","PipeWriter"],"kind":"struct"},"2690":{"crate_id":30,"path":["strsim"],"kind":"module"},"928":{"crate_id":3,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1809":{"crate_id":25,"path":["anstyle_parse"],"kind":"module"},"2136":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"374":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1255":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1582":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"701":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2463":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"147":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1028":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1909":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2236":{"crate_id":1,"path":["std","sys","process","unix","unix","ExitStatus"],"kind":"struct"},"474":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1355":{"crate_id":3,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"801":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1682":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2563":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"247":{"crate_id":18,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"1128":{"crate_id":2,"path":["core","num","niche_types","Nanoseconds"],"kind":"struct"},"2009":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1455":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"574":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2336":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"901":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"20":{"crate_id":0,"path":["clap","_derive"],"kind":"module"},"1782":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2663":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"347":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1228":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"2109":{"crate_id":28,"path":["is_terminal_polyfill","IsTerminal"],"kind":"trait"},"1555":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"674":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ptp_perout_request_1"],"kind":"union"},"2436":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1001":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"120":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_statistics"],"kind":"struct"},"1882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2763":{"crate_id":18,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"2209":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"447":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1328":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1655":{"crate_id":20,"path":["clap_builder","builder","value_parser","_AnonymousValueParser"],"kind":"struct"},"774":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2536":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"220":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1101":{"crate_id":33,"path":["linux_raw_sys","general","__kernel_old_timeval"],"kind":"struct"},"1982":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2309":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"547":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1428":{"crate_id":24,"path":["anstream","stream","RawStream"],"kind":"trait"},"1755":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"874":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2636":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"320":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1201":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2082":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"2409":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"647":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"1528":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"974":{"crate_id":3,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"93":{"crate_id":20,"path":["clap_builder","error","Backtrace"],"kind":"struct"},"1855":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2736":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"420":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1301":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2182":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1628":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"747":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2509":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1074":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"193":{"crate_id":9,"path":["miniz_oxide","inflate","output_buffer","InputWrapper"],"kind":"struct"},"1955":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1401":{"crate_id":3,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2282":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1728":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"847":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2609":{"crate_id":32,"path":["rustix","termios","types","Termios"],"kind":"struct"},"1174":{"crate_id":3,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"293":{"crate_id":33,"path":["linux_raw_sys","general","procmap_query"],"kind":"struct"},"2055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2382":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"620":{"crate_id":3,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1501":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1828":{"crate_id":1,"path":["std","sys","net","connection","socket","LookupHost"],"kind":"struct"},"947":{"crate_id":25,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2709":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1274":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"393":{"crate_id":4,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2155":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2482":{"crate_id":2,"path":["core","num","niche_types","NonZeroI128Inner"],"kind":"struct"},"720":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1601":{"crate_id":1,"path":["std","sys","process","unix","common","ExitCode"],"kind":"struct"},"1928":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"166":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1047":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"493":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1374":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2255":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2582":{"crate_id":1,"path":["std","random","DefaultRandomSource"],"kind":"struct"},"820":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"enum"},"1701":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1147":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"266":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2028":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket2_hdr"],"kind":"struct"},"593":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1474":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2355":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2682":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"920":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"39":{"crate_id":20,"path":["clap_builder","builder","arg_group","ArgGroup"],"kind":"struct"},"1801":{"crate_id":3,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1247":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"366":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2128":{"crate_id":1,"path":["std","sys","fs","unix","Mode"],"kind":"struct"},"693":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1574":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2455":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1901":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"139":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1020":{"crate_id":3,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1347":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"466":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2228":{"crate_id":36,"path":["clap_derive","Parser"],"kind":"proc_derive"},"2555":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"793":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1674":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2001":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"239":{"crate_id":33,"path":["linux_raw_sys","general","membarrier_cmd_flag"],"kind":"enum"},"1120":{"crate_id":32,"path":["rustix","backend","io","types","ReadWriteFlags"],"kind":"struct"},"1447":{"crate_id":30,"path":["strsim","GrowingHashmapChar"],"kind":"struct"},"566":{"crate_id":33,"path":["linux_raw_sys","general","file_dedupe_range"],"kind":"struct"},"2328":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2655":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"12":{"crate_id":0,"path":["clap","_cookbook","repl"],"kind":"module"},"893":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2101":{"crate_id":24,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"339":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1220":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"666":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"1547":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2428":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2755":{"crate_id":6,"path":["libc"],"kind":"module"},"112":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"993":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1874":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1320":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"439":{"crate_id":2,"path":["core","num","niche_types","NonZeroU64Inner"],"kind":"struct"},"2201":{"crate_id":32,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"766":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1647":{"crate_id":18,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"2528":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"212":{"crate_id":2,"path":["core","num","niche_types","NonZeroI8Inner"],"kind":"struct"},"1093":{"crate_id":1,"path":["std","collections","hash","set","OccupiedEntry"],"kind":"struct"},"1974":{"crate_id":20,"path":["clap_builder","util","id","Id"],"kind":"struct"},"1420":{"crate_id":22,"path":["clap_lex","ext","OsStrExt"],"kind":"trait"},"539":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2301":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"866":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1747":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2628":{"crate_id":2,"path":["core","bstr","ByteStr"],"kind":"struct"},"2074":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"312":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1193":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1520":{"crate_id":24,"path":["anstream","strip","StripStream"],"kind":"struct"},"639":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2401":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2728":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"966":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"85":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1847":{"crate_id":1,"path":["std","sys","process","unix","common","CommandArgs"],"kind":"struct"},"2174":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"412":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1293":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1620":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2501":{"crate_id":2,"path":["core","core_arch","x86","bf16"],"kind":"struct"},"185":{"crate_id":3,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1066":{"crate_id":24,"path":["anstream","buffer","Buffer"],"kind":"struct"},"1947":{"crate_id":3,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2274":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"512":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1393":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"839":{"crate_id":32,"path":["rustix","buffer","private","Sealed"],"kind":"trait"},"1720":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2601":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"285":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1166":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2047":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2374":{"crate_id":3,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"612":{"crate_id":17,"path":["object","elf","Relr32"],"kind":"struct"},"1493":{"crate_id":2,"path":["core","intrinsics","fallback","CarryingMulAdd"],"kind":"trait"},"939":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1820":{"crate_id":23,"path":["unicase","unicode","fold","Fold"],"kind":"enum"},"2701":{"crate_id":20,"path":["clap_builder","parser","matches","value_source","ValueSource"],"kind":"enum"},"385":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1266":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2147":{"crate_id":6,"path":["libc","unix","linux_like","linux","epoll_params"],"kind":"struct"},"1593":{"crate_id":6,"path":["libc","unix","linux_like","linux","xdp_desc"],"kind":"struct"},"712":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2474":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1039":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"158":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1920":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2247":{"crate_id":1,"path":["std","sync","poison","mutex","Mutex"],"kind":"struct"},"485":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1366":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1693":{"crate_id":33,"path":["linux_raw_sys","general","mnt_id_req"],"kind":"struct"},"812":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2574":{"crate_id":2,"path":["core","num","niche_types","NonZeroI64Inner"],"kind":"struct"},"1139":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolishValueParser"],"kind":"struct"},"258":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2020":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2347":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"585":{"crate_id":24,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"1466":{"crate_id":6,"path":["libc","unix","linux_like","linux","dmabuf_token"],"kind":"struct"},"1793":{"crate_id":31,"path":["terminal_size"],"kind":"module"},"912":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2674":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"358":{"crate_id":18,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"1239":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2120":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2447":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrenceValues"],"kind":"struct"},"685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","clone_args"],"kind":"struct"},"1566":{"crate_id":33,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"1012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"131":{"crate_id":3,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1893":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"458":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1339":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2220":{"crate_id":34,"path":["bitflags","traits","Flag"],"kind":"struct"},"2547":{"crate_id":2,"path":["core","core_arch","x86","__m128h"],"kind":"struct"},"785":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1666":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1112":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"231":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1993":{"crate_id":2,"path":["core","marker","variance","Variance"],"kind":"trait"},"558":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2320":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1766":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgFlags"],"kind":"struct"},"4":{"crate_id":0,"path":["clap","_cookbook","escaped_positional_derive"],"kind":"module"},"885":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_pkt"],"kind":"struct"},"2647":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1212":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"331":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2093":{"crate_id":22,"path":["clap_lex","ext","Split"],"kind":"struct"},"2420":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"658":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1539":{"crate_id":18,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"1866":{"crate_id":3,"path":["alloc","string","String"],"kind":"struct"},"104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"985":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2747":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1312":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"431":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2193":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2520":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"758":{"crate_id":33,"path":["linux_raw_sys","general","__kernel_sock_timeval"],"kind":"struct"},"1639":{"crate_id":2,"path":["core","core_arch","x86","__m256h"],"kind":"struct"},"1966":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"204":{"crate_id":3,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1085":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"531":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1412":{"crate_id":3,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2293":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2620":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"858":{"crate_id":1,"path":["std","sys","process","unix","common","Command"],"kind":"struct"},"1739":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2066":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"304":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket3_hdr"],"kind":"struct"},"1185":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"631":{"crate_id":1,"path":["std","sys","fs","unix","DirBuilder"],"kind":"struct"},"1512":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2393":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2720":{"crate_id":20,"path":["clap_builder","util","flat_map","FlatMap"],"kind":"struct"},"77":{"crate_id":20,"path":["clap_builder","builder","action","ArgAction"],"kind":"enum"},"958":{"crate_id":3,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1839":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1285":{"crate_id":33,"path":["linux_raw_sys","general","__BindgenBitfieldUnit"],"kind":"struct"},"404":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2166":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"731":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1612":{"crate_id":10,"path":["adler2","Adler32"],"kind":"struct"},"2493":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1939":{"crate_id":2,"path":["core","ffi","primitives","c_char"],"kind":"type_alias"},"177":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1058":{"crate_id":18,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"1385":{"crate_id":20,"path":["clap_builder","parser","arg_matcher","ArgMatcher"],"kind":"struct"},"504":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2266":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2593":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_info_fid"],"kind":"struct"},"831":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1712":{"crate_id":10,"path":["adler2","algo","U32X4"],"kind":"struct"},"2039":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_thrspy"],"kind":"struct"},"277":{"crate_id":31,"path":["terminal_size","Height"],"kind":"struct"},"1158":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParser"],"kind":"struct"},"1485":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_bd_header_u"],"kind":"union"},"604":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2366":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2693":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"931":{"crate_id":23,"path":["unicase"],"kind":"module"},"1812":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2139":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","IdsRef"],"kind":"struct"},"377":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1258":{"crate_id":34,"path":["bitflags","parser","WriteHex"],"kind":"trait"},"704":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1585":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2466":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"150":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1031":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_info_header"],"kind":"struct"},"1912":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2239":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"477":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1358":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"804":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1685":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2566":{"crate_id":1,"path":["std","sys","process","unix","common","cstring_array","CStringArray"],"kind":"struct"},"250":{"crate_id":33,"path":["linux_raw_sys","general","mount_attr"],"kind":"struct"},"1131":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2012":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1458":{"crate_id":33,"path":["linux_raw_sys","general","__sifields__bindgen_ty_3"],"kind":"struct"},"577":{"crate_id":3,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2339":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"904":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1785":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2666":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2112":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"350":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1231":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1558":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"677":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2439":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1004":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"123":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1885":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2766":{"crate_id":2,"path":["core","core_arch","simd","f16x8"],"kind":"struct"},"2212":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"450":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1331":{"crate_id":6,"path":["libc","unix","linux_like","linux","xdp_umem_reg_v1"],"kind":"struct"},"1658":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"777":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2539":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"223":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1104":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1985":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2312":{"crate_id":2,"path":["core","core_arch","simd","u32x32"],"kind":"struct"},"550":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"1431":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1758":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"877":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2639":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"323":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1204":{"crate_id":1,"path":["std","sys","args","common","Args"],"kind":"struct"},"2085":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2412":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"650":{"crate_id":2,"path":["core","num","niche_types","NonZeroU16Inner"],"kind":"struct"},"1531":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"977":{"crate_id":33,"path":["linux_raw_sys","general","__kernel_old_timespec"],"kind":"struct"},"96":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1858":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2739":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"423":{"crate_id":33,"path":["linux_raw_sys","general","ktermios"],"kind":"struct"},"1304":{"crate_id":32,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"2185":{"crate_id":1,"path":["std","sync","poison","condvar","Condvar"],"kind":"struct"},"1631":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"750":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2512":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1077":{"crate_id":25,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"196":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1958":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"523":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1404":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2285":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1731":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"850":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2612":{"crate_id":33,"path":["linux_raw_sys","general","__kernel_fsid_t"],"kind":"struct"},"1177":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"296":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2058":{"crate_id":33,"path":["linux_raw_sys","general","fscrypt_key_specifier"],"kind":"struct"},"2385":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"623":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1504":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1831":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"950":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2712":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"396":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1277":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2158":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2485":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"723":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1604":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1931":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"169":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1050":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"496":{"crate_id":3,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1377":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2258":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2585":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"823":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1704":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1150":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"269":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2031":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"596":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1477":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2358":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1804":{"crate_id":28,"path":["is_terminal_polyfill"],"kind":"module"},"42":{"crate_id":0,"path":["clap","_derive","_tutorial"],"kind":"module"},"923":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2685":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1250":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"369":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2131":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"696":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1577":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2458":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1904":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"142":{"crate_id":18,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"1023":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1350":{"crate_id":1,"path":["std","sys","fs","unix","File"],"kind":"struct"},"469":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2231":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2558":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"796":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1677":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2004":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"242":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1123":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1450":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"569":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2331":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2658":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"896":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_elf64_rel"],"kind":"struct"},"1777":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2104":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"342":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1223":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"669":{"crate_id":3,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1550":{"crate_id":20,"path":["clap_builder","builder","ext","Extension"],"kind":"trait"},"2431":{"crate_id":1,"path":["std","sync","poison","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2758":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"115":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","hex_float","HexFloatParseError"],"kind":"struct"},"996":{"crate_id":3,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1877":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1323":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"442":{"crate_id":3,"path":["alloc","collections","btree","set","entry","Entry"],"kind":"enum"},"2204":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"769":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1650":{"crate_id":18,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"2531":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"215":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1096":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1977":{"crate_id":3,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1423":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"542":{"crate_id":33,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"],"kind":"struct"},"2304":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"869":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1750":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2631":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2077":{"crate_id":3,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1196":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1523":{"crate_id":34,"path":["bitflags","parser","ParseHex"],"kind":"trait"},"642":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2404":{"crate_id":1,"path":["std","sys","io","io_slice","iovec","IoSlice"],"kind":"struct"},"2731":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"88":{"crate_id":20,"path":["clap_builder","builder","value_parser","EnumValueParser"],"kind":"struct"},"969":{"crate_id":3,"path":["alloc","rc","Weak"],"kind":"struct"},"1850":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_missed"],"kind":"struct"},"2177":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"415":{"crate_id":18,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"1296":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1623":{"crate_id":20,"path":["clap_builder","builder","value_parser","BoolValueParser"],"kind":"struct"},"742":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2504":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"188":{"crate_id":18,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"1069":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1950":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2277":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"515":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1396":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"842":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1723":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_elf32_rela"],"kind":"struct"},"2604":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"288":{"crate_id":3,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1169":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2050":{"crate_id":1,"path":["std","sys","net","connection","socket","UdpSocket"],"kind":"struct"},"1496":{"crate_id":24,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"615":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2377":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"942":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1823":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2704":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"388":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrenceValuesRef"],"kind":"struct"},"1269":{"crate_id":3,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2150":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1596":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"715":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2477":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1042":{"crate_id":3,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"161":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1923":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2250":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"488":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1369":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","feature_detect","Flags"],"kind":"struct"},"1696":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"815":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2577":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1142":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"261":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2023":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2350":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"588":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1469":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"1796":{"crate_id":23,"path":["unicase","Ascii"],"kind":"struct"},"915":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"34":{"crate_id":20,"path":["clap_builder","value_parser"],"kind":"macro"},"2677":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"361":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1242":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2123":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2450":{"crate_id":3,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"688":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1569":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1015":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"134":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"1896":{"crate_id":1,"path":["std","sys","process","env","CommandEnv"],"kind":"struct"},"461":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1342":{"crate_id":33,"path":["linux_raw_sys","general","uffdio_register"],"kind":"struct"},"2223":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2550":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"788":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1669":{"crate_id":32,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"1115":{"crate_id":2,"path":["core","slice","GetDisjointMutIndex"],"kind":"trait"},"234":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1996":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"561":{"crate_id":25,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"1442":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2323":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1769":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"7":{"crate_id":0,"path":["clap","_cookbook","git_derive"],"kind":"module"},"888":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2650":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1215":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"334":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2096":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2423":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"661":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1542":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1869":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"107":{"crate_id":2,"path":["core","num","niche_types","NonZeroI16Inner"],"kind":"struct"},"988":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2750":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1315":{"crate_id":24,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"434":{"crate_id":11,"path":["hashbrown","table","IterHashMut"],"kind":"struct"},"2196":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2523":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"761":{"crate_id":6,"path":["libc","unix","linux_like","linux","xdp_mmap_offsets"],"kind":"struct"},"1642":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1969":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"207":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1088":{"crate_id":2,"path":["core","str","converts","from_utf8_unchecked"],"kind":"function"},"534":{"crate_id":1,"path":["std","sys","net","connection","socket","TcpStream"],"kind":"struct"},"1415":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2296":{"crate_id":3,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2623":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"861":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1742":{"crate_id":3,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1188":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"307":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2069":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"634":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1515":{"crate_id":32,"path":["rustix","ioctl","opcode"],"kind":"module"},"2396":{"crate_id":2,"path":["core","slice","GetDisjointMutError"],"kind":"enum"},"2723":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"961":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"80":{"crate_id":20,"path":["clap_builder","builder","value_parser","PossibleValuesParser"],"kind":"struct"},"1842":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1288":{"crate_id":24,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"407":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2169":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_iwreq"],"kind":"union"},"734":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1615":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2496":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1942":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"180":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1061":{"crate_id":33,"path":["linux_raw_sys","general","open_how"],"kind":"struct"},"1388":{"crate_id":20,"path":["clap_builder","builder","value_parser","TryMapValueParser"],"kind":"struct"},"507":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2269":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2596":{"crate_id":20,"path":["clap_builder","util","flat_map","Iter"],"kind":"struct"},"834":{"crate_id":2,"path":["core","pat","RangePattern"],"kind":"trait"},"1715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","fanotify_event_info_pidfd"],"kind":"struct"},"2042":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"280":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1161":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1488":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2369":{"crate_id":33,"path":["linux_raw_sys","general","statx"],"kind":"struct"},"2696":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"934":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1815":{"crate_id":22,"path":["clap_lex"],"kind":"module"},"2142":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"380":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1261":{"crate_id":1,"path":["std","sys","sync","once_box","OnceBox"],"kind":"struct"},"707":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1588":{"crate_id":2,"path":["core","mem","take"],"kind":"function"},"2469":{"crate_id":21,"path":["anstyle","color","RgbColor"],"kind":"struct"},"153":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1034":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1915":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2242":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"480":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1361":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"807":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1688":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2569":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","hex_float","Hexf"],"kind":"struct"},"253":{"crate_id":6,"path":["libc","unix","linux_like","linux","open_how"],"kind":"struct"},"1134":{"crate_id":20,"path":["clap_builder","mkeymap","MKeyMap"],"kind":"struct"},"2015":{"crate_id":18,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"1461":{"crate_id":1,"path":["std","sys","stdio","unix","Stderr"],"kind":"struct"},"580":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2342":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"907":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1788":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2669":{"crate_id":2,"path":["core","num","niche_types","NonZeroI32Inner"],"kind":"struct"},"2115":{"crate_id":33,"path":["linux_raw_sys","general","dmabuf_token"],"kind":"struct"},"353":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1234":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1561":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"680":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2442":{"crate_id":1,"path":["std","sys","process","unix","unix","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1007":{"crate_id":2,"path":["core"],"kind":"module"},"126":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1888":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2215":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"453":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1334":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1661":{"crate_id":33,"path":["linux_raw_sys","elf","Elf_auxv_t"],"kind":"struct"},"780":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2542":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"226":{"crate_id":3,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1107":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1988":{"crate_id":33,"path":["linux_raw_sys","general","xattr_args"],"kind":"struct"},"2315":{"crate_id":2,"path":["core","core_simd","swizzle","shift_elements_left","Shift"],"kind":"struct"},"553":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1434":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"880":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1761":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2642":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"326":{"crate_id":20,"path":["clap_builder","builder","resettable","Resettable"],"kind":"enum"},"1207":{"crate_id":32,"path":["rustix","backend","io","errno","Errno"],"kind":"struct"},"2088":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2415":{"crate_id":18,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"653":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1534":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"980":{"crate_id":5,"path":["rustc_std_workspace_core"],"kind":"module"},"99":{"crate_id":16,"path":["gimli","read","dwarf","UnitRef"],"kind":"struct"},"1861":{"crate_id":1,"path":["std","sys","env","common","Env"],"kind":"struct"},"2742":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"426":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1307":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2188":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1634":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"753":{"crate_id":2,"path":["core","num","niche_types","NonZeroU8Inner"],"kind":"struct"},"2515":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1080":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"199":{"crate_id":33,"path":["linux_raw_sys","general","uffd_msg"],"kind":"struct"},"1961":{"crate_id":3,"path":["alloc","alloc","Global"],"kind":"struct"},"2288":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"526":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1407":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1734":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"853":{"crate_id":33,"path":["linux_raw_sys","general","flock64"],"kind":"struct"},"2615":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1180":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"299":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2061":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2388":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"626":{"crate_id":33,"path":["linux_raw_sys","general","termios2"],"kind":"struct"},"1507":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1834":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"953":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2715":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"399":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1280":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"2161":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2488":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1607":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1934":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"172":{"crate_id":20,"path":["clap_builder","builder","ext","Extensions"],"kind":"struct"},"1053":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"499":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1380":{"crate_id":21,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"2261":{"crate_id":33,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1"],"kind":"union"},"2588":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"826":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1707":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1153":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"272":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2034":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"599":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1480":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2361":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1807":{"crate_id":2,"path":["core","num","niche_types","I64NotAllOnes"],"kind":"struct"},"926":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"45":{"crate_id":20,"path":["clap_builder","builder"],"kind":"module"},"2688":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_range"],"kind":"struct"},"1253":{"crate_id":20,"path":["clap_builder","builder","styling","Styles"],"kind":"struct"},"372":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2134":{"crate_id":33,"path":["linux_raw_sys","general","timezone"],"kind":"struct"},"2461":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"699":{"crate_id":33,"path":["linux_raw_sys","general","vfs_ns_cap_data"],"kind":"struct"},"1580":{"crate_id":3,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1907":{"crate_id":18,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"145":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1026":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1353":{"crate_id":1,"path":["std","sys","fs","unix","FileTimes"],"kind":"struct"},"472":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2234":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2561":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"799":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1680":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2007":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"245":{"crate_id":3,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1126":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"572":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1453":{"crate_id":1,"path":["std","sync","poison","mutex","MutexGuard"],"kind":"struct"},"2334":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2661":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"18":{"crate_id":0,"path":["clap","_faq"],"kind":"module"},"899":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1780":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2107":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"345":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1226":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"672":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1553":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2434":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2761":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"118":{"crate_id":1,"path":["std","sys","thread_local","native","lazy","State"],"kind":"enum"},"999":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1880":{"crate_id":6,"path":["libc","unix","linux_like","linux","iwreq_data"],"kind":"union"},"1326":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"445":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2207":{"crate_id":33,"path":["linux_raw_sys","general","rand_pool_info"],"kind":"struct"},"772":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1653":{"crate_id":20,"path":["clap_builder","output","textwrap","wrap_algorithms","LineWrapper"],"kind":"struct"},"2534":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1980":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"218":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1099":{"crate_id":33,"path":["linux_raw_sys","general","fstrim_range"],"kind":"struct"},"1426":{"crate_id":33,"path":["linux_raw_sys","general","files_stat_struct"],"kind":"struct"},"545":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2307":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"872":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1753":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"2634":{"crate_id":3,"path":["alloc","string","IntoChars"],"kind":"struct"},"2080":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"318":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1199":{"crate_id":24,"path":["anstream","fmt","Adapter"],"kind":"struct"},"1526":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"645":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2407":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2734":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"91":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"972":{"crate_id":2,"path":["core","core_simd","vector","splat","splat_rt","Splat"],"kind":"struct"},"1853":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2180":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"418":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1299":{"crate_id":2,"path":["core","marker","variance","PhantomCovariantLifetime"],"kind":"struct"},"1626":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"745":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2507":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"191":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1072":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1953":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2280":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"518":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_sys_offset"],"kind":"struct"},"1399":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"845":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1726":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2607":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"291":{"crate_id":32,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"1172":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2053":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1499":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"618":{"crate_id":33,"path":["linux_raw_sys","general","uffdio_writeprotect"],"kind":"struct"},"2380":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"945":{"crate_id":32,"path":["rustix","ioctl","Ioctl"],"kind":"trait"},"1826":{"crate_id":33,"path":["linux_raw_sys","general","fsconfig_command"],"kind":"enum"},"2707":{"crate_id":21,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"391":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1272":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2153":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_hdr_variant1"],"kind":"struct"},"1599":{"crate_id":20,"path":["clap_builder","mkeymap","KeyType"],"kind":"enum"},"718":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2480":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1045":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"164":{"crate_id":3,"path":["alloc","bstr","ByteString"],"kind":"struct"},"1926":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2253":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"491":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1372":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1699":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"818":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2580":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"264":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1145":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2026":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2353":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"591":{"crate_id":6,"path":["libc","unix","linux_like","linux","dmabuf_cmsg"],"kind":"struct"},"1472":{"crate_id":33,"path":["linux_raw_sys","general","statx_timestamp"],"kind":"struct"},"1799":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"918":{"crate_id":1,"path":["std","thread","spawnhook","SpawnHooks"],"kind":"struct"},"37":{"crate_id":20,"path":["clap_builder","builder","value_parser","TypedValueParser"],"kind":"trait"},"2680":{"crate_id":33,"path":["linux_raw_sys"],"kind":"module"},"364":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1245":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2126":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2453":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"691":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1572":{"crate_id":30,"path":["strsim","StringWrapper"],"kind":"struct"},"1018":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"137":{"crate_id":33,"path":["linux_raw_sys","general","termios"],"kind":"struct"},"1899":{"crate_id":2,"path":["core","num","niche_types","NonZeroUsizeInner"],"kind":"struct"},"464":{"crate_id":18,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"1345":{"crate_id":33,"path":["linux_raw_sys","general","inotify_event"],"kind":"struct"},"2226":{"crate_id":33,"path":["linux_raw_sys","general","uffdio_copy"],"kind":"struct"},"1672":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"791":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2553":{"crate_id":3,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1118":{"crate_id":2,"path":["core","fmt","Sign"],"kind":"enum"},"237":{"crate_id":2,"path":["core","fmt","builders","FromFn"],"kind":"struct"},"1999":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"564":{"crate_id":33,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5"],"kind":"struct"},"1445":{"crate_id":26,"path":["utf8parse","Parser"],"kind":"struct"},"2326":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1772":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_versions"],"kind":"enum"},"10":{"crate_id":0,"path":["clap","_cookbook","multicall_hostname"],"kind":"module"},"891":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2653":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1218":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"337":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2099":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2426":{"crate_id":20,"path":["clap_builder","error","context","ContextKind"],"kind":"enum"},"664":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1545":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawOccurrences"],"kind":"struct"},"1872":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"110":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"991":{"crate_id":11,"path":["hashbrown","control","tag","Tag"],"kind":"struct"},"2753":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1318":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"437":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2526":{"crate_id":1,"path":["std","sys","fs","unix","Dir"],"kind":"struct"},"764":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1645":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"210":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"1091":{"crate_id":32,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"537":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1418":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2299":{"crate_id":3,"path":["alloc","boxed","convert","from","StringError"],"kind":"struct"},"2626":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"864":{"crate_id":6,"path":["libc","unix","linux_like","linux","xdp_ring_offset"],"kind":"struct"},"1745":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1191":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"310":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_elf32_rel"],"kind":"struct"},"2072":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"637":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1518":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2399":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2726":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"83":{"crate_id":20,"path":["clap_builder"],"kind":"module"},"964":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1845":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1291":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"410":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2172":{"crate_id":24,"path":["anstream","adapter","wincon","ColorTarget"],"kind":"enum"},"737":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1618":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2499":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1945":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"183":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1064":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1391":{"crate_id":3,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"510":{"crate_id":33,"path":["linux_raw_sys","general","uffdio_continue"],"kind":"struct"},"2272":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"837":{"crate_id":3,"path":["alloc","collections","btree","node","drop_key_val","Dropper"],"kind":"struct"},"1718":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","big","u256"],"kind":"struct"},"2045":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"283":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1164":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1491":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"610":{"crate_id":23,"path":["unicase","Encoding"],"kind":"enum"},"2372":{"crate_id":33,"path":["linux_raw_sys","general","sigevent__bindgen_ty_1"],"kind":"union"},"2699":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"937":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1818":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_req"],"kind":"struct"},"2145":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"383":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1264":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"710":{"crate_id":3,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1591":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2472":{"crate_id":3,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"156":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1037":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1918":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1364":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"483":{"crate_id":2,"path":["core","core_arch","simd","u16x64"],"kind":"struct"},"2245":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"810":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1691":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2572":{"crate_id":2,"path":["core","fmt","DebugAsHex"],"kind":"enum"},"256":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1137":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2018":{"crate_id":2,"path":["core","num","niche_types","I32NotAllOnes"],"kind":"struct"},"1464":{"crate_id":3,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"583":{"crate_id":20,"path":["clap_builder","builder","arg_settings","ArgSettings"],"kind":"enum"},"2345":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"910":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","GroupedValues"],"kind":"struct"},"1791":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2672":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2118":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"356":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1237":{"crate_id":6,"path":["libc","unix","linux_like","linux","xdp_statistics"],"kind":"struct"},"1564":{"crate_id":33,"path":["linux_raw_sys","general","__sifields__bindgen_ty_2"],"kind":"struct"},"683":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2445":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1010":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"129":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1891":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2218":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"456":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1337":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1664":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"783":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2545":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"229":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1110":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1991":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2318":{"crate_id":3,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"556":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1437":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"883":{"crate_id":3,"path":["alloc","slice","to_vec_in","to_vec","DropGuard"],"kind":"struct"},"2":{"crate_id":0,"path":["clap","_features"],"kind":"module"},"1764":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2645":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"329":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1210":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2091":{"crate_id":3,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2418":{"crate_id":33,"path":["linux_raw_sys","general","uffdio_zeropage"],"kind":"struct"},"656":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1537":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"983":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"102":{"crate_id":24,"path":["anstream","adapter","wincon","CsiState"],"kind":"enum"},"1864":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2745":{"crate_id":3,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"429":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1310":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2191":{"crate_id":3,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1637":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"756":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2518":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1083":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"202":{"crate_id":18,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"1964":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2291":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"529":{"crate_id":15,"path":["addr2line","unit","LocationRangeIter"],"kind":"struct"},"1410":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1737":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"856":{"crate_id":24,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2618":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1183":{"crate_id":33,"path":["linux_raw_sys","general","fs_sysfs_path"],"kind":"struct"},"302":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2064":{"crate_id":2,"path":["core","pin","unsafe_pinned","UnsafePinned"],"kind":"struct"},"2391":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"629":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1510":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1837":{"crate_id":13,"path":["std_detect"],"kind":"module"},"75":{"crate_id":20,"path":["clap_builder","builder","str","Str"],"kind":"struct"},"956":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2718":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"402":{"crate_id":1,"path":["std","path","absolute"],"kind":"function"},"1283":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","thread_info","UnlockOnDrop"],"kind":"struct"},"2164":{"crate_id":1,"path":["std","sys","stdio","unix","Stdout"],"kind":"struct"},"2491":{"crate_id":3,"path":["alloc","sync","UniqueArc"],"kind":"struct"},"729":{"crate_id":18,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"1610":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1056":{"crate_id":24,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"175":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1937":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"502":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1383":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2264":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2591":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"829":{"crate_id":32,"path":["rustix","backend","io","types","DupFlags"],"kind":"struct"},"1710":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1156":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"275":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2037":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"602":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1483":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2364":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1810":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"929":{"crate_id":26,"path":["utf8parse"],"kind":"module"},"2691":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1256":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"375":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2137":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2464":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"702":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1583":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1910":{"crate_id":3,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"148":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1029":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1356":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"475":{"crate_id":20,"path":["clap_builder","parser","parser","PendingArg"],"kind":"struct"},"2237":{"crate_id":6,"path":["libc","unix","linux_like","linux","xdp_mmap_offsets_v1"],"kind":"struct"},"2564":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"802":{"crate_id":32,"path":["rustix","buffer","Buffer"],"kind":"trait"},"1683":{"crate_id":2,"path":["core","array","iter","iter_inner","PolymorphicIter"],"kind":"struct"},"2010":{"crate_id":33,"path":["linux_raw_sys","general","iovec"],"kind":"struct"},"248":{"crate_id":3,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1129":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"575":{"crate_id":2,"path":["core","intrinsics","disjoint_bitor"],"kind":"function"},"1456":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_scan_req"],"kind":"struct"},"2337":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2664":{"crate_id":1,"path":["std","sys","net","connection","socket","TcpListener"],"kind":"struct"},"21":{"crate_id":20,"path":["clap_builder","builder","command","Command"],"kind":"struct"},"902":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1783":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2110":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"348":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","Values"],"kind":"struct"},"1229":{"crate_id":3,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"675":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1556":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2437":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2764":{"crate_id":3,"path":["alloc"],"kind":"module"},"121":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1002":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1883":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1329":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"448":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2210":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"775":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1656":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2537":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1983":{"crate_id":20,"path":["clap_builder","util","flat_map","IterMut"],"kind":"struct"},"221":{"crate_id":4,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"1102":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1429":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"548":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2310":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2637":{"crate_id":3,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"875":{"crate_id":33,"path":["linux_raw_sys","general","vfs_ns_cap_data__bindgen_ty_1"],"kind":"struct"},"1756":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2083":{"crate_id":22,"path":["clap_lex","ShortFlags"],"kind":"struct"},"321":{"crate_id":20,"path":["clap_builder","builder","value_parser","NonEmptyStringValueParser"],"kind":"struct"},"1202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1529":{"crate_id":3,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"648":{"crate_id":3,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2410":{"crate_id":3,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2737":{"crate_id":21,"path":["anstyle","color","Color"],"kind":"enum"},"94":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"975":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1856":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"421":{"crate_id":20,"path":["clap_builder","util","graph","ChildGraph"],"kind":"struct"},"1302":{"crate_id":33,"path":["linux_raw_sys","general","__kernel_timespec"],"kind":"struct"},"748":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1629":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2510":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"194":{"crate_id":3,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1075":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1956":{"crate_id":1,"path":["std","sync","poison","condvar","WaitTimeoutResult"],"kind":"struct"},"2283":{"crate_id":1,"path":["std","sync","mpmc","Iter"],"kind":"struct"},"521":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1402":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_stats_v3"],"kind":"struct"},"848":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1729":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2610":{"crate_id":20,"path":["clap_builder","mkeymap","Key"],"kind":"struct"},"294":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1175":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2056":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1502":{"crate_id":20,"path":["clap_builder","util","graph","Child"],"kind":"struct"},"621":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2383":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"948":{"crate_id":17,"path":["object"],"kind":"module"},"1829":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2710":{"crate_id":21,"path":["anstyle"],"kind":"module"},"2156":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"394":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1275":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1602":{"crate_id":21,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"721":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2483":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1048":{"crate_id":33,"path":["linux_raw_sys","general","rlimit"],"kind":"struct"},"167":{"crate_id":1,"path":["std","sys","stdio","unix","Stdin"],"kind":"struct"},"1929":{"crate_id":3,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2256":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"494":{"crate_id":33,"path":["linux_raw_sys","elf","Elf_Dyn"],"kind":"struct"},"1375":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1702":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","RawValues"],"kind":"struct"},"821":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2583":{"crate_id":20,"path":["clap_builder","error","Message"],"kind":"enum"},"267":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1148":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2029":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2356":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"594":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1475":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1802":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"921":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2683":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"367":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1248":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2129":{"crate_id":6,"path":["libc","unix","linux_like","linux","xdp_umem_reg"],"kind":"struct"},"2456":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"694":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_hdr_v1"],"kind":"struct"},"1575":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1021":{"crate_id":3,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"140":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1902":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"467":{"crate_id":33,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"],"kind":"union"},"1348":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2229":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1675":{"crate_id":18,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"794":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2556":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1121":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"240":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2002":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2329":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"567":{"crate_id":33,"path":["linux_raw_sys","general","uffdio_api"],"kind":"struct"},"1448":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1775":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"13":{"crate_id":0,"path":["clap","_cookbook","repl_derive"],"kind":"module"},"894":{"crate_id":24,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"2656":{"crate_id":32,"path":["rustix","backend","io","types","FdFlags"],"kind":"struct"},"1221":{"crate_id":32,"path":["rustix","termios","types","_","InternalBitFlags"],"kind":"struct"},"340":{"crate_id":15,"path":["addr2line","unit","SupUnits"],"kind":"struct"},"2102":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2429":{"crate_id":3,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"667":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1548":{"crate_id":33,"path":["linux_raw_sys","general","fscrypt_remove_key_arg"],"kind":"struct"},"1875":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"113":{"crate_id":22,"path":["clap_lex","ext","private","Sealed"],"kind":"trait"},"994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2756":{"crate_id":20,"path":["clap_builder","builder","value_parser","_infer_ValueParser_for"],"kind":"struct"},"440":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1321":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2202":{"crate_id":33,"path":["linux_raw_sys","general","siginfo"],"kind":"struct"},"2529":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"767":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1648":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1975":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"213":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1094":{"crate_id":3,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"540":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1421":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2302":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2629":{"crate_id":20,"path":["clap_builder","builder","value_hint","ValueHint"],"kind":"enum"},"867":{"crate_id":3,"path":["alloc","boxed","Box"],"kind":"struct"},"1748":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1194":{"crate_id":18,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"313":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"640":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"1521":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2402":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1848":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"86":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"967":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2729":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1294":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"413":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2175":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"740":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_extts_request"],"kind":"struct"},"1621":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2502":{"crate_id":3,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1948":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"186":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1067":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"1394":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"513":{"crate_id":2,"path":["core","slice","private_get_disjoint_mut_index","Sealed"],"kind":"trait"},"2275":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2602":{"crate_id":18,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"840":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1721":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2048":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"286":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1167":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1494":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"613":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2702":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"940":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_clock_time"],"kind":"struct"},"2148":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"386":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1267":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"713":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1594":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2475":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"159":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1040":{"crate_id":33,"path":["linux_raw_sys","general","fscrypt_policy_v1"],"kind":"struct"},"1921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1367":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"486":{"crate_id":21,"path":["anstyle","reset","Reset"],"kind":"struct"},"2248":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_encode_ext"],"kind":"struct"},"813":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1694":{"crate_id":4,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"2575":{"crate_id":3,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1140":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2021":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1467":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"586":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2348":{"crate_id":33,"path":["linux_raw_sys","general","itimerspec"],"kind":"struct"},"913":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1794":{"crate_id":1,"path":["std","sys","process","env","CommandEnvs"],"kind":"struct"},"2675":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2121":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"359":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1567":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"686":{"crate_id":3,"path":["alloc","task","LocalWake"],"kind":"trait"},"2448":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"132":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1013":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1894":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2221":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"459":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1340":{"crate_id":33,"path":["linux_raw_sys","general","__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"],"kind":"struct"},"1667":{"crate_id":18,"path":["memchr","memchr","Memchr"],"kind":"struct"},"786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2548":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"232":{"crate_id":18,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"1113":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1994":{"crate_id":3,"path":["alloc","collections","btree","set","CursorMut"],"kind":"struct"},"2321":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"559":{"crate_id":20,"path":["clap_builder","builder","arg","ArgExt"],"kind":"trait"},"1440":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"886":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5":{"crate_id":0,"path":["clap","_cookbook","find"],"kind":"module"},"1767":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2648":{"crate_id":20,"path":["clap_builder","builder","str","inner","Inner"],"kind":"enum"},"332":{"crate_id":18,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"1213":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2094":{"crate_id":2,"path":["core","marker","variance","PhantomCovariant"],"kind":"struct"},"1540":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValue"],"kind":"struct"},"659":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2421":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"986":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"105":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanout_args"],"kind":"struct"},"1867":{"crate_id":20,"path":["clap_builder","parser","matches","arg_matches","OccurrencesRef"],"kind":"struct"},"2748":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"432":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1313":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2194":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1640":{"crate_id":3,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"759":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2521":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1086":{"crate_id":2,"path":["core","ffi","va_list","VaArgSafe"],"kind":"trait"},"205":{"crate_id":16,"path":["gimli","read","index","IndexSectionId"],"kind":"enum"},"1967":{"crate_id":3,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2294":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"532":{"crate_id":21,"path":["anstyle","effect","Effects"],"kind":"struct"},"1413":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"859":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2621":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1186":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"305":{"crate_id":18,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"2067":{"crate_id":33,"path":["linux_raw_sys","general","termio"],"kind":"struct"},"2394":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"632":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1513":{"crate_id":24,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"1840":{"crate_id":10,"path":["adler2"],"kind":"module"},"959":{"crate_id":32,"path":["rustix","ioctl","Direction"],"kind":"enum"},"2721":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"405":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1286":{"crate_id":3,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2167":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2494":{"crate_id":25,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"732":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1613":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aria_gcm_256"],"kind":"struct"},"1059":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"178":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1940":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"505":{"crate_id":25,"path":["anstyle_parse","Parser"],"kind":"struct"},"1386":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2267":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2594":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"832":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1713":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1159":{"crate_id":22,"path":["clap_lex","RawArgs"],"kind":"struct"},"278":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2040":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"605":{"crate_id":1,"path":["std","collections","hash","set","Entry"],"kind":"enum"},"1486":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2367":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1813":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"932":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2694":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1259":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2140":{"crate_id":2,"path":["core","num","niche_types","U32NotAllOnes"],"kind":"struct"},"2467":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"705":{"crate_id":33,"path":["linux_raw_sys","general","fscrypt_policy_v2"],"kind":"struct"},"1586":{"crate_id":33,"path":["linux_raw_sys","general","compat_statfs64"],"kind":"struct"},"1913":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"151":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1032":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1359":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"478":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2240":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2567":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"805":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2013":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"251":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1132":{"crate_id":32,"path":["rustix","termios","types","InputModes"],"kind":"struct"},"578":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1459":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2340":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2667":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"905":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1786":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1232":{"crate_id":11,"path":["hashbrown","control","bitmask","BitMaskIter"],"kind":"struct"},"351":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2113":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"678":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1559":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2440":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"124":{"crate_id":36,"path":["clap_derive","Args"],"kind":"proc_derive"},"1005":{"crate_id":20,"path":["clap_builder","builder","command","MaxTermWidth"],"kind":"struct"},"1886":{"crate_id":20,"path":["clap_builder","builder","value_parser","MapValueParser"],"kind":"struct"},"1332":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"451":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2213":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"778":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1659":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2540":{"crate_id":21,"path":["anstyle","style","Style"],"kind":"struct"},"1986":{"crate_id":26,"path":["utf8parse","types","Action"],"kind":"enum"},"224":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1105":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1432":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"551":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2313":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2640":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"878":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1759":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2086":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1205":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_freq"],"kind":"struct"},"1532":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"651":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2413":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2740":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"97":{"crate_id":18,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"978":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1859":{"crate_id":33,"path":["linux_raw_sys","general","membarrier_cmd"],"kind":"enum"},"2186":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"424":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1305":{"crate_id":35,"path":["unicode_width","UnicodeWidthStr"],"kind":"trait"},"751":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"1632":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2513":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"197":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1078":{"crate_id":3,"path":["alloc","rc","Rc"],"kind":"struct"},"1959":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2286":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"524":{"crate_id":33,"path":["linux_raw_sys","general","statfs64"],"kind":"struct"},"1405":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"851":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1732":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2613":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"297":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1178":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2059":{"crate_id":2,"path":["core","sync","atomic","Sealed"],"kind":"trait"},"1505":{"crate_id":1,"path":["std","thread","spawnhook","ChildSpawnHooks"],"kind":"struct"},"624":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2386":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"951":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1832":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2713":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2159":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"397":{"crate_id":11,"path":["hashbrown","control","group","sse2","Group"],"kind":"struct"},"1278":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1605":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"724":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2486":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1051":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"170":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1932":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2259":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"497":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1378":{"crate_id":18,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"1705":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"824":{"crate_id":1,"path":["std","sys","process","unix","common","ProgramKind"],"kind":"enum"},"2586":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"270":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1151":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2032":{"crate_id":20,"path":["clap_builder","error","kind","ErrorKind"],"kind":"enum"},"2359":{"crate_id":1,"path":["std","sys","process","unix","unix","do_exec","Reset"],"kind":"struct"},"597":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1478":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"924":{"crate_id":23,"path":["unicase","UniCase"],"kind":"struct"},"1805":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2686":{"crate_id":2,"path":["core","marker","variance","sealed","Sealed"],"kind":"trait"},"370":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1251":{"crate_id":33,"path":["linux_raw_sys","general","cachestat_range"],"kind":"struct"},"2132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2459":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"697":{"crate_id":6,"path":["libc","unix","linux_like","linux","mount_attr"],"kind":"struct"},"1578":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1024":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"143":{"crate_id":1,"path":["std","sys","process","unix","common","cstring_array","CStringIter"],"kind":"struct"},"1905":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"470":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1351":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2232":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1678":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"797":{"crate_id":21,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"2559":{"crate_id":2,"path":["core","intrinsics","fallback","DisjointBitOr"],"kind":"trait"},"1124":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"243":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2005":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2332":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"570":{"crate_id":25,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"1451":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1778":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"897":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2659":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1224":{"crate_id":1,"path":["std","sys","fd","unix","FileDesc"],"kind":"struct"},"343":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_pmksa"],"kind":"struct"},"2105":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2432":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"670":{"crate_id":3,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1551":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1878":{"crate_id":20,"path":["clap_builder","builder","value_parser","ValueParserFactory","Parser"],"kind":"assoc_type"},"116":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"997":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2759":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"443":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1324":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2205":{"crate_id":3,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2532":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"770":{"crate_id":33,"path":["linux_raw_sys","general","f_owner_ex"],"kind":"struct"},"1651":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1978":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"216":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1097":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"543":{"crate_id":30,"path":["strsim","HybridGrowingHashmapChar"],"kind":"struct"},"1424":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2305":{"crate_id":33,"path":["linux_raw_sys","general","procmap_query_flags"],"kind":"enum"},"2632":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"870":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1751":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_auxdata"],"kind":"struct"},"1197":{"crate_id":27,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"316":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2078":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"643":{"crate_id":32,"path":["rustix","ioctl","patterns","Getter"],"kind":"struct"},"1524":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2405":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1851":{"crate_id":7,"path":["unwind"],"kind":"module"},"89":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"970":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2732":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_sm4_ccm"],"kind":"struct"},"1297":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"416":{"crate_id":35,"path":["unicode_width","private","Sealed"],"kind":"trait"},"2178":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"743":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1624":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1951":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_hdr"],"kind":"struct"},"189":{"crate_id":20,"path":["clap_builder","parser","parser","ParseResult"],"kind":"enum"},"1070":{"crate_id":11,"path":["hashbrown","raw","ProbeSeq"],"kind":"struct"},"1397":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"516":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2278":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2605":{"crate_id":24,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"843":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1724":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2051":{"crate_id":1,"path":["std","sync","mpmc","IntoIter"],"kind":"struct"},"289":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1170":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"616":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1497":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2378":{"crate_id":3,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","max_align_t"],"kind":"struct"},"943":{"crate_id":32,"path":["rustix","pid","Pid"],"kind":"struct"},"1824":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"389":{"crate_id":33,"path":["linux_raw_sys","general","__sifields__bindgen_ty_4"],"kind":"struct"},"1270":{"crate_id":3,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"716":{"crate_id":33,"path":["linux_raw_sys","general","__user_cap_data_struct"],"kind":"struct"},"1597":{"crate_id":3,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1043":{"crate_id":1,"path":["std","io","default_write_fmt","Adapter"],"kind":"struct"},"1924":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1370":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"489":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2251":{"crate_id":2,"path":["core","ops","deref","Receiver"],"kind":"trait"},"816":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_stats"],"kind":"struct"},"1697":{"crate_id":32,"path":["rustix","ioctl","patterns","Setter"],"kind":"struct"},"2578":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2024":{"crate_id":32,"path":["rustix","buffer","SpareCapacity"],"kind":"struct"},"262":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_priv_args"],"kind":"struct"},"1143":{"crate_id":33,"path":["linux_raw_sys","general","cachestat"],"kind":"struct"},"1470":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"589":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"2351":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"916":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1797":{"crate_id":2,"path":["core","num","niche_types","NonZeroIsizeInner"],"kind":"struct"},"2678":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"35":{"crate_id":20,"path":["clap_builder","builder","possible_value","PossibleValue"],"kind":"struct"},"2124":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"362":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1243":{"crate_id":4,"path":["compiler_builtins","math","libm_math","support","big","i256"],"kind":"struct"},"1570":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"689":{"crate_id":1,"path":["std","sys","fs","unix","StatxExtraFields"],"kind":"struct"},"2451":{"crate_id":33,"path":["linux_raw_sys","general","fscrypt_get_key_status_arg"],"kind":"struct"},"135":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1016":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1897":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2224":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"462":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1670":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"789":{"crate_id":33,"path":["linux_raw_sys","general","sigaltstack"],"kind":"struct"},"2551":{"crate_id":33,"path":["linux_raw_sys","general","timespec"],"kind":"struct"},"235":{"crate_id":36,"path":["clap_derive","ValueEnum"],"kind":"proc_derive"},"1116":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1997":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2324":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"562":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1443":{"crate_id":1,"path":["std","sync","poison","once","Once"],"kind":"struct"},"889":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_req_u"],"kind":"union"},"1770":{"crate_id":17,"path":["object","elf","Relr64"],"kind":"struct"},"2651":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"335":{"crate_id":3,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1216":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2097":{"crate_id":2,"path":["core","num","dec2flt","decimal_seq","DecimalSeq"],"kind":"struct"},"1543":{"crate_id":20,"path":["clap_builder","builder","debug_asserts","Flag"],"kind":"enum"},"662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2424":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"989":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_discarded"],"kind":"struct"},"108":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1870":{"crate_id":35,"path":["unicode_width","tables","WidthInfo"],"kind":"struct"},"2751":{"crate_id":6,"path":["libc","unix","linux_like","linux","iwreq"],"kind":"struct"},"435":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1316":{"crate_id":20,"path":["clap_builder","builder","app_settings","AppSettings"],"kind":"enum"},"2197":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1643":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"762":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1089":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"208":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1970":{"crate_id":21,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"2297":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_point"],"kind":"struct"},"535":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1416":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1743":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"862":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2624":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"308":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1189":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2070":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2397":{"crate_id":3,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"635":{"crate_id":4,"path":["compiler_builtins","math","libm_math","generic","fma","Norm"],"kind":"struct"},"1516":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1843":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"81":{"crate_id":0,"path":["clap"],"kind":"module"},"962":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2724":{"crate_id":1,"path":["std","sync","poison","once","OnceState"],"kind":"struct"},"408":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1289":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2170":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2497":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"735":{"crate_id":2,"path":["core","core_arch","x86","__m512h"],"kind":"struct"},"1616":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1062":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"181":{"crate_id":20,"path":["clap_builder","derive","FromArgMatches"],"kind":"trait"},"1943":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"508":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1389":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2270":{"crate_id":2,"path":["core","marker","variance","PhantomContravariant"],"kind":"struct"},"1716":{"crate_id":1,"path":["std","sys","process","unix","unix","ExitStatusError"],"kind":"struct"},"835":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2597":{"crate_id":2,"path":["core","core_arch","simd","f16x32"],"kind":"struct"},"1162":{"crate_id":1,"path":["std","process","CommandEnvs"],"kind":"struct"},"281":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2043":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","fpos_t"],"kind":"struct"},"1489":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous__kernel_fsid_t"],"kind":"struct"},"2370":{"crate_id":33,"path":["linux_raw_sys","general","stat"],"kind":"struct"},"1816":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"935":{"crate_id":6,"path":["libc","unix","in6_addr"],"kind":"struct"},"2697":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1262":{"crate_id":3,"path":["alloc","collections","btree","set","Cursor"],"kind":"struct"},"381":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2143":{"crate_id":20,"path":["clap_builder","util","any_value","AnyValueId"],"kind":"struct"},"2470":{"crate_id":33,"path":["linux_raw_sys","general","uffd_msg__bindgen_ty_1__bindgen_ty_4"],"kind":"struct"},"708":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1589":{"crate_id":20,"path":["clap_builder","builder","value_parser","OsStringValueParser"],"kind":"struct"},"1916":{"crate_id":33,"path":["linux_raw_sys","general","epoll_event"],"kind":"struct"},"154":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_perout_request"],"kind":"struct"},"1035":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1362":{"crate_id":32,"path":["rustix","backend","io","types","_","InternalBitFlags"],"kind":"struct"},"481":{"crate_id":3,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2243":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2570":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"808":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1689":{"crate_id":25,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"2016":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"254":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1135":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"581":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1462":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2343":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2670":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"908":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1789":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sem_t"],"kind":"struct"},"354":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2116":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"681":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1562":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2443":{"crate_id":24,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"127":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1008":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1889":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1335":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"454":{"crate_id":2,"path":["core","ptr","without_provenance"],"kind":"function"},"2216":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"781":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1662":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2543":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1989":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"227":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1108":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1435":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"554":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2643":{"crate_id":1,"path":["std","sys","fs","unix","cfm","CachedFileMetadata"],"kind":"struct"},"881":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"}},"external_crates":{"22":{"name":"clap_lex","html_root_url":"https://docs.rs/clap_lex/0.7.5/x86_64-unknown-linux-gnu/"},"3":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"anstyle_parse","html_root_url":"https://docs.rs/anstyle-parse/0.2.7/x86_64-unknown-linux-gnu/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"is_terminal_polyfill","html_root_url":"https://docs.rs/is_terminal_polyfill/1.70.1/x86_64-unknown-linux-gnu/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"terminal_size","html_root_url":"https://docs.rs/terminal_size/0.4.2/x86_64-unknown-linux-gnu/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"34":{"name":"bitflags","html_root_url":"https://docs.rs/bitflags/2.9.1/x86_64-unknown-linux-gnu/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"anstyle","html_root_url":"https://docs.rs/anstyle/1.0.11/x86_64-unknown-linux-gnu/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"anstream","html_root_url":"https://docs.rs/anstream/0.6.19/x86_64-unknown-linux-gnu/"},"5":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"colorchoice","html_root_url":"https://docs.rs/colorchoice/1.0.4/x86_64-unknown-linux-gnu/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"30":{"name":"strsim","html_root_url":"https://docs.rs/strsim/0.11.1/x86_64-unknown-linux-gnu/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"linux_raw_sys","html_root_url":"https://docs.rs/linux-raw-sys/0.9.4/x86_64-unknown-linux-gnu/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"36":{"name":"clap_derive","html_root_url":"https://docs.rs/clap_derive/4.5.40/x86_64-unknown-linux-gnu/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"clap_builder","html_root_url":"https://docs.rs/clap_builder/4.5.40/x86_64-unknown-linux-gnu/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"unicase","html_root_url":"https://docs.rs/unicase/2.8.1/x86_64-unknown-linux-gnu/"},"4":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"utf8parse","html_root_url":"https://docs.rs/utf8parse/0.2.2/x86_64-unknown-linux-gnu/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"anstyle_query","html_root_url":"https://docs.rs/anstyle-query/1.1.3/x86_64-unknown-linux-gnu/"},"10":{"name":"adler2","html_root_url":"https://docs.rs/adler2/2.0.0/"},"32":{"name":"rustix","html_root_url":"https://docs.rs/rustix/1.0.7/x86_64-unknown-linux-gnu/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"35":{"name":"unicode_width","html_root_url":"https://docs.rs/unicode-width/0.2.0/x86_64-unknown-linux-gnu/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"target":{"triple":"x86_64-unknown-linux-gnu","target_features":[{"name":"adx","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"aes","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"amx-avx512","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-bf16","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-complex","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-fp16","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-fp8","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-int8","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-movrs","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-tf32","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-tile","implies_features":[],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"amx-transpose","implies_features":["amx-tile"],"unstable_feature_gate":"x86_amx_intrinsics","globally_enabled":false},{"name":"apxf","implies_features":[],"unstable_feature_gate":"apx_target_feature","globally_enabled":false},{"name":"avx","implies_features":["sse4.2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx10.1","implies_features":["avx512bf16","avx512bitalg","avx512bw","avx512cd","avx512dq","avx512f","avx512fp16","avx512ifma","avx512vbmi","avx512vbmi2","avx512vl","avx512vnni","avx512vpopcntdq"],"unstable_feature_gate":"avx10_target_feature","globally_enabled":false},{"name":"avx10.2","implies_features":["avx10.1"],"unstable_feature_gate":"avx10_target_feature","globally_enabled":false},{"name":"avx2","implies_features":["avx"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512bf16","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512bitalg","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512bw","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512cd","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512dq","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512f","implies_features":["avx2","fma","f16c"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512fp16","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512ifma","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vbmi","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vbmi2","implies_features":["avx512bw"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vl","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vnni","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vp2intersect","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avx512vpopcntdq","implies_features":["avx512f"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxifma","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxneconvert","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxvnni","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxvnniint16","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"avxvnniint8","implies_features":["avx2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"bmi1","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"bmi2","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"cmpxchg16b","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"ermsb","implies_features":[],"unstable_feature_gate":"ermsb_target_feature","globally_enabled":false},{"name":"f16c","implies_features":["avx"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"fma","implies_features":["avx"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"fxsr","implies_features":[],"unstable_feature_gate":null,"globally_enabled":true},{"name":"gfni","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"kl","implies_features":["sse2"],"unstable_feature_gate":"keylocker_x86","globally_enabled":false},{"name":"lahfsahf","implies_features":[],"unstable_feature_gate":"lahfsahf_target_feature","globally_enabled":false},{"name":"lzcnt","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"movbe","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"movrs","implies_features":[],"unstable_feature_gate":"movrs_target_feature","globally_enabled":false},{"name":"pclmulqdq","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"popcnt","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"prfchw","implies_features":[],"unstable_feature_gate":"prfchw_target_feature","globally_enabled":false},{"name":"rdrand","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"rdseed","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"rtm","implies_features":[],"unstable_feature_gate":"rtm_target_feature","globally_enabled":false},{"name":"sha","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sha512","implies_features":["avx2"],"unstable_feature_gate":"sha512_sm_x86","globally_enabled":false},{"name":"sm3","implies_features":["avx"],"unstable_feature_gate":"sha512_sm_x86","globally_enabled":false},{"name":"sm4","implies_features":["avx2"],"unstable_feature_gate":"sha512_sm_x86","globally_enabled":false},{"name":"soft-float","implies_features":[],"unstable_feature_gate":"x87_target_feature","globally_enabled":false},{"name":"sse","implies_features":[],"unstable_feature_gate":null,"globally_enabled":true},{"name":"sse2","implies_features":["sse"],"unstable_feature_gate":null,"globally_enabled":true},{"name":"sse3","implies_features":["sse2"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sse4.1","implies_features":["ssse3"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sse4.2","implies_features":["sse4.1"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"sse4a","implies_features":["sse3"],"unstable_feature_gate":"sse4a_target_feature","globally_enabled":false},{"name":"ssse3","implies_features":["sse3"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"tbm","implies_features":[],"unstable_feature_gate":"tbm_target_feature","globally_enabled":false},{"name":"vaes","implies_features":["avx2","aes"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"vpclmulqdq","implies_features":["avx","pclmulqdq"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"widekl","implies_features":["kl"],"unstable_feature_gate":"keylocker_x86","globally_enabled":false},{"name":"x87","implies_features":[],"unstable_feature_gate":"x87_target_feature","globally_enabled":true},{"name":"xop","implies_features":["avx","sse4a"],"unstable_feature_gate":"xop_target_feature","globally_enabled":false},{"name":"xsave","implies_features":[],"unstable_feature_gate":null,"globally_enabled":false},{"name":"xsavec","implies_features":["xsave"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"xsaveopt","implies_features":["xsave"],"unstable_feature_gate":null,"globally_enabled":false},{"name":"xsaves","implies_features":["xsave"],"unstable_feature_gate":null,"globally_enabled":false}]},"format_version":46}